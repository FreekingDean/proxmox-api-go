// File generated by proxmox json schema, DO NOT EDIT

package {{.Name}}

import (
  "context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

{{- define "type" -}}
{{- if eq .Type "struct" -}}
{{- if .Properties -}}
struct{
{{- range $_, $prop := .Properties }}
  {{$prop.Name}} {{template "type" $prop}} `url:"{{$prop.JSONName}}{{ if $prop.Optional }},omitempty{{ end }}",json:"{{$prop.JSONName}}{{ if $prop.Optional }},omitempty{{ end }}"`
{{- end}}
} 
{{- else -}}
map[string]interface{}
{{- end}}
{{- else if eq .Type "slice" -}}
[]{{if eq (index .Properties 0).Type "struct"}}*{{end}}{{template "type" (index .Properties 0)}}
{{- else -}}
{{.Type}}
{{- end}}
{{- end}}

{{ define "operation" }}
{{if .Request}}
type {{.Operation}}Request {{ template "type" .Request}}
{{end}}

{{if .Response}}
type {{.Operation}}Response {{ template "type" .Response}}
{{end}}

// {{.Operation}} {{.Description}}
func (c *Client) {{.Operation}}(ctx context.Context
{{- if .Request}}, req *{{.Operation}}Request{{end -}}
  ) ({{ if .Response -}}*{{.Operation}}Response, {{ end }}error) {
  {{ if .Response -}}
	var resp *{{.Operation}}Response
  {{ end }}
  err := c.httpClient.Do(ctx, "{{.Path}}", "{{.Method}}", {{ if .Response }}&resp{{ else }}nil{{ end }}, {{if .Request}}req{{else}}nil{{end}})
  return {{ if .Response }}resp, {{ end }}err
}
{{ end }}


{{ range $_, $method := .Methods }}
{{ template "operation" $method }}
{{ end }}
