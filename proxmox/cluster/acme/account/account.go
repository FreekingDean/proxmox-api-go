// File generated by proxmox json schema, DO NOT EDIT

package account

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*map[string]interface{}

// Index ACMEAccount index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/account", "GET", &resp, nil)
	return resp, err
}

type CreateRequest struct {
	Contact string `url:"contact",json:"contact"` // Contact email addresses.

	// The following parameters are optional
	Directory *string `url:"directory,omitempty",json:"directory,omitempty"` // URL of ACME CA directory endpoint.
	Name      *string `url:"name,omitempty",json:"name,omitempty"`           // ACME account config file name.
	TosUrl    *string `url:"tos_url,omitempty",json:"tos_url,omitempty"`     // URL of CA TermsOfService - setting this indicates agreement.
}

type CreateResponse string

// Create Register a new ACME account with CA.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/account", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {

	// The following parameters are optional
	Name *string `url:"name,omitempty",json:"name,omitempty"` // ACME account config file name.
}

type FindResponse struct {

	// The following parameters are optional
	Account   map[string]interface{} `url:"account,omitempty",json:"account,omitempty"`
	Directory *string                `url:"directory,omitempty",json:"directory,omitempty"` // URL of ACME CA directory endpoint.
	Location  *string                `url:"location,omitempty",json:"location,omitempty"`
	Tos       *string                `url:"tos,omitempty",json:"tos,omitempty"`
}

// Find Return existing ACME account information.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/account/{name}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {

	// The following parameters are optional
	Contact *string `url:"contact,omitempty",json:"contact,omitempty"` // Contact email addresses.
	Name    *string `url:"name,omitempty",json:"name,omitempty"`       // ACME account config file name.
}

type UpdateResponse string

// Update Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/account/{name}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {

	// The following parameters are optional
	Name *string `url:"name,omitempty",json:"name,omitempty"` // ACME account config file name.
}

type DeleteResponse string

// Delete Deactivate existing ACME account at CA.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/account/{name}", "DELETE", &resp, req)
	return resp, err
}
