// File generated by proxmox json schema, DO NOT EDIT

package plugins

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

const (
	Api_1984HOSTING   Api = "1984hosting"
	Api_ACMEDNS       Api = "acmedns"
	Api_ACMEPROXY     Api = "acmeproxy"
	Api_ACTIVE24      Api = "active24"
	Api_AD            Api = "ad"
	Api_ALI           Api = "ali"
	Api_ANX           Api = "anx"
	Api_ARVAN         Api = "arvan"
	Api_AURORA        Api = "aurora"
	Api_AUTODNS       Api = "autodns"
	Api_AWS           Api = "aws"
	Api_AZION         Api = "azion"
	Api_AZURE         Api = "azure"
	Api_BUNNY         Api = "bunny"
	Api_CF            Api = "cf"
	Api_CLOUDDNS      Api = "clouddns"
	Api_CLOUDNS       Api = "cloudns"
	Api_CN            Api = "cn"
	Api_CONOHA        Api = "conoha"
	Api_CONSTELLIX    Api = "constellix"
	Api_CPANEL        Api = "cpanel"
	Api_CURANET       Api = "curanet"
	Api_CYON          Api = "cyon"
	Api_DA            Api = "da"
	Api_DDNSS         Api = "ddnss"
	Api_DESEC         Api = "desec"
	Api_DF            Api = "df"
	Api_DGON          Api = "dgon"
	Api_DNSHOME       Api = "dnshome"
	Api_DNSIMPLE      Api = "dnsimple"
	Api_DNSSERVICES   Api = "dnsservices"
	Api_DO            Api = "do"
	Api_DOAPI         Api = "doapi"
	Api_DOMENESHOP    Api = "domeneshop"
	Api_DP            Api = "dp"
	Api_DPI           Api = "dpi"
	Api_DREAMHOST     Api = "dreamhost"
	Api_DUCKDNS       Api = "duckdns"
	Api_DURABLEDNS    Api = "durabledns"
	Api_DYN           Api = "dyn"
	Api_DYNU          Api = "dynu"
	Api_DYNV6         Api = "dynv6"
	Api_EASYDNS       Api = "easydns"
	Api_EDGEDNS       Api = "edgedns"
	Api_EUSERV        Api = "euserv"
	Api_EXOSCALE      Api = "exoscale"
	Api_FORNEX        Api = "fornex"
	Api_FREEDNS       Api = "freedns"
	Api_GANDI_LIVEDNS Api = "gandi_livedns"
	Api_GCLOUD        Api = "gcloud"
	Api_GD            Api = "gd"
	Api_GEOSCALING    Api = "geoscaling"
	Api_HE            Api = "he"
	Api_HETZNER       Api = "hetzner"
	Api_HEXONET       Api = "hexonet"
	Api_HOSTINGDE     Api = "hostingde"
	Api_HUAWEICLOUD   Api = "huaweicloud"
	Api_INFOBLOX      Api = "infoblox"
	Api_INFOMANIAK    Api = "infomaniak"
	Api_INTERNETBS    Api = "internetbs"
	Api_INWX          Api = "inwx"
	Api_IONOS         Api = "ionos"
	Api_ISPCONFIG     Api = "ispconfig"
	Api_JD            Api = "jd"
	Api_JOKER         Api = "joker"
	Api_KAPPERNET     Api = "kappernet"
	Api_KAS           Api = "kas"
	Api_KINGHOST      Api = "kinghost"
	Api_KNOT          Api = "knot"
	Api_LA            Api = "la"
	Api_LEASEWEB      Api = "leaseweb"
	Api_LEXICON       Api = "lexicon"
	Api_LINODE        Api = "linode"
	Api_LINODE_V4     Api = "linode_v4"
	Api_LOOPIA        Api = "loopia"
	Api_LUA           Api = "lua"
	Api_MARADNS       Api = "maradns"
	Api_ME            Api = "me"
	Api_MIAB          Api = "miab"
	Api_MISAKA        Api = "misaka"
	Api_MYAPI         Api = "myapi"
	Api_MYDEVIL       Api = "mydevil"
	Api_MYDNSJP       Api = "mydnsjp"
	Api_MYTHIC_BEASTS Api = "mythic_beasts"
	Api_NAMECHEAP     Api = "namecheap"
	Api_NAMECOM       Api = "namecom"
	Api_NAMESILO      Api = "namesilo"
	Api_NEDERHOST     Api = "nederhost"
	Api_NEODIGIT      Api = "neodigit"
	Api_NETCUP        Api = "netcup"
	Api_NETLIFY       Api = "netlify"
	Api_NIC           Api = "nic"
	Api_NJALLA        Api = "njalla"
	Api_NM            Api = "nm"
	Api_NSD           Api = "nsd"
	Api_NSONE         Api = "nsone"
	Api_NSUPDATE      Api = "nsupdate"
	Api_NW            Api = "nw"
	Api_OCI           Api = "oci"
	Api_ONE           Api = "one"
	Api_ONLINE        Api = "online"
	Api_OPENPROVIDER  Api = "openprovider"
	Api_OPENSTACK     Api = "openstack"
	Api_OPNSENSE      Api = "opnsense"
	Api_OVH           Api = "ovh"
	Api_PDNS          Api = "pdns"
	Api_PLESKXML      Api = "pleskxml"
	Api_POINTHQ       Api = "pointhq"
	Api_PORKBUN       Api = "porkbun"
	Api_RACKCORP      Api = "rackcorp"
	Api_RACKSPACE     Api = "rackspace"
	Api_RAGE4         Api = "rage4"
	Api_RCODE0        Api = "rcode0"
	Api_REGRU         Api = "regru"
	Api_SCALEWAY      Api = "scaleway"
	Api_SCHLUNDTECH   Api = "schlundtech"
	Api_SELECTEL      Api = "selectel"
	Api_SELFHOST      Api = "selfhost"
	Api_SERVERCOW     Api = "servercow"
	Api_SIMPLY        Api = "simply"
	Api_TELE3         Api = "tele3"
	Api_TRANSIP       Api = "transip"
	Api_UDR           Api = "udr"
	Api_ULTRA         Api = "ultra"
	Api_UNOEURO       Api = "unoeuro"
	Api_VARIOMEDIA    Api = "variomedia"
	Api_VEESP         Api = "veesp"
	Api_VERCEL        Api = "vercel"
	Api_VSCALE        Api = "vscale"
	Api_VULTR         Api = "vultr"
	Api_WEBSUPPORT    Api = "websupport"
	Api_WORLD4YOU     Api = "world4you"
	Api_YANDEX        Api = "yandex"
	Api_YC            Api = "yc"
	Api_ZILORE        Api = "zilore"
	Api_ZONE          Api = "zone"
	Api_ZONOMI        Api = "zonomi"

	Type_DNS        Type = "dns"
	Type_STANDALONE Type = "standalone"
)

type Api string
type Type string

func PtrApi(i Api) *Api {
	return &i
}
func PtrType(i Type) *Type {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {

	// The following parameters are optional
	Type *Type `url:"type,omitempty" json:"type,omitempty"` // Only list ACME plugins of a specific type
}
type _IndexRequest IndexRequest

type IndexResponse struct {
	Plugin string `url:"plugin" json:"plugin"` // Unique identifier for ACME plugin instance.

}
type _IndexResponse IndexResponse

type CreateRequest struct {
	Id   string `url:"id" json:"id"`     // ACME Plugin ID name
	Type Type   `url:"type" json:"type"` // ACME challenge type.

	// The following parameters are optional
	Api             *Api          `url:"api,omitempty" json:"api,omitempty"`                           // API plugin name
	Data            *string       `url:"data,omitempty" json:"data,omitempty"`                         // DNS plugin data. (base64 encoded)
	Disable         *util.PVEBool `url:"disable,omitempty" json:"disable,omitempty"`                   // Flag to disable the config.
	Nodes           *string       `url:"nodes,omitempty" json:"nodes,omitempty"`                       // List of cluster node names.
	ValidationDelay *int          `url:"validation-delay,omitempty" json:"validation-delay,omitempty"` // Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.
}
type _CreateRequest CreateRequest

type FindRequest struct {
	Id string `url:"id" json:"id"` // Unique identifier for ACME plugin instance.

}
type _FindRequest FindRequest

type UpdateRequest struct {
	Id string `url:"id" json:"id"` // ACME Plugin ID name

	// The following parameters are optional
	Api             *Api          `url:"api,omitempty" json:"api,omitempty"`                           // API plugin name
	Data            *string       `url:"data,omitempty" json:"data,omitempty"`                         // DNS plugin data. (base64 encoded)
	Delete          *string       `url:"delete,omitempty" json:"delete,omitempty"`                     // A list of settings you want to delete.
	Digest          *string       `url:"digest,omitempty" json:"digest,omitempty"`                     // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Disable         *util.PVEBool `url:"disable,omitempty" json:"disable,omitempty"`                   // Flag to disable the config.
	Nodes           *string       `url:"nodes,omitempty" json:"nodes,omitempty"`                       // List of cluster node names.
	ValidationDelay *int          `url:"validation-delay,omitempty" json:"validation-delay,omitempty"` // Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.
}
type _UpdateRequest UpdateRequest

type DeleteRequest struct {
	Id string `url:"id" json:"id"` // Unique identifier for ACME plugin instance.

}
type _DeleteRequest DeleteRequest

// Index ACME plugin index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins", "GET", &resp, req)
	return resp, err
}

// Create Add ACME plugin configuration.
func (c *Client) Create(ctx context.Context, req CreateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins", "POST", nil, req)
	return err
}

// Find Get ACME plugin configuration.
func (c *Client) Find(ctx context.Context, req FindRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "GET", &resp, req)
	return resp, err
}

// Update Update ACME plugin configuration.
func (c *Client) Update(ctx context.Context, req UpdateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "PUT", nil, req)
	return err
}

// Delete Delete ACME plugin configuration.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "DELETE", nil, req)
	return err
}
