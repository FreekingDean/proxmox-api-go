// File generated by proxmox json schema, DO NOT EDIT

package plugins

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {

	// The following parameters are optional
	Type *string `url:"type,omitempty",json:"type,omitempty"` // Only list ACME plugins of a specific type
}

type IndexResponse []*struct {
	Plugin string `url:"plugin",json:"plugin"` // Unique identifier for ACME plugin instance.

}

// Index ACME plugin index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Id   string `url:"id",json:"id"`     // ACME Plugin ID name
	Type string `url:"type",json:"type"` // ACME challenge type.

	// The following parameters are optional
	Api             *string `url:"api,omitempty",json:"api,omitempty"`                           // API plugin name
	Data            *string `url:"data,omitempty",json:"data,omitempty"`                         // DNS plugin data. (base64 encoded)
	Disable         *bool   `url:"disable,omitempty",json:"disable,omitempty"`                   // Flag to disable the config.
	Nodes           *string `url:"nodes,omitempty",json:"nodes,omitempty"`                       // List of cluster node names.
	ValidationDelay *int    `url:"validation-delay,omitempty",json:"validation-delay,omitempty"` // Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.
}

type CreateResponse map[string]interface{}

// Create Add ACME plugin configuration.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Id string `url:"id",json:"id"` // Unique identifier for ACME plugin instance.

}

type FindResponse map[string]interface{}

// Find Get ACME plugin configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Id string `url:"id",json:"id"` // ACME Plugin ID name

	// The following parameters are optional
	Api             *string `url:"api,omitempty",json:"api,omitempty"`                           // API plugin name
	Data            *string `url:"data,omitempty",json:"data,omitempty"`                         // DNS plugin data. (base64 encoded)
	Delete          *string `url:"delete,omitempty",json:"delete,omitempty"`                     // A list of settings you want to delete.
	Digest          *string `url:"digest,omitempty",json:"digest,omitempty"`                     // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Disable         *bool   `url:"disable,omitempty",json:"disable,omitempty"`                   // Flag to disable the config.
	Nodes           *string `url:"nodes,omitempty",json:"nodes,omitempty"`                       // List of cluster node names.
	ValidationDelay *int    `url:"validation-delay,omitempty",json:"validation-delay,omitempty"` // Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.
}

type UpdateResponse map[string]interface{}

// Update Update ACME plugin configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Id string `url:"id",json:"id"` // Unique identifier for ACME plugin instance.

}

type DeleteResponse map[string]interface{}

// Delete Delete ACME plugin configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "DELETE", &resp, req)
	return resp, err
}
