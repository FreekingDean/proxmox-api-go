// File generated by proxmox json schema, DO NOT EDIT

package plugins

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {

	// The following parameters are optional
	Type *string `url:"type,omitempty" json:"type,omitempty"` // Only list ACME plugins of a specific type
}

type IndexResponse struct {
	Plugin string `url:"plugin" json:"plugin"` // Unique identifier for ACME plugin instance.

}

type CreateRequest struct {
	Id   string `url:"id" json:"id"`     // ACME Plugin ID name
	Type string `url:"type" json:"type"` // ACME challenge type.

	// The following parameters are optional
	Api             *string           `url:"api,omitempty" json:"api,omitempty"`                           // API plugin name
	Data            *string           `url:"data,omitempty" json:"data,omitempty"`                         // DNS plugin data. (base64 encoded)
	Disable         *util.SpecialBool `url:"disable,omitempty" json:"disable,omitempty"`                   // Flag to disable the config.
	Nodes           *string           `url:"nodes,omitempty" json:"nodes,omitempty"`                       // List of cluster node names.
	ValidationDelay *int              `url:"validation-delay,omitempty" json:"validation-delay,omitempty"` // Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.
}

type FindRequest struct {
	Id string `url:"id" json:"id"` // Unique identifier for ACME plugin instance.

}

type UpdateRequest struct {
	Id string `url:"id" json:"id"` // ACME Plugin ID name

	// The following parameters are optional
	Api             *string           `url:"api,omitempty" json:"api,omitempty"`                           // API plugin name
	Data            *string           `url:"data,omitempty" json:"data,omitempty"`                         // DNS plugin data. (base64 encoded)
	Delete          *string           `url:"delete,omitempty" json:"delete,omitempty"`                     // A list of settings you want to delete.
	Digest          *string           `url:"digest,omitempty" json:"digest,omitempty"`                     // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Disable         *util.SpecialBool `url:"disable,omitempty" json:"disable,omitempty"`                   // Flag to disable the config.
	Nodes           *string           `url:"nodes,omitempty" json:"nodes,omitempty"`                       // List of cluster node names.
	ValidationDelay *int              `url:"validation-delay,omitempty" json:"validation-delay,omitempty"` // Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.
}

type DeleteRequest struct {
	Id string `url:"id" json:"id"` // Unique identifier for ACME plugin instance.

}

// Index ACME plugin index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins", "GET", &resp, req)
	return resp, err
}

// Create Add ACME plugin configuration.
func (c *Client) Create(ctx context.Context, req CreateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins", "POST", nil, req)
	return err
}

// Find Get ACME plugin configuration.
func (c *Client) Find(ctx context.Context, req FindRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "GET", &resp, req)
	return resp, err
}

// Update Update ACME plugin configuration.
func (c *Client) Update(ctx context.Context, req UpdateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "PUT", nil, req)
	return err
}

// Delete Delete ACME plugin configuration.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/acme/plugins/{id}", "DELETE", nil, req)
	return err
}
