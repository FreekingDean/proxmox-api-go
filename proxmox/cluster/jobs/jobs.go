// File generated by proxmox json schema, DO NOT EDIT

package jobs

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Subdir string `url:"subdir" json:"subdir"` // API sub-directory endpoint

}

// Index Index for jobs related endpoints.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/jobs", "GET", &resp, nil)
	return resp, err
}

type ScheduleAnalyzeRequest struct {
	Schedule string `url:"schedule" json:"schedule"` // Job schedule. The format is a subset of `systemd` calendar events.

	// The following parameters are optional
	Iterations *int `url:"iterations,omitempty" json:"iterations,omitempty"` // Number of event-iteration to simulate and return.
	Starttime  *int `url:"starttime,omitempty" json:"starttime,omitempty"`   // UNIX timestamp to start the calculation from. Defaults to the current time.
}

type ScheduleAnalyzeResponse []*struct {
	Timestamp int    `url:"timestamp" json:"timestamp"` // UNIX timestamp for the run.
	Utc       string `url:"utc" json:"utc"`             // UTC timestamp for the run.

}

// ScheduleAnalyze Returns a list of future schedule runtimes.
func (c *Client) ScheduleAnalyze(ctx context.Context, req *ScheduleAnalyzeRequest) (*ScheduleAnalyzeResponse, error) {
	var resp *ScheduleAnalyzeResponse

	err := c.httpClient.Do(ctx, "/cluster/jobs/schedule-analyze", "GET", &resp, req)
	return resp, err
}
