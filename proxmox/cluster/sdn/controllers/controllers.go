// File generated by proxmox json schema, DO NOT EDIT

package controllers

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Pending *bool   `url:"pending,omitempty",json:"pending,omitempty"`
	Running *bool   `url:"running,omitempty",json:"running,omitempty"`
	Type    *string `url:"type,omitempty",json:"type,omitempty"`
}

type IndexResponse []*struct {
	State      *string `url:"state,omitempty",json:"state,omitempty"`
	Type       string  `url:"type",json:"type"`
	Controller string  `url:"controller",json:"controller"`
}

// Index SDN controllers index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	BgpMultipathAsPathRelax *bool   `url:"bgp-multipath-as-path-relax,omitempty",json:"bgp-multipath-as-path-relax,omitempty"`
	Node                    *string `url:"node,omitempty",json:"node,omitempty"`
	Type                    string  `url:"type",json:"type"`
	EbgpMultihop            *int    `url:"ebgp-multihop,omitempty",json:"ebgp-multihop,omitempty"`
	Loopback                *string `url:"loopback,omitempty",json:"loopback,omitempty"`
	Peers                   *string `url:"peers,omitempty",json:"peers,omitempty"`
	Asn                     *int    `url:"asn,omitempty",json:"asn,omitempty"`
	Controller              string  `url:"controller",json:"controller"`
	Ebgp                    *bool   `url:"ebgp,omitempty",json:"ebgp,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create a new sdn controller object.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Controller string `url:"controller",json:"controller"`
	Pending    *bool  `url:"pending,omitempty",json:"pending,omitempty"`
	Running    *bool  `url:"running,omitempty",json:"running,omitempty"`
}

type FindResponse map[string]interface{}

// Find Read sdn controller configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers/{controller}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	BgpMultipathAsPathRelax *bool   `url:"bgp-multipath-as-path-relax,omitempty",json:"bgp-multipath-as-path-relax,omitempty"`
	Delete                  *string `url:"delete,omitempty",json:"delete,omitempty"`
	Digest                  *string `url:"digest,omitempty",json:"digest,omitempty"`
	Ebgp                    *bool   `url:"ebgp,omitempty",json:"ebgp,omitempty"`
	EbgpMultihop            *int    `url:"ebgp-multihop,omitempty",json:"ebgp-multihop,omitempty"`
	Loopback                *string `url:"loopback,omitempty",json:"loopback,omitempty"`
	Peers                   *string `url:"peers,omitempty",json:"peers,omitempty"`
	Asn                     *int    `url:"asn,omitempty",json:"asn,omitempty"`
	Node                    *string `url:"node,omitempty",json:"node,omitempty"`
	Controller              string  `url:"controller",json:"controller"`
}

type UpdateResponse map[string]interface{}

// Update Update sdn controller object configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers/{controller}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Controller string `url:"controller",json:"controller"`
}

type DeleteResponse map[string]interface{}

// Delete Delete sdn controller object configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers/{controller}", "DELETE", &resp, req)
	return resp, err
}
