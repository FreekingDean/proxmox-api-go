// File generated by proxmox json schema, DO NOT EDIT

package controllers

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {

	// The following parameters are optional
	Pending *util.SpecialBool `url:"pending,omitempty" json:"pending,omitempty"` // Display pending config.
	Running *util.SpecialBool `url:"running,omitempty" json:"running,omitempty"` // Display running config.
	Type    *string           `url:"type,omitempty" json:"type,omitempty"`       // Only list sdn controllers of specific type
}

type IndexResponse []*struct {
	Controller string `url:"controller" json:"controller"`
	Type       string `url:"type" json:"type"`

	// The following parameters are optional
	State *string `url:"state,omitempty" json:"state,omitempty"`
}

// Index SDN controllers index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Controller string `url:"controller" json:"controller"` // The SDN controller object identifier.
	Type       string `url:"type" json:"type"`             // Plugin type.

	// The following parameters are optional
	Asn                     *int              `url:"asn,omitempty" json:"asn,omitempty"` // autonomous system number
	BgpMultipathAsPathRelax *util.SpecialBool `url:"bgp-multipath-as-path-relax,omitempty" json:"bgp-multipath-as-path-relax,omitempty"`
	Ebgp                    *util.SpecialBool `url:"ebgp,omitempty" json:"ebgp,omitempty"` // Enable ebgp. (remote-as external)
	EbgpMultihop            *int              `url:"ebgp-multihop,omitempty" json:"ebgp-multihop,omitempty"`
	Loopback                *string           `url:"loopback,omitempty" json:"loopback,omitempty"` // source loopback interface.
	Node                    *string           `url:"node,omitempty" json:"node,omitempty"`         // The cluster node name.
	Peers                   *string           `url:"peers,omitempty" json:"peers,omitempty"`       // peers address list.
}

type CreateResponse map[string]interface{}

// Create Create a new sdn controller object.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Controller string `url:"controller" json:"controller"` // The SDN controller object identifier.

	// The following parameters are optional
	Pending *util.SpecialBool `url:"pending,omitempty" json:"pending,omitempty"` // Display pending config.
	Running *util.SpecialBool `url:"running,omitempty" json:"running,omitempty"` // Display running config.
}

type FindResponse map[string]interface{}

// Find Read sdn controller configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers/{controller}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Controller string `url:"controller" json:"controller"` // The SDN controller object identifier.

	// The following parameters are optional
	Asn                     *int              `url:"asn,omitempty" json:"asn,omitempty"` // autonomous system number
	BgpMultipathAsPathRelax *util.SpecialBool `url:"bgp-multipath-as-path-relax,omitempty" json:"bgp-multipath-as-path-relax,omitempty"`
	Delete                  *string           `url:"delete,omitempty" json:"delete,omitempty"` // A list of settings you want to delete.
	Digest                  *string           `url:"digest,omitempty" json:"digest,omitempty"` // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Ebgp                    *util.SpecialBool `url:"ebgp,omitempty" json:"ebgp,omitempty"`     // Enable ebgp. (remote-as external)
	EbgpMultihop            *int              `url:"ebgp-multihop,omitempty" json:"ebgp-multihop,omitempty"`
	Loopback                *string           `url:"loopback,omitempty" json:"loopback,omitempty"` // source loopback interface.
	Node                    *string           `url:"node,omitempty" json:"node,omitempty"`         // The cluster node name.
	Peers                   *string           `url:"peers,omitempty" json:"peers,omitempty"`       // peers address list.
}

type UpdateResponse map[string]interface{}

// Update Update sdn controller object configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers/{controller}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Controller string `url:"controller" json:"controller"` // The SDN controller object identifier.

}

type DeleteResponse map[string]interface{}

// Delete Delete sdn controller object configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/controllers/{controller}", "DELETE", &resp, req)
	return resp, err
}
