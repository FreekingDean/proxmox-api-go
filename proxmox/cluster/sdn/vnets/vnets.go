// File generated by proxmox json schema, DO NOT EDIT

package vnets

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Running *bool `url:"running,omitempty",json:"running,omitempty"`
	Pending *bool `url:"pending,omitempty",json:"pending,omitempty"`
}

type IndexResponse []*map[string]interface{}

// Index SDN vnets index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Zone      string  `url:"zone",json:"zone"`
	Alias     *string `url:"alias,omitempty",json:"alias,omitempty"`
	Tag       *int    `url:"tag,omitempty",json:"tag,omitempty"`
	Type      *string `url:"type,omitempty",json:"type,omitempty"`
	Vlanaware *bool   `url:"vlanaware,omitempty",json:"vlanaware,omitempty"`
	Vnet      string  `url:"vnet",json:"vnet"`
}

type CreateResponse map[string]interface{}

// Create Create a new sdn vnet object.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Pending *bool  `url:"pending,omitempty",json:"pending,omitempty"`
	Running *bool  `url:"running,omitempty",json:"running,omitempty"`
	Vnet    string `url:"vnet",json:"vnet"`
}

type FindResponse map[string]interface{}

// Find Read sdn vnet configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Tag       *int    `url:"tag,omitempty",json:"tag,omitempty"`
	Vlanaware *bool   `url:"vlanaware,omitempty",json:"vlanaware,omitempty"`
	Vnet      string  `url:"vnet",json:"vnet"`
	Zone      *string `url:"zone,omitempty",json:"zone,omitempty"`
	Alias     *string `url:"alias,omitempty",json:"alias,omitempty"`
	Delete    *string `url:"delete,omitempty",json:"delete,omitempty"`
	Digest    *string `url:"digest,omitempty",json:"digest,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update sdn vnet object configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Vnet string `url:"vnet",json:"vnet"`
}

type DeleteResponse map[string]interface{}

// Delete Delete sdn vnet object configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}", "DELETE", &resp, req)
	return resp, err
}
