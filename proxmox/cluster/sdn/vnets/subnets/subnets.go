// File generated by proxmox json schema, DO NOT EDIT

package subnets

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

const (
	Type_SUBNET Type = "subnet"
)

type Type string

func PtrType(i Type) *Type {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Vnet string `url:"vnet" json:"vnet"` // The SDN vnet object identifier.

	// The following parameters are optional
	Pending *util.PVEBool `url:"pending,omitempty" json:"pending,omitempty"` // Display pending config.
	Running *util.PVEBool `url:"running,omitempty" json:"running,omitempty"` // Display running config.
}

type CreateRequest struct {
	Subnet string `url:"subnet" json:"subnet"` // The SDN subnet object identifier.
	Type   Type   `url:"type" json:"type"`
	Vnet   string `url:"vnet" json:"vnet"` // associated vnet

	// The following parameters are optional
	Dnszoneprefix *string       `url:"dnszoneprefix,omitempty" json:"dnszoneprefix,omitempty"` // dns domain zone prefix ex: 'adm' -> <hostname>.adm.mydomain.com
	Gateway       *string       `url:"gateway,omitempty" json:"gateway,omitempty"`             // Subnet Gateway: Will be assign on vnet for layer3 zones
	Snat          *util.PVEBool `url:"snat,omitempty" json:"snat,omitempty"`                   // enable masquerade for this subnet if pve-firewall
}

type FindRequest struct {
	Subnet string `url:"subnet" json:"subnet"` // The SDN subnet object identifier.
	Vnet   string `url:"vnet" json:"vnet"`     // The SDN vnet object identifier.

	// The following parameters are optional
	Pending *util.PVEBool `url:"pending,omitempty" json:"pending,omitempty"` // Display pending config.
	Running *util.PVEBool `url:"running,omitempty" json:"running,omitempty"` // Display running config.
}

type UpdateRequest struct {
	Subnet string `url:"subnet" json:"subnet"` // The SDN subnet object identifier.

	// The following parameters are optional
	Delete        *string       `url:"delete,omitempty" json:"delete,omitempty"`               // A list of settings you want to delete.
	Digest        *string       `url:"digest,omitempty" json:"digest,omitempty"`               // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Dnszoneprefix *string       `url:"dnszoneprefix,omitempty" json:"dnszoneprefix,omitempty"` // dns domain zone prefix ex: 'adm' -> <hostname>.adm.mydomain.com
	Gateway       *string       `url:"gateway,omitempty" json:"gateway,omitempty"`             // Subnet Gateway: Will be assign on vnet for layer3 zones
	Snat          *util.PVEBool `url:"snat,omitempty" json:"snat,omitempty"`                   // enable masquerade for this subnet if pve-firewall
	Vnet          *string       `url:"vnet,omitempty" json:"vnet,omitempty"`                   // associated vnet
}

type DeleteRequest struct {
	Subnet string `url:"subnet" json:"subnet"` // The SDN subnet object identifier.
	Vnet   string `url:"vnet" json:"vnet"`     // The SDN vnet object identifier.

}

// Index SDN subnets index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets", "GET", &resp, req)
	return resp, err
}

// Create Create a new sdn subnet object.
func (c *Client) Create(ctx context.Context, req CreateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets", "POST", nil, req)
	return err
}

// Find Read sdn subnet configuration.
func (c *Client) Find(ctx context.Context, req FindRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets/{subnet}", "GET", &resp, req)
	return resp, err
}

// Update Update sdn subnet object configuration.
func (c *Client) Update(ctx context.Context, req UpdateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets/{subnet}", "PUT", nil, req)
	return err
}

// Delete Delete sdn subnet object configuration.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets/{subnet}", "DELETE", nil, req)
	return err
}
