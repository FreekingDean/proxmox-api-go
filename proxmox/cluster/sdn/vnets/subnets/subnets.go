// File generated by proxmox json schema, DO NOT EDIT

package subnets

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Pending *bool  `url:"pending,omitempty",json:"pending,omitempty"`
	Running *bool  `url:"running,omitempty",json:"running,omitempty"`
	Vnet    string `url:"vnet",json:"vnet"`
}

type IndexResponse []*map[string]interface{}

// Index SDN subnets index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Subnet        string  `url:"subnet",json:"subnet"`
	Type          string  `url:"type",json:"type"`
	Vnet          string  `url:"vnet",json:"vnet"`
	Dnszoneprefix *string `url:"dnszoneprefix,omitempty",json:"dnszoneprefix,omitempty"`
	Gateway       *string `url:"gateway,omitempty",json:"gateway,omitempty"`
	Snat          *bool   `url:"snat,omitempty",json:"snat,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create a new sdn subnet object.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Pending *bool  `url:"pending,omitempty",json:"pending,omitempty"`
	Running *bool  `url:"running,omitempty",json:"running,omitempty"`
	Subnet  string `url:"subnet",json:"subnet"`
	Vnet    string `url:"vnet",json:"vnet"`
}

type FindResponse map[string]interface{}

// Find Read sdn subnet configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets/{subnet}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Digest        *string `url:"digest,omitempty",json:"digest,omitempty"`
	Dnszoneprefix *string `url:"dnszoneprefix,omitempty",json:"dnszoneprefix,omitempty"`
	Gateway       *string `url:"gateway,omitempty",json:"gateway,omitempty"`
	Snat          *bool   `url:"snat,omitempty",json:"snat,omitempty"`
	Subnet        string  `url:"subnet",json:"subnet"`
	Vnet          *string `url:"vnet,omitempty",json:"vnet,omitempty"`
	Delete        *string `url:"delete,omitempty",json:"delete,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update sdn subnet object configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets/{subnet}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Subnet string `url:"subnet",json:"subnet"`
	Vnet   string `url:"vnet",json:"vnet"`
}

type DeleteResponse map[string]interface{}

// Delete Delete sdn subnet object configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/vnets/{vnet}/subnets/{subnet}", "DELETE", &resp, req)
	return resp, err
}
