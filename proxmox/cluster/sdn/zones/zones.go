// File generated by proxmox json schema, DO NOT EDIT

package zones

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Type    *string `url:"type,omitempty",json:"type,omitempty"`
	Pending *bool   `url:"pending,omitempty",json:"pending,omitempty"`
	Running *bool   `url:"running,omitempty",json:"running,omitempty"`
}

type IndexResponse []*struct {
	Dnszone    *string `url:"dnszone,omitempty",json:"dnszone,omitempty"`
	Ipam       *string `url:"ipam,omitempty",json:"ipam,omitempty"`
	Mtu        *int    `url:"mtu,omitempty",json:"mtu,omitempty"`
	Nodes      *string `url:"nodes,omitempty",json:"nodes,omitempty"`
	State      *string `url:"state,omitempty",json:"state,omitempty"`
	Type       string  `url:"type",json:"type"`
	Dns        *string `url:"dns,omitempty",json:"dns,omitempty"`
	Reversedns *string `url:"reversedns,omitempty",json:"reversedns,omitempty"`
	Zone       string  `url:"zone",json:"zone"`
}

// Index SDN zones index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/zones", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	BridgeDisableMacLearning *bool   `url:"bridge-disable-mac-learning,omitempty",json:"bridge-disable-mac-learning,omitempty"`
	Controller               *string `url:"controller,omitempty",json:"controller,omitempty"`
	DpId                     *int    `url:"dp-id,omitempty",json:"dp-id,omitempty"`
	Reversedns               *string `url:"reversedns,omitempty",json:"reversedns,omitempty"`
	RtImport                 *string `url:"rt-import,omitempty",json:"rt-import,omitempty"`
	VlanProtocol             *string `url:"vlan-protocol,omitempty",json:"vlan-protocol,omitempty"`
	Dnszone                  *string `url:"dnszone,omitempty",json:"dnszone,omitempty"`
	Exitnodes                *string `url:"exitnodes,omitempty",json:"exitnodes,omitempty"`
	Ipam                     *string `url:"ipam,omitempty",json:"ipam,omitempty"`
	Mtu                      *int    `url:"mtu,omitempty",json:"mtu,omitempty"`
	Tag                      *int    `url:"tag,omitempty",json:"tag,omitempty"`
	Type                     string  `url:"type",json:"type"`
	Zone                     string  `url:"zone",json:"zone"`
	AdvertiseSubnets         *bool   `url:"advertise-subnets,omitempty",json:"advertise-subnets,omitempty"`
	Bridge                   *string `url:"bridge,omitempty",json:"bridge,omitempty"`
	DisableArpNdSuppression  *bool   `url:"disable-arp-nd-suppression,omitempty",json:"disable-arp-nd-suppression,omitempty"`
	Dns                      *string `url:"dns,omitempty",json:"dns,omitempty"`
	ExitnodesLocalRouting    *bool   `url:"exitnodes-local-routing,omitempty",json:"exitnodes-local-routing,omitempty"`
	Mac                      *string `url:"mac,omitempty",json:"mac,omitempty"`
	Peers                    *string `url:"peers,omitempty",json:"peers,omitempty"`
	ExitnodesPrimary         *string `url:"exitnodes-primary,omitempty",json:"exitnodes-primary,omitempty"`
	Nodes                    *string `url:"nodes,omitempty",json:"nodes,omitempty"`
	VrfVxlan                 *int    `url:"vrf-vxlan,omitempty",json:"vrf-vxlan,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create a new sdn zone object.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/zones", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Pending *bool  `url:"pending,omitempty",json:"pending,omitempty"`
	Running *bool  `url:"running,omitempty",json:"running,omitempty"`
	Zone    string `url:"zone",json:"zone"`
}

type FindResponse map[string]interface{}

// Find Read sdn zone configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/zones/{zone}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Exitnodes                *string `url:"exitnodes,omitempty",json:"exitnodes,omitempty"`
	ExitnodesLocalRouting    *bool   `url:"exitnodes-local-routing,omitempty",json:"exitnodes-local-routing,omitempty"`
	Nodes                    *string `url:"nodes,omitempty",json:"nodes,omitempty"`
	Reversedns               *string `url:"reversedns,omitempty",json:"reversedns,omitempty"`
	Controller               *string `url:"controller,omitempty",json:"controller,omitempty"`
	DisableArpNdSuppression  *bool   `url:"disable-arp-nd-suppression,omitempty",json:"disable-arp-nd-suppression,omitempty"`
	Dns                      *string `url:"dns,omitempty",json:"dns,omitempty"`
	Dnszone                  *string `url:"dnszone,omitempty",json:"dnszone,omitempty"`
	Tag                      *int    `url:"tag,omitempty",json:"tag,omitempty"`
	AdvertiseSubnets         *bool   `url:"advertise-subnets,omitempty",json:"advertise-subnets,omitempty"`
	Delete                   *string `url:"delete,omitempty",json:"delete,omitempty"`
	Peers                    *string `url:"peers,omitempty",json:"peers,omitempty"`
	VlanProtocol             *string `url:"vlan-protocol,omitempty",json:"vlan-protocol,omitempty"`
	VrfVxlan                 *int    `url:"vrf-vxlan,omitempty",json:"vrf-vxlan,omitempty"`
	Digest                   *string `url:"digest,omitempty",json:"digest,omitempty"`
	DpId                     *int    `url:"dp-id,omitempty",json:"dp-id,omitempty"`
	Ipam                     *string `url:"ipam,omitempty",json:"ipam,omitempty"`
	RtImport                 *string `url:"rt-import,omitempty",json:"rt-import,omitempty"`
	Mtu                      *int    `url:"mtu,omitempty",json:"mtu,omitempty"`
	Zone                     string  `url:"zone",json:"zone"`
	Bridge                   *string `url:"bridge,omitempty",json:"bridge,omitempty"`
	BridgeDisableMacLearning *bool   `url:"bridge-disable-mac-learning,omitempty",json:"bridge-disable-mac-learning,omitempty"`
	ExitnodesPrimary         *string `url:"exitnodes-primary,omitempty",json:"exitnodes-primary,omitempty"`
	Mac                      *string `url:"mac,omitempty",json:"mac,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update sdn zone object configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/zones/{zone}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Zone string `url:"zone",json:"zone"`
}

type DeleteResponse map[string]interface{}

// Delete Delete sdn zone object configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/sdn/zones/{zone}", "DELETE", &resp, req)
	return resp, err
}
