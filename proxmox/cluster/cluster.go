// File generated by proxmox json schema, DO NOT EDIT

package cluster

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*map[string]interface{}

// Index Cluster index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster", "GET", &resp, nil)
	return resp, err
}

type LogRequest struct {
	Max *int `url:"max,omitempty",json:"max,omitempty"`
}

type LogResponse []*map[string]interface{}

// Log Read cluster log
func (c *Client) Log(ctx context.Context, req *LogRequest) (*LogResponse, error) {
	var resp *LogResponse

	err := c.httpClient.Do(ctx, "/cluster/log", "GET", &resp, req)
	return resp, err
}

type ResourcesRequest struct {
	Type *string `url:"type,omitempty",json:"type,omitempty"`
}

type ResourcesResponse []*struct {
	Disk       *int     `url:"disk,omitempty",json:"disk,omitempty"`
	Id         string   `url:"id",json:"id"`
	Name       *string  `url:"name,omitempty",json:"name,omitempty"`
	Plugintype *string  `url:"plugintype,omitempty",json:"plugintype,omitempty"`
	Cpu        *float64 `url:"cpu,omitempty",json:"cpu,omitempty"`
	Node       *string  `url:"node,omitempty",json:"node,omitempty"`
	Pool       *string  `url:"pool,omitempty",json:"pool,omitempty"`
	Status     *string  `url:"status,omitempty",json:"status,omitempty"`
	Vmid       *int     `url:"vmid,omitempty",json:"vmid,omitempty"`
	Content    *string  `url:"content,omitempty",json:"content,omitempty"`
	Level      *string  `url:"level,omitempty",json:"level,omitempty"`
	Mem        *int     `url:"mem,omitempty",json:"mem,omitempty"`
	Type       string   `url:"type",json:"type"`
	Storage    *string  `url:"storage,omitempty",json:"storage,omitempty"`
	Uptime     *int     `url:"uptime,omitempty",json:"uptime,omitempty"`
	CgroupMode *int     `url:"cgroup-mode,omitempty",json:"cgroup-mode,omitempty"`
	Hastate    *string  `url:"hastate,omitempty",json:"hastate,omitempty"`
	Maxcpu     *float64 `url:"maxcpu,omitempty",json:"maxcpu,omitempty"`
	Maxdisk    *int     `url:"maxdisk,omitempty",json:"maxdisk,omitempty"`
	Maxmem     *int     `url:"maxmem,omitempty",json:"maxmem,omitempty"`
}

// Resources Resources index (cluster wide).
func (c *Client) Resources(ctx context.Context, req *ResourcesRequest) (*ResourcesResponse, error) {
	var resp *ResourcesResponse

	err := c.httpClient.Do(ctx, "/cluster/resources", "GET", &resp, req)
	return resp, err
}

type TasksResponse []*struct {
	Upid string `url:"upid",json:"upid"`
}

// Tasks List recent tasks (cluster wide).
func (c *Client) Tasks(ctx context.Context) (*TasksResponse, error) {
	var resp *TasksResponse

	err := c.httpClient.Do(ctx, "/cluster/tasks", "GET", &resp, nil)
	return resp, err
}

type GetOptionsResponse map[string]interface{}

// GetOptions Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.
func (c *Client) GetOptions(ctx context.Context) (*GetOptionsResponse, error) {
	var resp *GetOptionsResponse

	err := c.httpClient.Do(ctx, "/cluster/options", "GET", &resp, nil)
	return resp, err
}

type SetOptionsRequest struct {
	Ha                *string `url:"ha,omitempty",json:"ha,omitempty"`
	HttpProxy         *string `url:"http_proxy,omitempty",json:"http_proxy,omitempty"`
	Language          *string `url:"language,omitempty",json:"language,omitempty"`
	RegisteredTags    *string `url:"registered-tags,omitempty",json:"registered-tags,omitempty"`
	Delete            *string `url:"delete,omitempty",json:"delete,omitempty"`
	Description       *string `url:"description,omitempty",json:"description,omitempty"`
	NextId            *string `url:"next-id,omitempty",json:"next-id,omitempty"`
	UserTagAccess     *string `url:"user-tag-access,omitempty",json:"user-tag-access,omitempty"`
	Bwlimit           *string `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	EmailFrom         *string `url:"email_from,omitempty",json:"email_from,omitempty"`
	Fencing           *string `url:"fencing,omitempty",json:"fencing,omitempty"`
	MaxWorkers        *int    `url:"max_workers,omitempty",json:"max_workers,omitempty"`
	MigrationUnsecure *bool   `url:"migration_unsecure,omitempty",json:"migration_unsecure,omitempty"`
	TagStyle          *string `url:"tag-style,omitempty",json:"tag-style,omitempty"`
	Console           *string `url:"console,omitempty",json:"console,omitempty"`
	Crs               *string `url:"crs,omitempty",json:"crs,omitempty"`
	Keyboard          *string `url:"keyboard,omitempty",json:"keyboard,omitempty"`
	MacPrefix         *string `url:"mac_prefix,omitempty",json:"mac_prefix,omitempty"`
	Migration         *string `url:"migration,omitempty",json:"migration,omitempty"`
	U2f               *string `url:"u2f,omitempty",json:"u2f,omitempty"`
	Webauthn          *string `url:"webauthn,omitempty",json:"webauthn,omitempty"`
}

type SetOptionsResponse map[string]interface{}

// SetOptions Set datacenter options.
func (c *Client) SetOptions(ctx context.Context, req *SetOptionsRequest) (*SetOptionsResponse, error) {
	var resp *SetOptionsResponse

	err := c.httpClient.Do(ctx, "/cluster/options", "PUT", &resp, req)
	return resp, err
}

type GetStatusResponse []*struct {
	Local   *bool   `url:"local,omitempty",json:"local,omitempty"`
	Nodeid  *int    `url:"nodeid,omitempty",json:"nodeid,omitempty"`
	Online  *bool   `url:"online,omitempty",json:"online,omitempty"`
	Type    string  `url:"type",json:"type"`
	Version *int    `url:"version,omitempty",json:"version,omitempty"`
	Ip      *string `url:"ip,omitempty",json:"ip,omitempty"`
	Level   *string `url:"level,omitempty",json:"level,omitempty"`
	Nodes   *int    `url:"nodes,omitempty",json:"nodes,omitempty"`
	Quorate *bool   `url:"quorate,omitempty",json:"quorate,omitempty"`
	Id      string  `url:"id",json:"id"`
	Name    string  `url:"name",json:"name"`
}

// GetStatus Get cluster status information.
func (c *Client) GetStatus(ctx context.Context) (*GetStatusResponse, error) {
	var resp *GetStatusResponse

	err := c.httpClient.Do(ctx, "/cluster/status", "GET", &resp, nil)
	return resp, err
}

type NextidRequest struct {
	Vmid *int `url:"vmid,omitempty",json:"vmid,omitempty"`
}

type NextidResponse int

// Nextid Get next free VMID. Pass a VMID to assert that its free (at time of check).
func (c *Client) Nextid(ctx context.Context, req *NextidRequest) (*NextidResponse, error) {
	var resp *NextidResponse

	err := c.httpClient.Do(ctx, "/cluster/nextid", "GET", &resp, req)
	return resp, err
}
