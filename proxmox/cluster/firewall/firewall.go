// File generated by proxmox json schema, DO NOT EDIT

package firewall

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*map[string]interface{}

// Index Directory index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/firewall", "GET", &resp, nil)
	return resp, err
}

type GetOptionsResponse map[string]interface{}

// GetOptions Get Firewall options.
func (c *Client) GetOptions(ctx context.Context) (*GetOptionsResponse, error) {
	var resp *GetOptionsResponse

	err := c.httpClient.Do(ctx, "/cluster/firewall/options", "GET", &resp, nil)
	return resp, err
}

type SetOptionsRequest map[string]interface{}

type SetOptionsResponse map[string]interface{}

// SetOptions Set Firewall options.
func (c *Client) SetOptions(ctx context.Context, req *SetOptionsRequest) (*SetOptionsResponse, error) {
	var resp *SetOptionsResponse

	err := c.httpClient.Do(ctx, "/cluster/firewall/options", "PUT", &resp, req)
	return resp, err
}

type GetMacrosResponse []*struct {
	Descr string `url:"descr",json:"descr"` // More verbose description (if available).
	Macro string `url:"macro",json:"macro"` // Macro name.

}

// GetMacros List available macros
func (c *Client) GetMacros(ctx context.Context) (*GetMacrosResponse, error) {
	var resp *GetMacrosResponse

	err := c.httpClient.Do(ctx, "/cluster/firewall/macros", "GET", &resp, nil)
	return resp, err
}

type RefsRequest map[string]interface{}

type RefsResponse []*struct {
	Name string `url:"name",json:"name"`
	Ref  string `url:"ref",json:"ref"`
	Type string `url:"type",json:"type"`

	// The following parameters are optional
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
}

// Refs Lists possible IPSet/Alias reference which are allowed in source/dest properties.
func (c *Client) Refs(ctx context.Context, req *RefsRequest) (*RefsResponse, error) {
	var resp *RefsResponse

	err := c.httpClient.Do(ctx, "/cluster/firewall/refs", "GET", &resp, req)
	return resp, err
}
