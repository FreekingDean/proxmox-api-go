// File generated by proxmox json schema, DO NOT EDIT

package resources

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Type *string `url:"type,omitempty",json:"type,omitempty"`
}

type IndexResponse []*struct {
	Sid string `url:"sid",json:"sid"`
}

// Index List HA resources.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	State       *string `url:"state,omitempty",json:"state,omitempty"`
	Type        *string `url:"type,omitempty",json:"type,omitempty"`
	Comment     *string `url:"comment,omitempty",json:"comment,omitempty"`
	Group       *string `url:"group,omitempty",json:"group,omitempty"`
	MaxRelocate *int    `url:"max_relocate,omitempty",json:"max_relocate,omitempty"`
	MaxRestart  *int    `url:"max_restart,omitempty",json:"max_restart,omitempty"`
	Sid         string  `url:"sid",json:"sid"`
}

type CreateResponse map[string]interface{}

// Create Create a new HA resource.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Sid string `url:"sid",json:"sid"`
}

type FindResponse struct {
	Group       *string `url:"group,omitempty",json:"group,omitempty"`
	MaxRelocate *int    `url:"max_relocate,omitempty",json:"max_relocate,omitempty"`
	MaxRestart  *int    `url:"max_restart,omitempty",json:"max_restart,omitempty"`
	Sid         string  `url:"sid",json:"sid"`
	State       *string `url:"state,omitempty",json:"state,omitempty"`
	Type        string  `url:"type",json:"type"`
	Comment     *string `url:"comment,omitempty",json:"comment,omitempty"`
	Digest      string  `url:"digest",json:"digest"`
}

// Find Read resource configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources/{sid}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Sid         string  `url:"sid",json:"sid"`
	State       *string `url:"state,omitempty",json:"state,omitempty"`
	Comment     *string `url:"comment,omitempty",json:"comment,omitempty"`
	Delete      *string `url:"delete,omitempty",json:"delete,omitempty"`
	Digest      *string `url:"digest,omitempty",json:"digest,omitempty"`
	Group       *string `url:"group,omitempty",json:"group,omitempty"`
	MaxRelocate *int    `url:"max_relocate,omitempty",json:"max_relocate,omitempty"`
	MaxRestart  *int    `url:"max_restart,omitempty",json:"max_restart,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update resource configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources/{sid}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Sid string `url:"sid",json:"sid"`
}

type DeleteResponse map[string]interface{}

// Delete Delete resource configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources/{sid}", "DELETE", &resp, req)
	return resp, err
}

type MigrateRequest struct {
	Node string `url:"node",json:"node"`
	Sid  string `url:"sid",json:"sid"`
}

type MigrateResponse map[string]interface{}

// Migrate Request resource migration (online) to another node.
func (c *Client) Migrate(ctx context.Context, req *MigrateRequest) (*MigrateResponse, error) {
	var resp *MigrateResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources/{sid}/migrate", "POST", &resp, req)
	return resp, err
}

type RelocateRequest struct {
	Node string `url:"node",json:"node"`
	Sid  string `url:"sid",json:"sid"`
}

type RelocateResponse map[string]interface{}

// Relocate Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.
func (c *Client) Relocate(ctx context.Context, req *RelocateRequest) (*RelocateResponse, error) {
	var resp *RelocateResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/resources/{sid}/relocate", "POST", &resp, req)
	return resp, err
}
