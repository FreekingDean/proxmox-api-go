// File generated by proxmox json schema, DO NOT EDIT

package groups

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

const (
	Type_GROUP Type = "group"
)

type Type string

func PtrType(i Type) *Type {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse struct {
	Group string `url:"group" json:"group"`
}

type CreateRequest struct {
	Group string `url:"group" json:"group"` // The HA group identifier.
	Nodes string `url:"nodes" json:"nodes"` // List of cluster node names with optional priority.

	// The following parameters are optional
	Comment    *string       `url:"comment,omitempty" json:"comment,omitempty"`       // Description.
	Nofailback *util.PVEBool `url:"nofailback,omitempty" json:"nofailback,omitempty"` // The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.
	Restricted *util.PVEBool `url:"restricted,omitempty" json:"restricted,omitempty"` // Resources bound to restricted groups may only run on nodes defined by the group.
	Type       *Type         `url:"type,omitempty" json:"type,omitempty"`             // Group type.
}

type FindRequest struct {
	Group string `url:"group" json:"group"` // The HA group identifier.

}

type UpdateRequest struct {
	Group string `url:"group" json:"group"` // The HA group identifier.

	// The following parameters are optional
	Comment    *string       `url:"comment,omitempty" json:"comment,omitempty"`       // Description.
	Delete     *string       `url:"delete,omitempty" json:"delete,omitempty"`         // A list of settings you want to delete.
	Digest     *string       `url:"digest,omitempty" json:"digest,omitempty"`         // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Nodes      *string       `url:"nodes,omitempty" json:"nodes,omitempty"`           // List of cluster node names with optional priority.
	Nofailback *util.PVEBool `url:"nofailback,omitempty" json:"nofailback,omitempty"` // The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.
	Restricted *util.PVEBool `url:"restricted,omitempty" json:"restricted,omitempty"` // Resources bound to restricted groups may only run on nodes defined by the group.
}

type DeleteRequest struct {
	Group string `url:"group" json:"group"` // The HA group identifier.

}

// Index Get HA groups.
func (c *Client) Index(ctx context.Context) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/ha/groups", "GET", &resp, nil)
	return resp, err
}

// Create Create a new HA group.
func (c *Client) Create(ctx context.Context, req CreateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/ha/groups", "POST", nil, req)
	return err
}

// Find Read ha group configuration.
func (c *Client) Find(ctx context.Context, req FindRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/ha/groups/{group}", "GET", nil, req)
	return err
}

// Update Update ha group configuration.
func (c *Client) Update(ctx context.Context, req UpdateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/ha/groups/{group}", "PUT", nil, req)
	return err
}

// Delete Delete ha group configuration.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/ha/groups/{group}", "DELETE", nil, req)
	return err
}
