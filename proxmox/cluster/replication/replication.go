// File generated by proxmox json schema, DO NOT EDIT

package replication

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*map[string]interface{}

// Index List replication jobs.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/replication", "GET", &resp, nil)
	return resp, err
}

type CreateRequest struct {
	Id     string `url:"id",json:"id"`         // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
	Target string `url:"target",json:"target"` // Target node.
	Type   string `url:"type",json:"type"`     // Section type.

	// The following parameters are optional
	Comment   *string  `url:"comment,omitempty",json:"comment,omitempty"`       // Description.
	Disable   *bool    `url:"disable,omitempty",json:"disable,omitempty"`       // Flag to disable/deactivate the entry.
	Rate      *float64 `url:"rate,omitempty",json:"rate,omitempty"`             // Rate limit in mbps (megabytes per second) as floating point number.
	RemoveJob *string  `url:"remove_job,omitempty",json:"remove_job,omitempty"` // Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file.
	Schedule  *string  `url:"schedule,omitempty",json:"schedule,omitempty"`     // Storage replication schedule. The format is a subset of `systemd` calendar events.
	Source    *string  `url:"source,omitempty",json:"source,omitempty"`         // For internal use, to detect if the guest was stolen.
}

type CreateResponse map[string]interface{}

// Create Create a new replication job
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/replication", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Id string `url:"id",json:"id"` // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.

}

type FindResponse map[string]interface{}

// Find Read replication job configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/replication/{id}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Id string `url:"id",json:"id"` // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.

	// The following parameters are optional
	Comment   *string  `url:"comment,omitempty",json:"comment,omitempty"`       // Description.
	Delete    *string  `url:"delete,omitempty",json:"delete,omitempty"`         // A list of settings you want to delete.
	Digest    *string  `url:"digest,omitempty",json:"digest,omitempty"`         // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Disable   *bool    `url:"disable,omitempty",json:"disable,omitempty"`       // Flag to disable/deactivate the entry.
	Rate      *float64 `url:"rate,omitempty",json:"rate,omitempty"`             // Rate limit in mbps (megabytes per second) as floating point number.
	RemoveJob *string  `url:"remove_job,omitempty",json:"remove_job,omitempty"` // Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file.
	Schedule  *string  `url:"schedule,omitempty",json:"schedule,omitempty"`     // Storage replication schedule. The format is a subset of `systemd` calendar events.
	Source    *string  `url:"source,omitempty",json:"source,omitempty"`         // For internal use, to detect if the guest was stolen.
}

type UpdateResponse map[string]interface{}

// Update Update replication job configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/replication/{id}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Id string `url:"id",json:"id"` // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.

	// The following parameters are optional
	Force *bool `url:"force,omitempty",json:"force,omitempty"` // Will remove the jobconfig entry, but will not cleanup.
	Keep  *bool `url:"keep,omitempty",json:"keep,omitempty"`   // Keep replicated data at target (do not remove).
}

type DeleteResponse map[string]interface{}

// Delete Mark replication job for removal.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/replication/{id}", "DELETE", &resp, req)
	return resp, err
}
