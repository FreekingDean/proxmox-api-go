// File generated by proxmox json schema, DO NOT EDIT

package replication

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*map[string]interface{}

// Index List replication jobs.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/replication", "GET", &resp, nil)
	return resp, err
}

type CreateRequest struct {
	RemoveJob *string  `url:"remove_job,omitempty",json:"remove_job,omitempty"`
	Schedule  *string  `url:"schedule,omitempty",json:"schedule,omitempty"`
	Target    string   `url:"target",json:"target"`
	Type      string   `url:"type",json:"type"`
	Comment   *string  `url:"comment,omitempty",json:"comment,omitempty"`
	Disable   *bool    `url:"disable,omitempty",json:"disable,omitempty"`
	Id        string   `url:"id",json:"id"`
	Rate      *float64 `url:"rate,omitempty",json:"rate,omitempty"`
	Source    *string  `url:"source,omitempty",json:"source,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create a new replication job
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/cluster/replication", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Id string `url:"id",json:"id"`
}

type FindResponse map[string]interface{}

// Find Read replication job configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/replication/{id}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Comment   *string  `url:"comment,omitempty",json:"comment,omitempty"`
	Delete    *string  `url:"delete,omitempty",json:"delete,omitempty"`
	Digest    *string  `url:"digest,omitempty",json:"digest,omitempty"`
	Rate      *float64 `url:"rate,omitempty",json:"rate,omitempty"`
	Disable   *bool    `url:"disable,omitempty",json:"disable,omitempty"`
	Id        string   `url:"id",json:"id"`
	RemoveJob *string  `url:"remove_job,omitempty",json:"remove_job,omitempty"`
	Schedule  *string  `url:"schedule,omitempty",json:"schedule,omitempty"`
	Source    *string  `url:"source,omitempty",json:"source,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update replication job configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/replication/{id}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Keep  *bool  `url:"keep,omitempty",json:"keep,omitempty"`
	Force *bool  `url:"force,omitempty",json:"force,omitempty"`
	Id    string `url:"id",json:"id"`
}

type DeleteResponse map[string]interface{}

// Delete Mark replication job for removal.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/cluster/replication/{id}", "DELETE", &resp, req)
	return resp, err
}
