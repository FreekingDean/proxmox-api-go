// File generated by proxmox json schema, DO NOT EDIT

package flags

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse struct {
	Name string `url:"name" json:"name"` // Flag name.

}

type MassUpdateRequest struct {

	// The following parameters are optional
	Nobackfill  *util.PVEBool `url:"nobackfill,omitempty" json:"nobackfill,omitempty"`     // Backfilling of PGs is suspended.
	NodeepScrub *util.PVEBool `url:"nodeep-scrub,omitempty" json:"nodeep-scrub,omitempty"` // Deep Scrubbing is disabled.
	Nodown      *util.PVEBool `url:"nodown,omitempty" json:"nodown,omitempty"`             // OSD failure reports are being ignored, such that the monitors will not mark OSDs down.
	Noin        *util.PVEBool `url:"noin,omitempty" json:"noin,omitempty"`                 // OSDs that were previously marked out will not be marked back in when they start.
	Noout       *util.PVEBool `url:"noout,omitempty" json:"noout,omitempty"`               // OSDs will not automatically be marked out after the configured interval.
	Norebalance *util.PVEBool `url:"norebalance,omitempty" json:"norebalance,omitempty"`   // Rebalancing of PGs is suspended.
	Norecover   *util.PVEBool `url:"norecover,omitempty" json:"norecover,omitempty"`       // Recovery of PGs is suspended.
	Noscrub     *util.PVEBool `url:"noscrub,omitempty" json:"noscrub,omitempty"`           // Scrubbing is disabled.
	Notieragent *util.PVEBool `url:"notieragent,omitempty" json:"notieragent,omitempty"`   // Cache tiering activity is suspended.
	Noup        *util.PVEBool `url:"noup,omitempty" json:"noup,omitempty"`                 // OSDs are not allowed to start.
	Pause       *util.PVEBool `url:"pause,omitempty" json:"pause,omitempty"`               // Pauses read and writes.
}

type FindRequest struct {
	Flag string `url:"flag" json:"flag"` // The name of the flag name to get.

}

type UpdateRequest struct {
	Flag  string       `url:"flag" json:"flag"`   // The ceph flag to update
	Value util.PVEBool `url:"value" json:"value"` // The new value of the flag

}

// Index get the status of all ceph flags
func (c *Client) Index(ctx context.Context) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags", "GET", &resp, nil)
	return resp, err
}

// MassUpdate Set/Unset multiple ceph flags at once.
func (c *Client) MassUpdate(ctx context.Context, req MassUpdateRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags", "PUT", &resp, req)
	return resp, err
}

// Find Get the status of a specific ceph flag.
func (c *Client) Find(ctx context.Context, req FindRequest) (util.PVEBool, error) {
	var resp util.PVEBool

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags/{flag}", "GET", &resp, req)
	return resp, err
}

// Update Set or clear (unset) a specific ceph flag
func (c *Client) Update(ctx context.Context, req UpdateRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags/{flag}", "PUT", nil, req)
	return err
}
