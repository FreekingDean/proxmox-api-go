// File generated by proxmox json schema, DO NOT EDIT

package flags

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Name string `url:"name",json:"name"` // Flag name.

}

// Index get the status of all ceph flags
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags", "GET", &resp, nil)
	return resp, err
}

type MassUpdateRequest struct {

	// The following parameters are optional
	Nobackfill  *bool `url:"nobackfill,omitempty",json:"nobackfill,omitempty"`     // Backfilling of PGs is suspended.
	NodeepScrub *bool `url:"nodeep-scrub,omitempty",json:"nodeep-scrub,omitempty"` // Deep Scrubbing is disabled.
	Nodown      *bool `url:"nodown,omitempty",json:"nodown,omitempty"`             // OSD failure reports are being ignored, such that the monitors will not mark OSDs down.
	Noin        *bool `url:"noin,omitempty",json:"noin,omitempty"`                 // OSDs that were previously marked out will not be marked back in when they start.
	Noout       *bool `url:"noout,omitempty",json:"noout,omitempty"`               // OSDs will not automatically be marked out after the configured interval.
	Norebalance *bool `url:"norebalance,omitempty",json:"norebalance,omitempty"`   // Rebalancing of PGs is suspended.
	Norecover   *bool `url:"norecover,omitempty",json:"norecover,omitempty"`       // Recovery of PGs is suspended.
	Noscrub     *bool `url:"noscrub,omitempty",json:"noscrub,omitempty"`           // Scrubbing is disabled.
	Notieragent *bool `url:"notieragent,omitempty",json:"notieragent,omitempty"`   // Cache tiering activity is suspended.
	Noup        *bool `url:"noup,omitempty",json:"noup,omitempty"`                 // OSDs are not allowed to start.
	Pause       *bool `url:"pause,omitempty",json:"pause,omitempty"`               // Pauses read and writes.
}

type MassUpdateResponse string

// MassUpdate Set/Unset multiple ceph flags at once.
func (c *Client) MassUpdate(ctx context.Context, req *MassUpdateRequest) (*MassUpdateResponse, error) {
	var resp *MassUpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags", "PUT", &resp, req)
	return resp, err
}

type FindRequest struct {
	Flag string `url:"flag",json:"flag"` // The name of the flag name to get.

}

type FindResponse bool

// Find Get the status of a specific ceph flag.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags/{flag}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Flag  string `url:"flag",json:"flag"`   // The ceph flag to update
	Value bool   `url:"value",json:"value"` // The new value of the flag

}

type UpdateResponse map[string]interface{}

// Update Set or clear (unset) a specific ceph flag
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/cluster/ceph/flags/{flag}", "PUT", &resp, req)
	return resp, err
}
