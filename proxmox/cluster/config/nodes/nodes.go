// File generated by proxmox json schema, DO NOT EDIT

package nodes

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
	"net/url"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse struct {
	Node string `url:"node" json:"node"`
}

// Array of Linkn
type LinknArr []Linkn

func (t LinknArr) EncodeValues(key string, v *url.Values) error {
	return util.EncodeArray(key, v, t)
}

// Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)
type Linkn struct {
	Address string `url:"address" json:"address"` // Hostname (or IP) of this corosync link address.

	// The following parameters are optional
	Priority *int `url:"priority,omitempty" json:"priority,omitempty"` // The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.
}

func (t Linkn) EncodeValues(key string, v *url.Values) error {
	return util.EncodeString(key, v, t, `[address=]<IP> [,priority=<integer>]`)
}

type ChildCreateRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Apiversion *int              `url:"apiversion,omitempty" json:"apiversion,omitempty"`   // The JOIN_API_VERSION of the new node.
	Force      *util.SpecialBool `url:"force,omitempty" json:"force,omitempty"`             // Do not throw error if node already exists.
	Links      *LinknArr         `url:"link[n],omitempty" json:"link[n],omitempty"`         // Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)
	NewNodeIp  *string           `url:"new_node_ip,omitempty" json:"new_node_ip,omitempty"` // IP Address of node to add. Used as fallback if no links are given.
	Nodeid     *int              `url:"nodeid,omitempty" json:"nodeid,omitempty"`           // Node id for this node.
	Votes      *int              `url:"votes,omitempty" json:"votes,omitempty"`             // Number of votes for this node
}

type ChildCreateResponse struct {
	CorosyncAuthkey string   `url:"corosync_authkey" json:"corosync_authkey"`
	CorosyncConf    string   `url:"corosync_conf" json:"corosync_conf"`
	Warnings        []string `url:"warnings" json:"warnings"`
}

type DeleteRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

// Index Corosync node list.
func (c *Client) Index(ctx context.Context) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/cluster/config/nodes", "GET", &resp, nil)
	return resp, err
}

// ChildCreate Adds a node to the cluster configuration. This call is for internal use.
func (c *Client) ChildCreate(ctx context.Context, req ChildCreateRequest) (ChildCreateResponse, error) {
	var resp ChildCreateResponse

	err := c.httpClient.Do(ctx, "/cluster/config/nodes/{node}", "POST", &resp, req)
	return resp, err
}

// Delete Removes a node from the cluster configuration.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) error {

	err := c.httpClient.Do(ctx, "/cluster/config/nodes/{node}", "DELETE", nil, req)
	return err
}
