// File generated by proxmox json schema, DO NOT EDIT

package storage

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Type *string `url:"type,omitempty",json:"type,omitempty"`
}

type IndexResponse []*struct {
	Storage string `url:"storage",json:"storage"`
}

// Index Storage index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/storage", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Base                 *string `url:"base,omitempty",json:"base,omitempty"`
	EncryptionKey        *string `url:"encryption-key,omitempty",json:"encryption-key,omitempty"`
	Content              *string `url:"content,omitempty",json:"content,omitempty"`
	Saferemove           *bool   `url:"saferemove,omitempty",json:"saferemove,omitempty"`
	ComstarHg            *string `url:"comstar_hg,omitempty",json:"comstar_hg,omitempty"`
	Disable              *bool   `url:"disable,omitempty",json:"disable,omitempty"`
	Format               *string `url:"format,omitempty",json:"format,omitempty"`
	Preallocation        *string `url:"preallocation,omitempty",json:"preallocation,omitempty"`
	DataPool             *string `url:"data-pool,omitempty",json:"data-pool,omitempty"`
	MasterPubkey         *string `url:"master-pubkey,omitempty",json:"master-pubkey,omitempty"`
	Password             *string `url:"password,omitempty",json:"password,omitempty"`
	Pool                 *string `url:"pool,omitempty",json:"pool,omitempty"`
	Share                *string `url:"share,omitempty",json:"share,omitempty"`
	Volume               *string `url:"volume,omitempty",json:"volume,omitempty"`
	Fingerprint          *string `url:"fingerprint,omitempty",json:"fingerprint,omitempty"`
	LioTpg               *string `url:"lio_tpg,omitempty",json:"lio_tpg,omitempty"`
	Path                 *string `url:"path,omitempty",json:"path,omitempty"`
	Storage              string  `url:"storage",json:"storage"`
	Username             *string `url:"username,omitempty",json:"username,omitempty"`
	Keyring              *string `url:"keyring,omitempty",json:"keyring,omitempty"`
	Shared               *bool   `url:"shared,omitempty",json:"shared,omitempty"`
	Krbd                 *bool   `url:"krbd,omitempty",json:"krbd,omitempty"`
	Nocow                *bool   `url:"nocow,omitempty",json:"nocow,omitempty"`
	Port                 *int    `url:"port,omitempty",json:"port,omitempty"`
	FsName               *string `url:"fs-name,omitempty",json:"fs-name,omitempty"`
	IsMountpoint         *string `url:"is_mountpoint,omitempty",json:"is_mountpoint,omitempty"`
	SaferemoveThroughput *string `url:"saferemove_throughput,omitempty",json:"saferemove_throughput,omitempty"`
	Sparse               *bool   `url:"sparse,omitempty",json:"sparse,omitempty"`
	Target               *string `url:"target,omitempty",json:"target,omitempty"`
	Bwlimit              *string `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Export               *string `url:"export,omitempty",json:"export,omitempty"`
	Maxfiles             *int    `url:"maxfiles,omitempty",json:"maxfiles,omitempty"`
	Monhost              *string `url:"monhost,omitempty",json:"monhost,omitempty"`
	Mountpoint           *string `url:"mountpoint,omitempty",json:"mountpoint,omitempty"`
	Nowritecache         *bool   `url:"nowritecache,omitempty",json:"nowritecache,omitempty"`
	PruneBackups         *string `url:"prune-backups,omitempty",json:"prune-backups,omitempty"`
	Transport            *string `url:"transport,omitempty",json:"transport,omitempty"`
	ComstarTg            *string `url:"comstar_tg,omitempty",json:"comstar_tg,omitempty"`
	Smbversion           *string `url:"smbversion,omitempty",json:"smbversion,omitempty"`
	Subdir               *string `url:"subdir,omitempty",json:"subdir,omitempty"`
	TaggedOnly           *bool   `url:"tagged_only,omitempty",json:"tagged_only,omitempty"`
	Domain               *string `url:"domain,omitempty",json:"domain,omitempty"`
	Type                 string  `url:"type",json:"type"`
	Vgname               *string `url:"vgname,omitempty",json:"vgname,omitempty"`
	Server2              *string `url:"server2,omitempty",json:"server2,omitempty"`
	Iscsiprovider        *string `url:"iscsiprovider,omitempty",json:"iscsiprovider,omitempty"`
	MaxProtectedBackups  *int    `url:"max-protected-backups,omitempty",json:"max-protected-backups,omitempty"`
	Authsupported        *string `url:"authsupported,omitempty",json:"authsupported,omitempty"`
	Mkdir                *bool   `url:"mkdir,omitempty",json:"mkdir,omitempty"`
	Namespace            *string `url:"namespace,omitempty",json:"namespace,omitempty"`
	Datastore            *string `url:"datastore,omitempty",json:"datastore,omitempty"`
	Options              *string `url:"options,omitempty",json:"options,omitempty"`
	Portal               *string `url:"portal,omitempty",json:"portal,omitempty"`
	Server               *string `url:"server,omitempty",json:"server,omitempty"`
	Thinpool             *string `url:"thinpool,omitempty",json:"thinpool,omitempty"`
	Nodes                *string `url:"nodes,omitempty",json:"nodes,omitempty"`
	Fuse                 *bool   `url:"fuse,omitempty",json:"fuse,omitempty"`
	Blocksize            *string `url:"blocksize,omitempty",json:"blocksize,omitempty"`
}

type CreateResponse struct {
	Config struct {
		EncryptionKey *string `url:"encryption-key,omitempty",json:"encryption-key,omitempty"`
	} `url:"config,omitempty",json:"config,omitempty"`
	Storage string `url:"storage",json:"storage"`
	Type    string `url:"type",json:"type"`
}

// Create Create a new storage.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/storage", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Storage string `url:"storage",json:"storage"`
}

type FindResponse map[string]interface{}

// Find Read storage configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/storage/{storage}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Port                 *int    `url:"port,omitempty",json:"port,omitempty"`
	ComstarHg            *string `url:"comstar_hg,omitempty",json:"comstar_hg,omitempty"`
	Content              *string `url:"content,omitempty",json:"content,omitempty"`
	Fuse                 *bool   `url:"fuse,omitempty",json:"fuse,omitempty"`
	Krbd                 *bool   `url:"krbd,omitempty",json:"krbd,omitempty"`
	Mountpoint           *string `url:"mountpoint,omitempty",json:"mountpoint,omitempty"`
	Pool                 *string `url:"pool,omitempty",json:"pool,omitempty"`
	EncryptionKey        *string `url:"encryption-key,omitempty",json:"encryption-key,omitempty"`
	FsName               *string `url:"fs-name,omitempty",json:"fs-name,omitempty"`
	IsMountpoint         *string `url:"is_mountpoint,omitempty",json:"is_mountpoint,omitempty"`
	Shared               *bool   `url:"shared,omitempty",json:"shared,omitempty"`
	ComstarTg            *string `url:"comstar_tg,omitempty",json:"comstar_tg,omitempty"`
	Fingerprint          *string `url:"fingerprint,omitempty",json:"fingerprint,omitempty"`
	Mkdir                *bool   `url:"mkdir,omitempty",json:"mkdir,omitempty"`
	Nocow                *bool   `url:"nocow,omitempty",json:"nocow,omitempty"`
	Nodes                *string `url:"nodes,omitempty",json:"nodes,omitempty"`
	Sparse               *bool   `url:"sparse,omitempty",json:"sparse,omitempty"`
	Digest               *string `url:"digest,omitempty",json:"digest,omitempty"`
	Format               *string `url:"format,omitempty",json:"format,omitempty"`
	Keyring              *string `url:"keyring,omitempty",json:"keyring,omitempty"`
	Options              *string `url:"options,omitempty",json:"options,omitempty"`
	Preallocation        *string `url:"preallocation,omitempty",json:"preallocation,omitempty"`
	Smbversion           *string `url:"smbversion,omitempty",json:"smbversion,omitempty"`
	Username             *string `url:"username,omitempty",json:"username,omitempty"`
	Delete               *string `url:"delete,omitempty",json:"delete,omitempty"`
	MasterPubkey         *string `url:"master-pubkey,omitempty",json:"master-pubkey,omitempty"`
	MaxProtectedBackups  *int    `url:"max-protected-backups,omitempty",json:"max-protected-backups,omitempty"`
	Monhost              *string `url:"monhost,omitempty",json:"monhost,omitempty"`
	Password             *string `url:"password,omitempty",json:"password,omitempty"`
	Server               *string `url:"server,omitempty",json:"server,omitempty"`
	TaggedOnly           *bool   `url:"tagged_only,omitempty",json:"tagged_only,omitempty"`
	DataPool             *string `url:"data-pool,omitempty",json:"data-pool,omitempty"`
	Maxfiles             *int    `url:"maxfiles,omitempty",json:"maxfiles,omitempty"`
	Namespace            *string `url:"namespace,omitempty",json:"namespace,omitempty"`
	Nowritecache         *bool   `url:"nowritecache,omitempty",json:"nowritecache,omitempty"`
	PruneBackups         *string `url:"prune-backups,omitempty",json:"prune-backups,omitempty"`
	Server2              *string `url:"server2,omitempty",json:"server2,omitempty"`
	Disable              *bool   `url:"disable,omitempty",json:"disable,omitempty"`
	Domain               *string `url:"domain,omitempty",json:"domain,omitempty"`
	Storage              string  `url:"storage",json:"storage"`
	Subdir               *string `url:"subdir,omitempty",json:"subdir,omitempty"`
	Transport            *string `url:"transport,omitempty",json:"transport,omitempty"`
	Blocksize            *string `url:"blocksize,omitempty",json:"blocksize,omitempty"`
	Bwlimit              *string `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	LioTpg               *string `url:"lio_tpg,omitempty",json:"lio_tpg,omitempty"`
	Saferemove           *bool   `url:"saferemove,omitempty",json:"saferemove,omitempty"`
	SaferemoveThroughput *string `url:"saferemove_throughput,omitempty",json:"saferemove_throughput,omitempty"`
}

type UpdateResponse struct {
	Config struct {
		EncryptionKey *string `url:"encryption-key,omitempty",json:"encryption-key,omitempty"`
	} `url:"config,omitempty",json:"config,omitempty"`
	Storage string `url:"storage",json:"storage"`
	Type    string `url:"type",json:"type"`
}

// Update Update storage configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/storage/{storage}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Storage string `url:"storage",json:"storage"`
}

type DeleteResponse map[string]interface{}

// Delete Delete storage configuration.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/storage/{storage}", "DELETE", &resp, req)
	return resp, err
}
