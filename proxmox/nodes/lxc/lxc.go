// File generated by proxmox json schema, DO NOT EDIT

package lxc

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*struct {
	Status  string   `url:"status",json:"status"`
	Tags    *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Cpus    *float64 `url:"cpus,omitempty",json:"cpus,omitempty"`
	Maxdisk *int     `url:"maxdisk,omitempty",json:"maxdisk,omitempty"`
	Maxmem  *int     `url:"maxmem,omitempty",json:"maxmem,omitempty"`
	Maxswap *int     `url:"maxswap,omitempty",json:"maxswap,omitempty"`
	Lock    *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Name    *string  `url:"name,omitempty",json:"name,omitempty"`
	Uptime  *int     `url:"uptime,omitempty",json:"uptime,omitempty"`
	Vmid    int      `url:"vmid",json:"vmid"`
}

// Index LXC container index (per node).
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Console            *bool    `url:"console,omitempty",json:"console,omitempty"`
	Cores              *int     `url:"cores,omitempty",json:"cores,omitempty"`
	Lock               *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Netn               *string  `url:"net[n],omitempty",json:"net[n],omitempty"`
	SshPublicKeys      *string  `url:"ssh-public-keys,omitempty",json:"ssh-public-keys,omitempty"`
	Storage            *string  `url:"storage,omitempty",json:"storage,omitempty"`
	Swap               *int     `url:"swap,omitempty",json:"swap,omitempty"`
	Arch               *string  `url:"arch,omitempty",json:"arch,omitempty"`
	Ostype             *string  `url:"ostype,omitempty",json:"ostype,omitempty"`
	Vmid               int      `url:"vmid",json:"vmid"`
	Memory             *int     `url:"memory,omitempty",json:"memory,omitempty"`
	Cpuunits           *int     `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Features           *string  `url:"features,omitempty",json:"features,omitempty"`
	Nameserver         *string  `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Protection         *bool    `url:"protection,omitempty",json:"protection,omitempty"`
	Rootfs             *string  `url:"rootfs,omitempty",json:"rootfs,omitempty"`
	Bwlimit            *float64 `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Hostname           *string  `url:"hostname,omitempty",json:"hostname,omitempty"`
	Onboot             *bool    `url:"onboot,omitempty",json:"onboot,omitempty"`
	Pool               *string  `url:"pool,omitempty",json:"pool,omitempty"`
	Unusedn            *string  `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Debug              *bool    `url:"debug,omitempty",json:"debug,omitempty"`
	Hookscript         *string  `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Node               string   `url:"node",json:"node"`
	Searchdomain       *string  `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
	Cpulimit           *float64 `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Force              *bool    `url:"force,omitempty",json:"force,omitempty"`
	Restore            *bool    `url:"restore,omitempty",json:"restore,omitempty"`
	Tags               *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Timezone           *string  `url:"timezone,omitempty",json:"timezone,omitempty"`
	Unique             *bool    `url:"unique,omitempty",json:"unique,omitempty"`
	Cmode              *string  `url:"cmode,omitempty",json:"cmode,omitempty"`
	Ostemplate         string   `url:"ostemplate",json:"ostemplate"`
	Password           *string  `url:"password,omitempty",json:"password,omitempty"`
	Start              *bool    `url:"start,omitempty",json:"start,omitempty"`
	Startup            *string  `url:"startup,omitempty",json:"startup,omitempty"`
	Template           *bool    `url:"template,omitempty",json:"template,omitempty"`
	Tty                *int     `url:"tty,omitempty",json:"tty,omitempty"`
	Mpn                *string  `url:"mp[n],omitempty",json:"mp[n],omitempty"`
	IgnoreUnpackErrors *bool    `url:"ignore-unpack-errors,omitempty",json:"ignore-unpack-errors,omitempty"`
	Unprivileged       *bool    `url:"unprivileged,omitempty",json:"unprivileged,omitempty"`
	Description        *string  `url:"description,omitempty",json:"description,omitempty"`
}

type CreateResponse string

// Create Create or restore a container.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FindResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Find Directory index
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}", "GET", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	DestroyUnreferencedDisks *bool  `url:"destroy-unreferenced-disks,omitempty",json:"destroy-unreferenced-disks,omitempty"`
	Force                    *bool  `url:"force,omitempty",json:"force,omitempty"`
	Node                     string `url:"node",json:"node"`
	Purge                    *bool  `url:"purge,omitempty",json:"purge,omitempty"`
	Vmid                     int    `url:"vmid",json:"vmid"`
}

type DeleteResponse string

// Delete Destroy the container (also delete all uses files).
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}", "DELETE", &resp, req)
	return resp, err
}

type VmConfigRequest struct {
	Node     string  `url:"node",json:"node"`
	Snapshot *string `url:"snapshot,omitempty",json:"snapshot,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
	Current  *bool   `url:"current,omitempty",json:"current,omitempty"`
}

type VmConfigResponse struct {
	Console      *bool      `url:"console,omitempty",json:"console,omitempty"`
	Debug        *bool      `url:"debug,omitempty",json:"debug,omitempty"`
	Lxc          [][]string `url:"lxc,omitempty",json:"lxc,omitempty"`
	Searchdomain *string    `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
	Startup      *string    `url:"startup,omitempty",json:"startup,omitempty"`
	Tags         *string    `url:"tags,omitempty",json:"tags,omitempty"`
	Template     *bool      `url:"template,omitempty",json:"template,omitempty"`
	Unprivileged *bool      `url:"unprivileged,omitempty",json:"unprivileged,omitempty"`
	Cpuunits     *int       `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Description  *string    `url:"description,omitempty",json:"description,omitempty"`
	Hookscript   *string    `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Mpn          *string    `url:"mp[n],omitempty",json:"mp[n],omitempty"`
	Nameserver   *string    `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Tty          *int       `url:"tty,omitempty",json:"tty,omitempty"`
	Arch         *string    `url:"arch,omitempty",json:"arch,omitempty"`
	Cores        *int       `url:"cores,omitempty",json:"cores,omitempty"`
	Cpulimit     *float64   `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Features     *string    `url:"features,omitempty",json:"features,omitempty"`
	Netn         *string    `url:"net[n],omitempty",json:"net[n],omitempty"`
	Digest       string     `url:"digest",json:"digest"`
	Lock         *string    `url:"lock,omitempty",json:"lock,omitempty"`
	Protection   *bool      `url:"protection,omitempty",json:"protection,omitempty"`
	Memory       *int       `url:"memory,omitempty",json:"memory,omitempty"`
	Ostype       *string    `url:"ostype,omitempty",json:"ostype,omitempty"`
	Rootfs       *string    `url:"rootfs,omitempty",json:"rootfs,omitempty"`
	Swap         *int       `url:"swap,omitempty",json:"swap,omitempty"`
	Unusedn      *string    `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Cmode        *string    `url:"cmode,omitempty",json:"cmode,omitempty"`
	Onboot       *bool      `url:"onboot,omitempty",json:"onboot,omitempty"`
	Timezone     *string    `url:"timezone,omitempty",json:"timezone,omitempty"`
	Hostname     *string    `url:"hostname,omitempty",json:"hostname,omitempty"`
}

// VmConfig Get container configuration.
func (c *Client) VmConfig(ctx context.Context, req *VmConfigRequest) (*VmConfigResponse, error) {
	var resp *VmConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/config", "GET", &resp, req)
	return resp, err
}

type UpdateVmConfigRequest struct {
	Swap         *int     `url:"swap,omitempty",json:"swap,omitempty"`
	Unprivileged *bool    `url:"unprivileged,omitempty",json:"unprivileged,omitempty"`
	Vmid         int      `url:"vmid",json:"vmid"`
	Cmode        *string  `url:"cmode,omitempty",json:"cmode,omitempty"`
	Console      *bool    `url:"console,omitempty",json:"console,omitempty"`
	Description  *string  `url:"description,omitempty",json:"description,omitempty"`
	Lock         *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Mpn          *string  `url:"mp[n],omitempty",json:"mp[n],omitempty"`
	Cpuunits     *int     `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Debug        *bool    `url:"debug,omitempty",json:"debug,omitempty"`
	Tags         *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Unusedn      *string  `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Cores        *int     `url:"cores,omitempty",json:"cores,omitempty"`
	Delete       *string  `url:"delete,omitempty",json:"delete,omitempty"`
	Digest       *string  `url:"digest,omitempty",json:"digest,omitempty"`
	Revert       *string  `url:"revert,omitempty",json:"revert,omitempty"`
	Rootfs       *string  `url:"rootfs,omitempty",json:"rootfs,omitempty"`
	Cpulimit     *float64 `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Nameserver   *string  `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Onboot       *bool    `url:"onboot,omitempty",json:"onboot,omitempty"`
	Protection   *bool    `url:"protection,omitempty",json:"protection,omitempty"`
	Timezone     *string  `url:"timezone,omitempty",json:"timezone,omitempty"`
	Hookscript   *string  `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Memory       *int     `url:"memory,omitempty",json:"memory,omitempty"`
	Ostype       *string  `url:"ostype,omitempty",json:"ostype,omitempty"`
	Template     *bool    `url:"template,omitempty",json:"template,omitempty"`
	Arch         *string  `url:"arch,omitempty",json:"arch,omitempty"`
	Netn         *string  `url:"net[n],omitempty",json:"net[n],omitempty"`
	Node         string   `url:"node",json:"node"`
	Startup      *string  `url:"startup,omitempty",json:"startup,omitempty"`
	Tty          *int     `url:"tty,omitempty",json:"tty,omitempty"`
	Features     *string  `url:"features,omitempty",json:"features,omitempty"`
	Hostname     *string  `url:"hostname,omitempty",json:"hostname,omitempty"`
	Searchdomain *string  `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
}

type UpdateVmConfigResponse map[string]interface{}

// UpdateVmConfig Set container options.
func (c *Client) UpdateVmConfig(ctx context.Context, req *UpdateVmConfigRequest) (*UpdateVmConfigResponse, error) {
	var resp *UpdateVmConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/config", "PUT", &resp, req)
	return resp, err
}

type RrdRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Ds        string  `url:"ds",json:"ds"`
	Node      string  `url:"node",json:"node"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
	Vmid      int     `url:"vmid",json:"vmid"`
}

type RrdResponse struct {
	Filename string `url:"filename",json:"filename"`
}

// Rrd Read VM RRD statistics (returns PNG)
func (c *Client) Rrd(ctx context.Context, req *RrdRequest) (*RrdResponse, error) {
	var resp *RrdResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/rrd", "GET", &resp, req)
	return resp, err
}

type RrddataRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Node      string  `url:"node",json:"node"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
	Vmid      int     `url:"vmid",json:"vmid"`
}

type RrddataResponse []*map[string]interface{}

// Rrddata Read VM RRD statistics
func (c *Client) Rrddata(ctx context.Context, req *RrddataRequest) (*RrddataResponse, error) {
	var resp *RrddataResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/rrddata", "GET", &resp, req)
	return resp, err
}

type VncproxyRequest struct {
	Node      string `url:"node",json:"node"`
	Vmid      int    `url:"vmid",json:"vmid"`
	Websocket *bool  `url:"websocket,omitempty",json:"websocket,omitempty"`
	Width     *int   `url:"width,omitempty",json:"width,omitempty"`
	Height    *int   `url:"height,omitempty",json:"height,omitempty"`
}

type VncproxyResponse struct {
	Cert   string `url:"cert",json:"cert"`
	Port   int    `url:"port",json:"port"`
	Ticket string `url:"ticket",json:"ticket"`
	Upid   string `url:"upid",json:"upid"`
	User   string `url:"user",json:"user"`
}

// Vncproxy Creates a TCP VNC proxy connections.
func (c *Client) Vncproxy(ctx context.Context, req *VncproxyRequest) (*VncproxyResponse, error) {
	var resp *VncproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/vncproxy", "POST", &resp, req)
	return resp, err
}

type TermproxyRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type TermproxyResponse struct {
	Ticket string `url:"ticket",json:"ticket"`
	Upid   string `url:"upid",json:"upid"`
	User   string `url:"user",json:"user"`
	Port   int    `url:"port",json:"port"`
}

// Termproxy Creates a TCP proxy connection.
func (c *Client) Termproxy(ctx context.Context, req *TermproxyRequest) (*TermproxyResponse, error) {
	var resp *TermproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/termproxy", "POST", &resp, req)
	return resp, err
}

type VncwebsocketRequest struct {
	Node      string `url:"node",json:"node"`
	Port      int    `url:"port",json:"port"`
	Vmid      int    `url:"vmid",json:"vmid"`
	Vncticket string `url:"vncticket",json:"vncticket"`
}

type VncwebsocketResponse struct {
	Port string `url:"port",json:"port"`
}

// Vncwebsocket Opens a weksocket for VNC traffic.
func (c *Client) Vncwebsocket(ctx context.Context, req *VncwebsocketRequest) (*VncwebsocketResponse, error) {
	var resp *VncwebsocketResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/vncwebsocket", "GET", &resp, req)
	return resp, err
}

type SpiceproxyRequest struct {
	Vmid  int     `url:"vmid",json:"vmid"`
	Node  string  `url:"node",json:"node"`
	Proxy *string `url:"proxy,omitempty",json:"proxy,omitempty"`
}

type SpiceproxyResponse struct {
	Type     string `url:"type",json:"type"`
	Host     string `url:"host",json:"host"`
	Password string `url:"password",json:"password"`
	Proxy    string `url:"proxy",json:"proxy"`
	TlsPort  int    `url:"tls-port",json:"tls-port"`
}

// Spiceproxy Returns a SPICE configuration to connect to the CT.
func (c *Client) Spiceproxy(ctx context.Context, req *SpiceproxyRequest) (*SpiceproxyResponse, error) {
	var resp *SpiceproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/spiceproxy", "POST", &resp, req)
	return resp, err
}

type RemoteMigrateVmRemoteMigrateRequest struct {
	Restart        *bool    `url:"restart,omitempty",json:"restart,omitempty"`
	TargetEndpoint string   `url:"target-endpoint",json:"target-endpoint"`
	TargetVmid     *int     `url:"target-vmid,omitempty",json:"target-vmid,omitempty"`
	TargetStorage  string   `url:"target-storage",json:"target-storage"`
	Timeout        *int     `url:"timeout,omitempty",json:"timeout,omitempty"`
	Vmid           int      `url:"vmid",json:"vmid"`
	Bwlimit        *float64 `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Delete         *bool    `url:"delete,omitempty",json:"delete,omitempty"`
	Node           string   `url:"node",json:"node"`
	Online         *bool    `url:"online,omitempty",json:"online,omitempty"`
	TargetBridge   string   `url:"target-bridge",json:"target-bridge"`
}

type RemoteMigrateVmRemoteMigrateResponse string

// RemoteMigrateVmRemoteMigrate Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!
func (c *Client) RemoteMigrateVmRemoteMigrate(ctx context.Context, req *RemoteMigrateVmRemoteMigrateRequest) (*RemoteMigrateVmRemoteMigrateResponse, error) {
	var resp *RemoteMigrateVmRemoteMigrateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/remote_migrate", "POST", &resp, req)
	return resp, err
}

type MigrateVmMigrateRequest struct {
	Bwlimit       *float64 `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Node          string   `url:"node",json:"node"`
	Online        *bool    `url:"online,omitempty",json:"online,omitempty"`
	Restart       *bool    `url:"restart,omitempty",json:"restart,omitempty"`
	Target        string   `url:"target",json:"target"`
	TargetStorage *string  `url:"target-storage,omitempty",json:"target-storage,omitempty"`
	Timeout       *int     `url:"timeout,omitempty",json:"timeout,omitempty"`
	Vmid          int      `url:"vmid",json:"vmid"`
}

type MigrateVmMigrateResponse string

// MigrateVmMigrate Migrate the container to another node. Creates a new migration task.
func (c *Client) MigrateVmMigrate(ctx context.Context, req *MigrateVmMigrateRequest) (*MigrateVmMigrateResponse, error) {
	var resp *MigrateVmMigrateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/migrate", "POST", &resp, req)
	return resp, err
}

type VmFeatureRequest struct {
	Feature  string  `url:"feature",json:"feature"`
	Node     string  `url:"node",json:"node"`
	Snapname *string `url:"snapname,omitempty",json:"snapname,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
}

type VmFeatureResponse struct {
	Hasfeature bool `url:"hasFeature",json:"hasFeature"`
}

// VmFeature Check if feature for virtual machine is available.
func (c *Client) VmFeature(ctx context.Context, req *VmFeatureRequest) (*VmFeatureResponse, error) {
	var resp *VmFeatureResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/feature", "GET", &resp, req)
	return resp, err
}

type TemplateRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type TemplateResponse map[string]interface{}

// Template Create a Template.
func (c *Client) Template(ctx context.Context, req *TemplateRequest) (*TemplateResponse, error) {
	var resp *TemplateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/template", "POST", &resp, req)
	return resp, err
}

type CloneVmCloneRequest struct {
	Snapname    *string  `url:"snapname,omitempty",json:"snapname,omitempty"`
	Storage     *string  `url:"storage,omitempty",json:"storage,omitempty"`
	Target      *string  `url:"target,omitempty",json:"target,omitempty"`
	Description *string  `url:"description,omitempty",json:"description,omitempty"`
	Full        *bool    `url:"full,omitempty",json:"full,omitempty"`
	Hostname    *string  `url:"hostname,omitempty",json:"hostname,omitempty"`
	Pool        *string  `url:"pool,omitempty",json:"pool,omitempty"`
	Bwlimit     *float64 `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Newid       int      `url:"newid",json:"newid"`
	Node        string   `url:"node",json:"node"`
	Vmid        int      `url:"vmid",json:"vmid"`
}

type CloneVmCloneResponse string

// CloneVmClone Create a container clone/copy
func (c *Client) CloneVmClone(ctx context.Context, req *CloneVmCloneRequest) (*CloneVmCloneResponse, error) {
	var resp *CloneVmCloneResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/clone", "POST", &resp, req)
	return resp, err
}

type ResizeVmResizeRequest struct {
	Digest *string `url:"digest,omitempty",json:"digest,omitempty"`
	Disk   string  `url:"disk",json:"disk"`
	Node   string  `url:"node",json:"node"`
	Size   string  `url:"size",json:"size"`
	Vmid   int     `url:"vmid",json:"vmid"`
}

type ResizeVmResizeResponse string

// ResizeVmResize Resize a container mount point.
func (c *Client) ResizeVmResize(ctx context.Context, req *ResizeVmResizeRequest) (*ResizeVmResizeResponse, error) {
	var resp *ResizeVmResizeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/resize", "PUT", &resp, req)
	return resp, err
}

type MoveVolumeRequest struct {
	TargetDigest *string  `url:"target-digest,omitempty",json:"target-digest,omitempty"`
	TargetVolume *string  `url:"target-volume,omitempty",json:"target-volume,omitempty"`
	Vmid         int      `url:"vmid",json:"vmid"`
	Volume       string   `url:"volume",json:"volume"`
	Delete       *bool    `url:"delete,omitempty",json:"delete,omitempty"`
	Digest       *string  `url:"digest,omitempty",json:"digest,omitempty"`
	Node         string   `url:"node",json:"node"`
	Bwlimit      *float64 `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Storage      *string  `url:"storage,omitempty",json:"storage,omitempty"`
	TargetVmid   *int     `url:"target-vmid,omitempty",json:"target-vmid,omitempty"`
}

type MoveVolumeResponse string

// MoveVolume Move a rootfs-/mp-volume to a different storage or to a different container.
func (c *Client) MoveVolume(ctx context.Context, req *MoveVolumeRequest) (*MoveVolumeResponse, error) {
	var resp *MoveVolumeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/move_volume", "POST", &resp, req)
	return resp, err
}

type VmPendingRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type VmPendingResponse []*struct {
	Value   *string `url:"value,omitempty",json:"value,omitempty"`
	Delete  *int    `url:"delete,omitempty",json:"delete,omitempty"`
	Key     string  `url:"key",json:"key"`
	Pending *string `url:"pending,omitempty",json:"pending,omitempty"`
}

// VmPending Get container configuration, including pending changes.
func (c *Client) VmPending(ctx context.Context, req *VmPendingRequest) (*VmPendingResponse, error) {
	var resp *VmPendingResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/pending", "GET", &resp, req)
	return resp, err
}

type MtunnelRequest struct {
	Node     string  `url:"node",json:"node"`
	Storages *string `url:"storages,omitempty",json:"storages,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
	Bridges  *string `url:"bridges,omitempty",json:"bridges,omitempty"`
}

type MtunnelResponse struct {
	Socket string `url:"socket",json:"socket"`
	Ticket string `url:"ticket",json:"ticket"`
	Upid   string `url:"upid",json:"upid"`
}

// Mtunnel Migration tunnel endpoint - only for internal use by CT migration.
func (c *Client) Mtunnel(ctx context.Context, req *MtunnelRequest) (*MtunnelResponse, error) {
	var resp *MtunnelResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/mtunnel", "POST", &resp, req)
	return resp, err
}

type MtunnelwebsocketRequest struct {
	Vmid   int    `url:"vmid",json:"vmid"`
	Node   string `url:"node",json:"node"`
	Socket string `url:"socket",json:"socket"`
	Ticket string `url:"ticket",json:"ticket"`
}

type MtunnelwebsocketResponse struct {
	Port   *string `url:"port,omitempty",json:"port,omitempty"`
	Socket *string `url:"socket,omitempty",json:"socket,omitempty"`
}

// Mtunnelwebsocket Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
func (c *Client) Mtunnelwebsocket(ctx context.Context, req *MtunnelwebsocketRequest) (*MtunnelwebsocketResponse, error) {
	var resp *MtunnelwebsocketResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/mtunnelwebsocket", "GET", &resp, req)
	return resp, err
}
