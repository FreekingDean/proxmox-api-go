// File generated by proxmox json schema, DO NOT EDIT

package status

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type IndexResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Index Directory index
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status", "GET", &resp, req)
	return resp, err
}

type VmStatusCurrentRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type VmStatusCurrentResponse struct {
	Uptime  *int                   `url:"uptime,omitempty",json:"uptime,omitempty"`
	Vmid    int                    `url:"vmid",json:"vmid"`
	Cpus    *float64               `url:"cpus,omitempty",json:"cpus,omitempty"`
	Lock    *string                `url:"lock,omitempty",json:"lock,omitempty"`
	Maxdisk *int                   `url:"maxdisk,omitempty",json:"maxdisk,omitempty"`
	Maxswap *int                   `url:"maxswap,omitempty",json:"maxswap,omitempty"`
	Status  string                 `url:"status",json:"status"`
	Tags    *string                `url:"tags,omitempty",json:"tags,omitempty"`
	Ha      map[string]interface{} `url:"ha",json:"ha"`
	Maxmem  *int                   `url:"maxmem,omitempty",json:"maxmem,omitempty"`
	Name    *string                `url:"name,omitempty",json:"name,omitempty"`
}

// VmStatusCurrent Get virtual machine status.
func (c *Client) VmStatusCurrent(ctx context.Context, req *VmStatusCurrentRequest) (*VmStatusCurrentResponse, error) {
	var resp *VmStatusCurrentResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/current", "GET", &resp, req)
	return resp, err
}

type VmStartRequest struct {
	Debug    *bool  `url:"debug,omitempty",json:"debug,omitempty"`
	Node     string `url:"node",json:"node"`
	Skiplock *bool  `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Vmid     int    `url:"vmid",json:"vmid"`
}

type VmStartResponse string

// VmStart Start the container.
func (c *Client) VmStart(ctx context.Context, req *VmStartRequest) (*VmStartResponse, error) {
	var resp *VmStartResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/start", "POST", &resp, req)
	return resp, err
}

type VmStopRequest struct {
	Node     string `url:"node",json:"node"`
	Skiplock *bool  `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Vmid     int    `url:"vmid",json:"vmid"`
}

type VmStopResponse string

// VmStop Stop the container. This will abruptly stop all processes running in the container.
func (c *Client) VmStop(ctx context.Context, req *VmStopRequest) (*VmStopResponse, error) {
	var resp *VmStopResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/stop", "POST", &resp, req)
	return resp, err
}

type VmShutdownRequest struct {
	Forcestop *bool  `url:"forceStop,omitempty",json:"forceStop,omitempty"`
	Node      string `url:"node",json:"node"`
	Timeout   *int   `url:"timeout,omitempty",json:"timeout,omitempty"`
	Vmid      int    `url:"vmid",json:"vmid"`
}

type VmShutdownResponse string

// VmShutdown Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.
func (c *Client) VmShutdown(ctx context.Context, req *VmShutdownRequest) (*VmShutdownResponse, error) {
	var resp *VmShutdownResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/shutdown", "POST", &resp, req)
	return resp, err
}

type VmSuspendRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type VmSuspendResponse string

// VmSuspend Suspend the container. This is experimental.
func (c *Client) VmSuspend(ctx context.Context, req *VmSuspendRequest) (*VmSuspendResponse, error) {
	var resp *VmSuspendResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/suspend", "POST", &resp, req)
	return resp, err
}

type VmResumeRequest struct {
	Vmid int    `url:"vmid",json:"vmid"`
	Node string `url:"node",json:"node"`
}

type VmResumeResponse string

// VmResume Resume the container.
func (c *Client) VmResume(ctx context.Context, req *VmResumeRequest) (*VmResumeResponse, error) {
	var resp *VmResumeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/resume", "POST", &resp, req)
	return resp, err
}

type VmRebootRequest struct {
	Node    string `url:"node",json:"node"`
	Timeout *int   `url:"timeout,omitempty",json:"timeout,omitempty"`
	Vmid    int    `url:"vmid",json:"vmid"`
}

type VmRebootResponse string

// VmReboot Reboot the container by shutting it down, and starting it again. Applies pending changes.
func (c *Client) VmReboot(ctx context.Context, req *VmRebootRequest) (*VmRebootResponse, error) {
	var resp *VmRebootResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/reboot", "POST", &resp, req)
	return resp, err
}
