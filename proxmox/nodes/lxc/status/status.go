// File generated by proxmox json schema, DO NOT EDIT

package status

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type IndexResponse struct {
	Subdir string `url:"subdir" json:"subdir"`
}

type VmStatusCurrentRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type VmStatusCurrentResponse struct {
	Ha     map[string]interface{} `url:"ha" json:"ha"`         // HA manager service status.
	Status string                 `url:"status" json:"status"` // LXC Container status.
	Vmid   int                    `url:"vmid" json:"vmid"`     // The (unique) ID of the VM.

	// The following parameters are optional
	Cpus    *float64 `url:"cpus,omitempty" json:"cpus,omitempty"`       // Maximum usable CPUs.
	Lock    *string  `url:"lock,omitempty" json:"lock,omitempty"`       // The current config lock, if any.
	Maxdisk *int     `url:"maxdisk,omitempty" json:"maxdisk,omitempty"` // Root disk size in bytes.
	Maxmem  *int     `url:"maxmem,omitempty" json:"maxmem,omitempty"`   // Maximum memory in bytes.
	Maxswap *int     `url:"maxswap,omitempty" json:"maxswap,omitempty"` // Maximum SWAP memory in bytes.
	Name    *string  `url:"name,omitempty" json:"name,omitempty"`       // Container name.
	Tags    *string  `url:"tags,omitempty" json:"tags,omitempty"`       // The current configured tags, if any.
	Uptime  *int     `url:"uptime,omitempty" json:"uptime,omitempty"`   // Uptime.
}

type VmStartRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Debug    *util.SpecialBool `url:"debug,omitempty" json:"debug,omitempty"`       // If set, enables very verbose debug log-level on start.
	Skiplock *util.SpecialBool `url:"skiplock,omitempty" json:"skiplock,omitempty"` // Ignore locks - only root is allowed to use this option.
}

type VmStopRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Skiplock *util.SpecialBool `url:"skiplock,omitempty" json:"skiplock,omitempty"` // Ignore locks - only root is allowed to use this option.
}

type VmShutdownRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Forcestop *util.SpecialBool `url:"forceStop,omitempty" json:"forceStop,omitempty"` // Make sure the Container stops.
	Timeout   *int              `url:"timeout,omitempty" json:"timeout,omitempty"`     // Wait maximal timeout seconds.
}

type VmSuspendRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type VmResumeRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type VmRebootRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Timeout *int `url:"timeout,omitempty" json:"timeout,omitempty"` // Wait maximal timeout seconds for the shutdown.
}

// Index Directory index
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status", "GET", &resp, req)
	return resp, err
}

// VmStatusCurrent Get virtual machine status.
func (c *Client) VmStatusCurrent(ctx context.Context, req VmStatusCurrentRequest) (VmStatusCurrentResponse, error) {
	var resp VmStatusCurrentResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/current", "GET", &resp, req)
	return resp, err
}

// VmStart Start the container.
func (c *Client) VmStart(ctx context.Context, req VmStartRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/start", "POST", &resp, req)
	return resp, err
}

// VmStop Stop the container. This will abruptly stop all processes running in the container.
func (c *Client) VmStop(ctx context.Context, req VmStopRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/stop", "POST", &resp, req)
	return resp, err
}

// VmShutdown Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.
func (c *Client) VmShutdown(ctx context.Context, req VmShutdownRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/shutdown", "POST", &resp, req)
	return resp, err
}

// VmSuspend Suspend the container. This is experimental.
func (c *Client) VmSuspend(ctx context.Context, req VmSuspendRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/suspend", "POST", &resp, req)
	return resp, err
}

// VmResume Resume the container.
func (c *Client) VmResume(ctx context.Context, req VmResumeRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/resume", "POST", &resp, req)
	return resp, err
}

// VmReboot Reboot the container by shutting it down, and starting it again. Applies pending changes.
func (c *Client) VmReboot(ctx context.Context, req VmRebootRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/status/reboot", "POST", &resp, req)
	return resp, err
}
