// File generated by proxmox json schema, DO NOT EDIT

package aliases

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type IndexResponse []*struct {
	Digest  string  `url:"digest",json:"digest"`
	Name    string  `url:"name",json:"name"`
	Cidr    string  `url:"cidr",json:"cidr"`
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
}

// Index List aliases
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/aliases", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Cidr    string  `url:"cidr",json:"cidr"`
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Name    string  `url:"name",json:"name"`
	Node    string  `url:"node",json:"node"`
	Vmid    int     `url:"vmid",json:"vmid"`
}

type CreateResponse map[string]interface{}

// Create Create IP or Network Alias.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/aliases", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Vmid int    `url:"vmid",json:"vmid"`
	Name string `url:"name",json:"name"`
	Node string `url:"node",json:"node"`
}

type FindResponse map[string]interface{}

// Find Read alias.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/aliases/{name}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Vmid    int     `url:"vmid",json:"vmid"`
	Cidr    string  `url:"cidr",json:"cidr"`
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Digest  *string `url:"digest,omitempty",json:"digest,omitempty"`
	Name    string  `url:"name",json:"name"`
	Node    string  `url:"node",json:"node"`
	Rename  *string `url:"rename,omitempty",json:"rename,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update IP or Network alias.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/aliases/{name}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Digest *string `url:"digest,omitempty",json:"digest,omitempty"`
	Name   string  `url:"name",json:"name"`
	Node   string  `url:"node",json:"node"`
	Vmid   int     `url:"vmid",json:"vmid"`
}

type DeleteResponse map[string]interface{}

// Delete Remove IP or Network alias.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/aliases/{name}", "DELETE", &resp, req)
	return resp, err
}
