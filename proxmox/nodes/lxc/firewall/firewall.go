// File generated by proxmox json schema, DO NOT EDIT

package firewall

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

const (
	LogLevelIn_EMERG   LogLevelIn = "emerg"
	LogLevelIn_ALERT   LogLevelIn = "alert"
	LogLevelIn_CRIT    LogLevelIn = "crit"
	LogLevelIn_ERR     LogLevelIn = "err"
	LogLevelIn_WARNING LogLevelIn = "warning"
	LogLevelIn_NOTICE  LogLevelIn = "notice"
	LogLevelIn_INFO    LogLevelIn = "info"
	LogLevelIn_DEBUG   LogLevelIn = "debug"
	LogLevelIn_NOLOG   LogLevelIn = "nolog"

	LogLevelOut_EMERG   LogLevelOut = "emerg"
	LogLevelOut_ALERT   LogLevelOut = "alert"
	LogLevelOut_CRIT    LogLevelOut = "crit"
	LogLevelOut_ERR     LogLevelOut = "err"
	LogLevelOut_WARNING LogLevelOut = "warning"
	LogLevelOut_NOTICE  LogLevelOut = "notice"
	LogLevelOut_INFO    LogLevelOut = "info"
	LogLevelOut_DEBUG   LogLevelOut = "debug"
	LogLevelOut_NOLOG   LogLevelOut = "nolog"

	PolicyIn_ACCEPT PolicyIn = "ACCEPT"
	PolicyIn_REJECT PolicyIn = "REJECT"
	PolicyIn_DROP   PolicyIn = "DROP"

	PolicyOut_ACCEPT PolicyOut = "ACCEPT"
	PolicyOut_REJECT PolicyOut = "REJECT"
	PolicyOut_DROP   PolicyOut = "DROP"

	Type_ALIAS Type = "alias"
	Type_IPSET Type = "ipset"
)

type LogLevelIn string
type LogLevelOut string
type PolicyIn string
type PolicyOut string
type Type string

func PtrLogLevelIn(i LogLevelIn) *LogLevelIn {
	return &i
}
func PtrLogLevelOut(i LogLevelOut) *LogLevelOut {
	return &i
}
func PtrPolicyIn(i PolicyIn) *PolicyIn {
	return &i
}
func PtrPolicyOut(i PolicyOut) *PolicyOut {
	return &i
}
func PtrType(i Type) *Type {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}
type _IndexRequest IndexRequest

type GetOptionsRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}
type _GetOptionsRequest GetOptionsRequest

type GetOptionsResponse struct {

	// The following parameters are optional
	Dhcp        *util.PVEBool `url:"dhcp,omitempty" json:"dhcp,omitempty"`                   // Enable DHCP.
	Enable      *util.PVEBool `url:"enable,omitempty" json:"enable,omitempty"`               // Enable/disable firewall rules.
	Ipfilter    *util.PVEBool `url:"ipfilter,omitempty" json:"ipfilter,omitempty"`           // Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added.
	LogLevelIn  *LogLevelIn   `url:"log_level_in,omitempty" json:"log_level_in,omitempty"`   // Log level for incoming traffic.
	LogLevelOut *LogLevelOut  `url:"log_level_out,omitempty" json:"log_level_out,omitempty"` // Log level for outgoing traffic.
	Macfilter   *util.PVEBool `url:"macfilter,omitempty" json:"macfilter,omitempty"`         // Enable/disable MAC address filter.
	Ndp         *util.PVEBool `url:"ndp,omitempty" json:"ndp,omitempty"`                     // Enable NDP (Neighbor Discovery Protocol).
	PolicyIn    *PolicyIn     `url:"policy_in,omitempty" json:"policy_in,omitempty"`         // Input policy.
	PolicyOut   *PolicyOut    `url:"policy_out,omitempty" json:"policy_out,omitempty"`       // Output policy.
	Radv        *util.PVEBool `url:"radv,omitempty" json:"radv,omitempty"`                   // Allow sending Router Advertisement.
}
type _GetOptionsResponse GetOptionsResponse

type SetOptionsRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Delete      *string       `url:"delete,omitempty" json:"delete,omitempty"`               // A list of settings you want to delete.
	Dhcp        *util.PVEBool `url:"dhcp,omitempty" json:"dhcp,omitempty"`                   // Enable DHCP.
	Digest      *string       `url:"digest,omitempty" json:"digest,omitempty"`               // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Enable      *util.PVEBool `url:"enable,omitempty" json:"enable,omitempty"`               // Enable/disable firewall rules.
	Ipfilter    *util.PVEBool `url:"ipfilter,omitempty" json:"ipfilter,omitempty"`           // Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added.
	LogLevelIn  *LogLevelIn   `url:"log_level_in,omitempty" json:"log_level_in,omitempty"`   // Log level for incoming traffic.
	LogLevelOut *LogLevelOut  `url:"log_level_out,omitempty" json:"log_level_out,omitempty"` // Log level for outgoing traffic.
	Macfilter   *util.PVEBool `url:"macfilter,omitempty" json:"macfilter,omitempty"`         // Enable/disable MAC address filter.
	Ndp         *util.PVEBool `url:"ndp,omitempty" json:"ndp,omitempty"`                     // Enable NDP (Neighbor Discovery Protocol).
	PolicyIn    *PolicyIn     `url:"policy_in,omitempty" json:"policy_in,omitempty"`         // Input policy.
	PolicyOut   *PolicyOut    `url:"policy_out,omitempty" json:"policy_out,omitempty"`       // Output policy.
	Radv        *util.PVEBool `url:"radv,omitempty" json:"radv,omitempty"`                   // Allow sending Router Advertisement.
}
type _SetOptionsRequest SetOptionsRequest

type LogRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Limit *int `url:"limit,omitempty" json:"limit,omitempty"`
	Since *int `url:"since,omitempty" json:"since,omitempty"` // Display log since this UNIX epoch.
	Start *int `url:"start,omitempty" json:"start,omitempty"`
	Until *int `url:"until,omitempty" json:"until,omitempty"` // Display log until this UNIX epoch.
}
type _LogRequest LogRequest

type LogResponse struct {
	N int    `url:"n" json:"n"` // Line number
	T string `url:"t" json:"t"` // Line text

}
type _LogResponse LogResponse

type RefsRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Type *Type `url:"type,omitempty" json:"type,omitempty"` // Only list references of specified type.
}
type _RefsRequest RefsRequest

type RefsResponse struct {
	Name string `url:"name" json:"name"`
	Type Type   `url:"type" json:"type"`

	// The following parameters are optional
	Comment *string `url:"comment,omitempty" json:"comment,omitempty"`
}
type _RefsResponse RefsResponse

// Index Directory index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall", "GET", &resp, req)
	return resp, err
}

// GetOptions Get VM firewall options.
func (c *Client) GetOptions(ctx context.Context, req GetOptionsRequest) (GetOptionsResponse, error) {
	var resp GetOptionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/options", "GET", &resp, req)
	return resp, err
}

// SetOptions Set Firewall options.
func (c *Client) SetOptions(ctx context.Context, req SetOptionsRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/options", "PUT", nil, req)
	return err
}

// Log Read firewall log
func (c *Client) Log(ctx context.Context, req LogRequest) ([]LogResponse, error) {
	var resp []LogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/log", "GET", &resp, req)
	return resp, err
}

// Refs Lists possible IPSet/Alias reference which are allowed in source/dest properties.
func (c *Client) Refs(ctx context.Context, req RefsRequest) ([]RefsResponse, error) {
	var resp []RefsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/lxc/{vmid}/firewall/refs", "GET", &resp, req)
	return resp, err
}
