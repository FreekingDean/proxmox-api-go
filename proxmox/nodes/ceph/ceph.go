// File generated by proxmox json schema, DO NOT EDIT

package ceph

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

const (
	Action_STOP    Action = "stop"
	Action_DESTROY Action = "destroy"

	Service_OSD Service = "osd"
	Service_MON Service = "mon"
	Service_MDS Service = "mds"
)

type Action string
type Service string

func PtrAction(i Action) *Action {
	return &i
}
func PtrService(i Service) *Service {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type ConfigRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type ConfigdbRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type ConfigdbResponse struct {
	CanUpdateAtRuntime util.PVEBool `url:"can_update_at_runtime" json:"can_update_at_runtime"`
	Level              string       `url:"level" json:"level"`
	Mask               string       `url:"mask" json:"mask"`
	Name               string       `url:"name" json:"name"`
	Section            string       `url:"section" json:"section"`
	Value              string       `url:"value" json:"value"`
}

type InitRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	ClusterNetwork *string       `url:"cluster-network,omitempty" json:"cluster-network,omitempty"` // Declare a separate cluster network, OSDs will routeheartbeat, object replication and recovery traffic over it
	DisableCephx   *util.PVEBool `url:"disable_cephx,omitempty" json:"disable_cephx,omitempty"`     // Disable cephx authentication. WARNING: cephx is a security feature protecting against man-in-the-middle attacks. Only consider disabling cephx if your network is private!
	MinSize        *int          `url:"min_size,omitempty" json:"min_size,omitempty"`               // Minimum number of available replicas per object to allow I/O
	Network        *string       `url:"network,omitempty" json:"network,omitempty"`                 // Use specific network for all ceph related traffic
	PgBits         *int          `url:"pg_bits,omitempty" json:"pg_bits,omitempty"`                 // Placement group bits, used to specify the default number of placement groups. NOTE: 'osd pool default pg num' does not work for default pools.
	Size           *int          `url:"size,omitempty" json:"size,omitempty"`                       // Targeted number of replicas per object
}

type StopRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Service *string `url:"service,omitempty" json:"service,omitempty"` // Ceph service name.
}

type StartRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Service *string `url:"service,omitempty" json:"service,omitempty"` // Ceph service name.
}

type RestartRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Service *string `url:"service,omitempty" json:"service,omitempty"` // Ceph service name.
}

type StatusRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type CrushRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type LogRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Limit *int `url:"limit,omitempty" json:"limit,omitempty"`
	Start *int `url:"start,omitempty" json:"start,omitempty"`
}

type LogResponse struct {
	N int    `url:"n" json:"n"` // Line number
	T string `url:"t" json:"t"` // Line text

}

type RulesRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type CmdSafetyRequest struct {
	Action  Action  `url:"action" json:"action"`   // Action to check
	Id      string  `url:"id" json:"id"`           // ID of the service
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service type

}

type CmdSafetyResponse struct {
	Safe util.PVEBool `url:"safe" json:"safe"` // If it is safe to run the command.

	// The following parameters are optional
	Status *string `url:"status,omitempty" json:"status,omitempty"` // Status message given by Ceph.
}

// Index Directory index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph", "GET", &resp, req)
	return resp, err
}

// Config Get Ceph configuration.
func (c *Client) Config(ctx context.Context, req ConfigRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/config", "GET", &resp, req)
	return resp, err
}

// Configdb Get Ceph configuration database.
func (c *Client) Configdb(ctx context.Context, req ConfigdbRequest) ([]ConfigdbResponse, error) {
	var resp []ConfigdbResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/configdb", "GET", &resp, req)
	return resp, err
}

// Init Create initial ceph default configuration and setup symlinks.
func (c *Client) Init(ctx context.Context, req InitRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/init", "POST", nil, req)
	return err
}

// Stop Stop ceph services.
func (c *Client) Stop(ctx context.Context, req StopRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/stop", "POST", &resp, req)
	return resp, err
}

// Start Start ceph services.
func (c *Client) Start(ctx context.Context, req StartRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/start", "POST", &resp, req)
	return resp, err
}

// Restart Restart ceph services.
func (c *Client) Restart(ctx context.Context, req RestartRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/restart", "POST", &resp, req)
	return resp, err
}

// Status Get ceph status.
func (c *Client) Status(ctx context.Context, req StatusRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/status", "GET", &resp, req)
	return resp, err
}

// Crush Get OSD crush map
func (c *Client) Crush(ctx context.Context, req CrushRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/crush", "GET", &resp, req)
	return resp, err
}

// Log Read ceph log
func (c *Client) Log(ctx context.Context, req LogRequest) ([]LogResponse, error) {
	var resp []LogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/log", "GET", &resp, req)
	return resp, err
}

// Rules List ceph rules.
func (c *Client) Rules(ctx context.Context, req RulesRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/rules", "GET", &resp, req)
	return resp, err
}

// CmdSafety Heuristical check if it is safe to perform an action.
func (c *Client) CmdSafety(ctx context.Context, req CmdSafetyRequest) (CmdSafetyResponse, error) {
	var resp CmdSafetyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/cmd-safety", "GET", &resp, req)
	return resp, err
}
