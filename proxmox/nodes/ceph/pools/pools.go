// File generated by proxmox json schema, DO NOT EDIT

package pools

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*struct {
	ApplicationMetadata map[string]interface{} `url:"application_metadata,omitempty",json:"application_metadata,omitempty"`
	BytesUsed           int                    `url:"bytes_used",json:"bytes_used"`
	CrushRule           int                    `url:"crush_rule",json:"crush_rule"`
	MinSize             int                    `url:"min_size",json:"min_size"`
	PgNum               int                    `url:"pg_num",json:"pg_num"`
	PoolName            string                 `url:"pool_name",json:"pool_name"`
	TargetSizeRatio     *float64               `url:"target_size_ratio,omitempty",json:"target_size_ratio,omitempty"`
	AutoscaleStatus     map[string]interface{} `url:"autoscale_status,omitempty",json:"autoscale_status,omitempty"`
	PercentUsed         float64                `url:"percent_used",json:"percent_used"`
	PgNumFinal          *int                   `url:"pg_num_final,omitempty",json:"pg_num_final,omitempty"`
	Pool                int                    `url:"pool",json:"pool"`
	Size                int                    `url:"size",json:"size"`
	CrushRuleName       string                 `url:"crush_rule_name",json:"crush_rule_name"`
	PgAutoscaleMode     *string                `url:"pg_autoscale_mode,omitempty",json:"pg_autoscale_mode,omitempty"`
	PgNumMin            *int                   `url:"pg_num_min,omitempty",json:"pg_num_min,omitempty"`
	TargetSize          *int                   `url:"target_size,omitempty",json:"target_size,omitempty"`
	Type                string                 `url:"type",json:"type"`
}

// Index List all pools.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/pools", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	PgAutoscaleMode *string  `url:"pg_autoscale_mode,omitempty",json:"pg_autoscale_mode,omitempty"`
	TargetSizeRatio *float64 `url:"target_size_ratio,omitempty",json:"target_size_ratio,omitempty"`
	AddStorages     *bool    `url:"add_storages,omitempty",json:"add_storages,omitempty"`
	Application     *string  `url:"application,omitempty",json:"application,omitempty"`
	CrushRule       *string  `url:"crush_rule,omitempty",json:"crush_rule,omitempty"`
	Name            string   `url:"name",json:"name"`
	PgNumMin        *int     `url:"pg_num_min,omitempty",json:"pg_num_min,omitempty"`
	Size            *int     `url:"size,omitempty",json:"size,omitempty"`
	TargetSize      *string  `url:"target_size,omitempty",json:"target_size,omitempty"`
	ErasureCoding   *string  `url:"erasure-coding,omitempty",json:"erasure-coding,omitempty"`
	MinSize         *int     `url:"min_size,omitempty",json:"min_size,omitempty"`
	Node            string   `url:"node",json:"node"`
	PgNum           *int     `url:"pg_num,omitempty",json:"pg_num,omitempty"`
}

type CreateResponse string

// Create Create Ceph pool
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/pools", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Name    string `url:"name",json:"name"`
	Node    string `url:"node",json:"node"`
	Verbose *bool  `url:"verbose,omitempty",json:"verbose,omitempty"`
}

type FindResponse struct {
	MinSize              *int                      `url:"min_size,omitempty",json:"min_size,omitempty"`
	Name                 string                    `url:"name",json:"name"`
	Noscrub              bool                      `url:"noscrub",json:"noscrub"`
	PgpNum               int                       `url:"pgp_num",json:"pgp_num"`
	Statistics           map[string]interface{}    `url:"statistics,omitempty",json:"statistics,omitempty"`
	TargetSizeRatio      *float64                  `url:"target_size_ratio,omitempty",json:"target_size_ratio,omitempty"`
	CrushRule            *string                   `url:"crush_rule,omitempty",json:"crush_rule,omitempty"`
	Hashpspool           bool                      `url:"hashpspool",json:"hashpspool"`
	WriteFadviseDontneed bool                      `url:"write_fadvise_dontneed",json:"write_fadvise_dontneed"`
	AutoscaleStatus      map[string]interface{}    `url:"autoscale_status,omitempty",json:"autoscale_status,omitempty"`
	PgNum                *int                      `url:"pg_num,omitempty",json:"pg_num,omitempty"`
	FastRead             bool                      `url:"fast_read",json:"fast_read"`
	NodeepScrub          bool                      `url:"nodeep-scrub",json:"nodeep-scrub"`
	Nosizechange         bool                      `url:"nosizechange",json:"nosizechange"`
	PgNumMin             *int                      `url:"pg_num_min,omitempty",json:"pg_num_min,omitempty"`
	TargetSize           *string                   `url:"target_size,omitempty",json:"target_size,omitempty"`
	Application          *string                   `url:"application,omitempty",json:"application,omitempty"`
	ApplicationList      []*map[string]interface{} `url:"application_list,omitempty",json:"application_list,omitempty"`
	Nopgchange           bool                      `url:"nopgchange",json:"nopgchange"`
	PgAutoscaleMode      *string                   `url:"pg_autoscale_mode,omitempty",json:"pg_autoscale_mode,omitempty"`
	Size                 *int                      `url:"size,omitempty",json:"size,omitempty"`
	UseGmtHitset         bool                      `url:"use_gmt_hitset",json:"use_gmt_hitset"`
	Id                   int                       `url:"id",json:"id"`
	Nodelete             bool                      `url:"nodelete",json:"nodelete"`
}

// Find List pool settings.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/pools/{name}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	CrushRule       *string  `url:"crush_rule,omitempty",json:"crush_rule,omitempty"`
	Name            string   `url:"name",json:"name"`
	Node            string   `url:"node",json:"node"`
	PgAutoscaleMode *string  `url:"pg_autoscale_mode,omitempty",json:"pg_autoscale_mode,omitempty"`
	PgNum           *int     `url:"pg_num,omitempty",json:"pg_num,omitempty"`
	PgNumMin        *int     `url:"pg_num_min,omitempty",json:"pg_num_min,omitempty"`
	Size            *int     `url:"size,omitempty",json:"size,omitempty"`
	TargetSizeRatio *float64 `url:"target_size_ratio,omitempty",json:"target_size_ratio,omitempty"`
	Application     *string  `url:"application,omitempty",json:"application,omitempty"`
	MinSize         *int     `url:"min_size,omitempty",json:"min_size,omitempty"`
	TargetSize      *string  `url:"target_size,omitempty",json:"target_size,omitempty"`
}

type UpdateResponse string

// Update Change POOL settings
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/pools/{name}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	RemoveEcprofile *bool  `url:"remove_ecprofile,omitempty",json:"remove_ecprofile,omitempty"`
	RemoveStorages  *bool  `url:"remove_storages,omitempty",json:"remove_storages,omitempty"`
	Force           *bool  `url:"force,omitempty",json:"force,omitempty"`
	Name            string `url:"name",json:"name"`
	Node            string `url:"node",json:"node"`
}

type DeleteResponse string

// Delete Destroy pool
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/pools/{name}", "DELETE", &resp, req)
	return resp, err
}
