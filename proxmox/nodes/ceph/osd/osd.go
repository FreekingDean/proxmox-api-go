// File generated by proxmox json schema, DO NOT EDIT

package osd

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}
type _IndexRequest IndexRequest

type CreateRequest struct {
	Dev  string `url:"dev" json:"dev"`   // Block device name.
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	CrushDeviceClass *string       `url:"crush-device-class,omitempty" json:"crush-device-class,omitempty"` // Set the device class of the OSD in crush.
	DbDev            *string       `url:"db_dev,omitempty" json:"db_dev,omitempty"`                         // Block device name for block.db.
	DbDevSize        *float64      `url:"db_dev_size,omitempty" json:"db_dev_size,omitempty"`               // Size in GiB for block.db.
	Encrypted        *util.PVEBool `url:"encrypted,omitempty" json:"encrypted,omitempty"`                   // Enables encryption of the OSD.
	WalDev           *string       `url:"wal_dev,omitempty" json:"wal_dev,omitempty"`                       // Block device name for block.wal.
	WalDevSize       *float64      `url:"wal_dev_size,omitempty" json:"wal_dev_size,omitempty"`             // Size in GiB for block.wal.
}
type _CreateRequest CreateRequest

type DeleteRequest struct {
	Node  string `url:"node" json:"node"`   // The cluster node name.
	Osdid int    `url:"osdid" json:"osdid"` // OSD ID

	// The following parameters are optional
	Cleanup *util.PVEBool `url:"cleanup,omitempty" json:"cleanup,omitempty"` // If set, we remove partition table entries.
}
type _DeleteRequest DeleteRequest

type InRequest struct {
	Node  string `url:"node" json:"node"`   // The cluster node name.
	Osdid int    `url:"osdid" json:"osdid"` // OSD ID

}
type _InRequest InRequest

type OutRequest struct {
	Node  string `url:"node" json:"node"`   // The cluster node name.
	Osdid int    `url:"osdid" json:"osdid"` // OSD ID

}
type _OutRequest OutRequest

type ScrubRequest struct {
	Node  string `url:"node" json:"node"`   // The cluster node name.
	Osdid int    `url:"osdid" json:"osdid"` // OSD ID

	// The following parameters are optional
	Deep *util.PVEBool `url:"deep,omitempty" json:"deep,omitempty"` // If set, instructs a deep scrub instead of a normal one.
}
type _ScrubRequest ScrubRequest

// Index Get Ceph osd list/tree.
func (c *Client) Index(ctx context.Context, req IndexRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/osd", "GET", &resp, req)
	return resp, err
}

// Create Create OSD
func (c *Client) Create(ctx context.Context, req CreateRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/osd", "POST", &resp, req)
	return resp, err
}

// Delete Destroy OSD
func (c *Client) Delete(ctx context.Context, req DeleteRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/osd/{osdid}", "DELETE", &resp, req)
	return resp, err
}

// In ceph osd in
func (c *Client) In(ctx context.Context, req InRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/osd/{osdid}/in", "POST", nil, req)
	return err
}

// Out ceph osd out
func (c *Client) Out(ctx context.Context, req OutRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/osd/{osdid}/out", "POST", nil, req)
	return err
}

// Scrub Instruct the OSD to scrub.
func (c *Client) Scrub(ctx context.Context, req ScrubRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/ceph/osd/{osdid}/scrub", "POST", nil, req)
	return err
}
