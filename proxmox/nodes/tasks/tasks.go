// File generated by proxmox json schema, DO NOT EDIT

package tasks

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Since        *int    `url:"since,omitempty",json:"since,omitempty"`
	Source       *string `url:"source,omitempty",json:"source,omitempty"`
	Typefilter   *string `url:"typefilter,omitempty",json:"typefilter,omitempty"`
	Errors       *bool   `url:"errors,omitempty",json:"errors,omitempty"`
	Limit        *int    `url:"limit,omitempty",json:"limit,omitempty"`
	Node         string  `url:"node",json:"node"`
	Start        *int    `url:"start,omitempty",json:"start,omitempty"`
	Statusfilter *string `url:"statusfilter,omitempty",json:"statusfilter,omitempty"`
	Until        *int    `url:"until,omitempty",json:"until,omitempty"`
	Userfilter   *string `url:"userfilter,omitempty",json:"userfilter,omitempty"`
	Vmid         *int    `url:"vmid,omitempty",json:"vmid,omitempty"`
}

type IndexResponse []*struct {
	Starttime int     `url:"starttime",json:"starttime"`
	Type      string  `url:"type",json:"type"`
	Upid      string  `url:"upid",json:"upid"`
	User      string  `url:"user",json:"user"`
	Endtime   *int    `url:"endtime,omitempty",json:"endtime,omitempty"`
	Id        string  `url:"id",json:"id"`
	Node      string  `url:"node",json:"node"`
	Pid       int     `url:"pid",json:"pid"`
	Pstart    int     `url:"pstart",json:"pstart"`
	Status    *string `url:"status,omitempty",json:"status,omitempty"`
}

// Index Read task list for one node (finished tasks).
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/tasks", "GET", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node string `url:"node",json:"node"`
	Upid string `url:"upid",json:"upid"`
}

type FindResponse []*map[string]interface{}

// Find
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/tasks/{upid}", "GET", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Node string `url:"node",json:"node"`
	Upid string `url:"upid",json:"upid"`
}

type DeleteResponse map[string]interface{}

// Delete Stop a task.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/tasks/{upid}", "DELETE", &resp, req)
	return resp, err
}

type ReadTaskLogRequest struct {
	Limit *int   `url:"limit,omitempty",json:"limit,omitempty"`
	Node  string `url:"node",json:"node"`
	Start *int   `url:"start,omitempty",json:"start,omitempty"`
	Upid  string `url:"upid",json:"upid"`
}

type ReadTaskLogResponse []*struct {
	N int    `url:"n",json:"n"`
	T string `url:"t",json:"t"`
}

// ReadTaskLog Read task log.
func (c *Client) ReadTaskLog(ctx context.Context, req *ReadTaskLogRequest) (*ReadTaskLogResponse, error) {
	var resp *ReadTaskLogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/tasks/{upid}/log", "GET", &resp, req)
	return resp, err
}

type ReadTaskStatusRequest struct {
	Node string `url:"node",json:"node"`
	Upid string `url:"upid",json:"upid"`
}

type ReadTaskStatusResponse struct {
	User       string  `url:"user",json:"user"`
	Exitstatus *string `url:"exitstatus,omitempty",json:"exitstatus,omitempty"`
	Id         string  `url:"id",json:"id"`
	Status     string  `url:"status",json:"status"`
	Type       string  `url:"type",json:"type"`
	Upid       string  `url:"upid",json:"upid"`
	Node       string  `url:"node",json:"node"`
	Pid        int     `url:"pid",json:"pid"`
	Starttime  float64 `url:"starttime",json:"starttime"`
}

// ReadTaskStatus Read task status.
func (c *Client) ReadTaskStatus(ctx context.Context, req *ReadTaskStatusRequest) (*ReadTaskStatusResponse, error) {
	var resp *ReadTaskStatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/tasks/{upid}/status", "GET", &resp, req)
	return resp, err
}
