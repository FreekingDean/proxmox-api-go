// File generated by proxmox json schema, DO NOT EDIT

package apt

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*struct {
	Id string `url:"id",json:"id"`
}

// Index Directory index for apt (Advanced Package Tool).
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt", "GET", &resp, req)
	return resp, err
}

type UpdateDatabaseUpdateRequest struct {
	Node   string `url:"node",json:"node"`
	Notify *bool  `url:"notify,omitempty",json:"notify,omitempty"`
	Quiet  *bool  `url:"quiet,omitempty",json:"quiet,omitempty"`
}

type UpdateDatabaseUpdateResponse string

// UpdateDatabaseUpdate This is used to resynchronize the package index files from their sources (apt-get update).
func (c *Client) UpdateDatabaseUpdate(ctx context.Context, req *UpdateDatabaseUpdateRequest) (*UpdateDatabaseUpdateResponse, error) {
	var resp *UpdateDatabaseUpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/update", "POST", &resp, req)
	return resp, err
}

type ListUpdatesUpdateRequest struct {
	Node string `url:"node",json:"node"`
}

type ListUpdatesUpdateResponse []*map[string]interface{}

// ListUpdatesUpdate List available updates.
func (c *Client) ListUpdatesUpdate(ctx context.Context, req *ListUpdatesUpdateRequest) (*ListUpdatesUpdateResponse, error) {
	var resp *ListUpdatesUpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/update", "GET", &resp, req)
	return resp, err
}

type ChangelogRequest struct {
	Name    string  `url:"name",json:"name"`
	Node    string  `url:"node",json:"node"`
	Version *string `url:"version,omitempty",json:"version,omitempty"`
}

type ChangelogResponse string

// Changelog Get package changelogs.
func (c *Client) Changelog(ctx context.Context, req *ChangelogRequest) (*ChangelogResponse, error) {
	var resp *ChangelogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/changelog", "GET", &resp, req)
	return resp, err
}

type RepositoriesRequest struct {
	Node string `url:"node",json:"node"`
}

type RepositoriesResponse struct {
	Files []*struct {
		Digest       []int  `url:"digest",json:"digest"`
		FileType     string `url:"file-type",json:"file-type"`
		Path         string `url:"path",json:"path"`
		Repositories []*struct {
			Suites     []string `url:"Suites",json:"Suites"`
			Types      []string `url:"Types",json:"Types"`
			Uris       []string `url:"URIs",json:"URIs"`
			Comment    *string  `url:"Comment,omitempty",json:"Comment,omitempty"`
			Components []string `url:"Components,omitempty",json:"Components,omitempty"`
			Enabled    bool     `url:"Enabled",json:"Enabled"`
			Filetype   string   `url:"FileType",json:"FileType"`
			Options    []*struct {
				Key    string   `url:"Key",json:"Key"`
				Values []string `url:"Values",json:"Values"`
			} `url:"Options,omitempty",json:"Options,omitempty"`
		} `url:"repositories",json:"repositories"`
	} `url:"files",json:"files"`
	Infos []*struct {
		Kind     string  `url:"kind",json:"kind"`
		Message  string  `url:"message",json:"message"`
		Path     string  `url:"path",json:"path"`
		Property *string `url:"property,omitempty",json:"property,omitempty"`
		Index    string  `url:"index",json:"index"`
	} `url:"infos",json:"infos"`
	StandardRepos []*struct {
		Handle string `url:"handle",json:"handle"`
		Name   string `url:"name",json:"name"`
		Status *bool  `url:"status,omitempty",json:"status,omitempty"`
	} `url:"standard-repos",json:"standard-repos"`
	Digest string `url:"digest",json:"digest"`
	Errors []*struct {
		Error string `url:"error",json:"error"`
		Path  string `url:"path",json:"path"`
	} `url:"errors",json:"errors"`
}

// Repositories Get APT repository information.
func (c *Client) Repositories(ctx context.Context, req *RepositoriesRequest) (*RepositoriesResponse, error) {
	var resp *RepositoriesResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/repositories", "GET", &resp, req)
	return resp, err
}

type ChangeRepositoryRepositoriesRequest struct {
	Enabled *bool   `url:"enabled,omitempty",json:"enabled,omitempty"`
	Index   int     `url:"index",json:"index"`
	Node    string  `url:"node",json:"node"`
	Path    string  `url:"path",json:"path"`
	Digest  *string `url:"digest,omitempty",json:"digest,omitempty"`
}

type ChangeRepositoryRepositoriesResponse map[string]interface{}

// ChangeRepositoryRepositories Change the properties of a repository. Currently only allows enabling/disabling.
func (c *Client) ChangeRepositoryRepositories(ctx context.Context, req *ChangeRepositoryRepositoriesRequest) (*ChangeRepositoryRepositoriesResponse, error) {
	var resp *ChangeRepositoryRepositoriesResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/repositories", "POST", &resp, req)
	return resp, err
}

type AddRepositoryRepositoriesRequest struct {
	Digest *string `url:"digest,omitempty",json:"digest,omitempty"`
	Handle string  `url:"handle",json:"handle"`
	Node   string  `url:"node",json:"node"`
}

type AddRepositoryRepositoriesResponse map[string]interface{}

// AddRepositoryRepositories Add a standard repository to the configuration
func (c *Client) AddRepositoryRepositories(ctx context.Context, req *AddRepositoryRepositoriesRequest) (*AddRepositoryRepositoriesResponse, error) {
	var resp *AddRepositoryRepositoriesResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/repositories", "PUT", &resp, req)
	return resp, err
}

type VersionsRequest struct {
	Node string `url:"node",json:"node"`
}

type VersionsResponse []*map[string]interface{}

// Versions Get package information for important Proxmox packages.
func (c *Client) Versions(ctx context.Context, req *VersionsRequest) (*VersionsResponse, error) {
	var resp *VersionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/apt/versions", "GET", &resp, req)
	return resp, err
}
