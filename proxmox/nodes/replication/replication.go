// File generated by proxmox json schema, DO NOT EDIT

package replication

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Guest *int `url:"guest,omitempty" json:"guest,omitempty"` // Only list replication jobs for this guest.
}
type _IndexRequest IndexRequest

type IndexResponse struct {
	Id string `url:"id" json:"id"`
}
type _IndexResponse IndexResponse

type FindRequest struct {
	Id   string `url:"id" json:"id"`     // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
	Node string `url:"node" json:"node"` // The cluster node name.

}
type _FindRequest FindRequest

type JobStatusRequest struct {
	Id   string `url:"id" json:"id"`     // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
	Node string `url:"node" json:"node"` // The cluster node name.

}
type _JobStatusRequest JobStatusRequest

type ReadJobLogRequest struct {
	Id   string `url:"id" json:"id"`     // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Limit *int `url:"limit,omitempty" json:"limit,omitempty"`
	Start *int `url:"start,omitempty" json:"start,omitempty"`
}
type _ReadJobLogRequest ReadJobLogRequest

type ReadJobLogResponse struct {
	N int    `url:"n" json:"n"` // Line number
	T string `url:"t" json:"t"` // Line text

}
type _ReadJobLogResponse ReadJobLogResponse

type ScheduleNowRequest struct {
	Id   string `url:"id" json:"id"`     // Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
	Node string `url:"node" json:"node"` // The cluster node name.

}
type _ScheduleNowRequest ScheduleNowRequest

// Index List status of all replication jobs on this node.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/replication", "GET", &resp, req)
	return resp, err
}

// Find Directory index.
func (c *Client) Find(ctx context.Context, req FindRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/replication/{id}", "GET", &resp, req)
	return resp, err
}

// JobStatus Get replication job status.
func (c *Client) JobStatus(ctx context.Context, req JobStatusRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/replication/{id}/status", "GET", &resp, req)
	return resp, err
}

// ReadJobLog Read replication job log.
func (c *Client) ReadJobLog(ctx context.Context, req ReadJobLogRequest) ([]ReadJobLogResponse, error) {
	var resp []ReadJobLogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/replication/{id}/log", "GET", &resp, req)
	return resp, err
}

// ScheduleNow Schedule replication job to start as soon as possible.
func (c *Client) ScheduleNow(ctx context.Context, req ScheduleNowRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/replication/{id}/schedule_now", "POST", &resp, req)
	return resp, err
}
