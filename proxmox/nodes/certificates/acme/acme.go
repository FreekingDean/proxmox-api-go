// File generated by proxmox json schema, DO NOT EDIT

package acme

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type NewCertificateRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Force *util.PVEBool `url:"force,omitempty" json:"force,omitempty"` // Overwrite existing custom certificate.
}

type RenewCertificateRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Force *util.PVEBool `url:"force,omitempty" json:"force,omitempty"` // Force renewal even if expiry is more than 30 days away.
}

type RevokeCertificateRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

// Index ACME index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/acme", "GET", &resp, req)
	return resp, err
}

// NewCertificate Order a new certificate from ACME-compatible CA.
func (c *Client) NewCertificate(ctx context.Context, req NewCertificateRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/acme/certificate", "POST", &resp, req)
	return resp, err
}

// RenewCertificate Renew existing certificate from CA.
func (c *Client) RenewCertificate(ctx context.Context, req RenewCertificateRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/acme/certificate", "PUT", &resp, req)
	return resp, err
}

// RevokeCertificate Revoke existing certificate from CA.
func (c *Client) RevokeCertificate(ctx context.Context, req RevokeCertificateRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/acme/certificate", "DELETE", &resp, req)
	return resp, err
}
