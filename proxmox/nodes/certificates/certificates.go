// File generated by proxmox json schema, DO NOT EDIT

package certificates

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}
type _IndexRequest IndexRequest

type InfoRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}
type _InfoRequest InfoRequest

type InfoResponse struct {

	// The following parameters are optional
	Filename      *string   `url:"filename,omitempty" json:"filename,omitempty"`
	Fingerprint   *string   `url:"fingerprint,omitempty" json:"fingerprint,omitempty"`         // Certificate SHA 256 fingerprint.
	Issuer        *string   `url:"issuer,omitempty" json:"issuer,omitempty"`                   // Certificate issuer name.
	Notafter      *int      `url:"notafter,omitempty" json:"notafter,omitempty"`               // Certificate's notAfter timestamp (UNIX epoch).
	Notbefore     *int      `url:"notbefore,omitempty" json:"notbefore,omitempty"`             // Certificate's notBefore timestamp (UNIX epoch).
	Pem           *string   `url:"pem,omitempty" json:"pem,omitempty"`                         // Certificate in PEM format
	PublicKeyBits *int      `url:"public-key-bits,omitempty" json:"public-key-bits,omitempty"` // Certificate's public key size
	PublicKeyType *string   `url:"public-key-type,omitempty" json:"public-key-type,omitempty"` // Certificate's public key algorithm
	San           *[]string `url:"san,omitempty" json:"san,omitempty"`                         // List of Certificate's SubjectAlternativeName entries.
	Subject       *string   `url:"subject,omitempty" json:"subject,omitempty"`                 // Certificate subject name.
}
type _InfoResponse InfoResponse

type UploadCustomCertCustomRequest struct {
	Certificates string `url:"certificates" json:"certificates"` // PEM encoded certificate (chain).
	Node         string `url:"node" json:"node"`                 // The cluster node name.

	// The following parameters are optional
	Force   *util.PVEBool `url:"force,omitempty" json:"force,omitempty"`     // Overwrite existing custom or ACME certificate files.
	Key     *string       `url:"key,omitempty" json:"key,omitempty"`         // PEM encoded private key.
	Restart *util.PVEBool `url:"restart,omitempty" json:"restart,omitempty"` // Restart pveproxy.
}
type _UploadCustomCertCustomRequest UploadCustomCertCustomRequest

type UploadCustomCertCustomResponse struct {

	// The following parameters are optional
	Filename      *string   `url:"filename,omitempty" json:"filename,omitempty"`
	Fingerprint   *string   `url:"fingerprint,omitempty" json:"fingerprint,omitempty"`         // Certificate SHA 256 fingerprint.
	Issuer        *string   `url:"issuer,omitempty" json:"issuer,omitempty"`                   // Certificate issuer name.
	Notafter      *int      `url:"notafter,omitempty" json:"notafter,omitempty"`               // Certificate's notAfter timestamp (UNIX epoch).
	Notbefore     *int      `url:"notbefore,omitempty" json:"notbefore,omitempty"`             // Certificate's notBefore timestamp (UNIX epoch).
	Pem           *string   `url:"pem,omitempty" json:"pem,omitempty"`                         // Certificate in PEM format
	PublicKeyBits *int      `url:"public-key-bits,omitempty" json:"public-key-bits,omitempty"` // Certificate's public key size
	PublicKeyType *string   `url:"public-key-type,omitempty" json:"public-key-type,omitempty"` // Certificate's public key algorithm
	San           *[]string `url:"san,omitempty" json:"san,omitempty"`                         // List of Certificate's SubjectAlternativeName entries.
	Subject       *string   `url:"subject,omitempty" json:"subject,omitempty"`                 // Certificate subject name.
}
type _UploadCustomCertCustomResponse UploadCustomCertCustomResponse

type RemoveCustomCertCustomRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Restart *util.PVEBool `url:"restart,omitempty" json:"restart,omitempty"` // Restart pveproxy.
}
type _RemoveCustomCertCustomRequest RemoveCustomCertCustomRequest

// Index Node index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates", "GET", &resp, req)
	return resp, err
}

// Info Get information about node's certificates.
func (c *Client) Info(ctx context.Context, req InfoRequest) ([]InfoResponse, error) {
	var resp []InfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/info", "GET", &resp, req)
	return resp, err
}

// UploadCustomCertCustom Upload or update custom certificate chain and key.
func (c *Client) UploadCustomCertCustom(ctx context.Context, req UploadCustomCertCustomRequest) (UploadCustomCertCustomResponse, error) {
	var resp UploadCustomCertCustomResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/custom", "POST", &resp, req)
	return resp, err
}

// RemoveCustomCertCustom DELETE custom certificate chain and key.
func (c *Client) RemoveCustomCertCustom(ctx context.Context, req RemoveCustomCertCustomRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/custom", "DELETE", nil, req)
	return err
}
