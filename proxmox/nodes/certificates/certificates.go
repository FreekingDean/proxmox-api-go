// File generated by proxmox json schema, DO NOT EDIT

package certificates

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"` // The cluster node name.

}

type IndexResponse []*map[string]interface{}

// Index Node index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates", "GET", &resp, req)
	return resp, err
}

type InfoRequest struct {
	Node string `url:"node",json:"node"` // The cluster node name.

}

type InfoResponse []*map[string]interface{}

// Info Get information about node's certificates.
func (c *Client) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	var resp *InfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/info", "GET", &resp, req)
	return resp, err
}

type UploadCustomCertCustomRequest struct {
	Certificates string `url:"certificates",json:"certificates"` // PEM encoded certificate (chain).
	Node         string `url:"node",json:"node"`                 // The cluster node name.

	// The following parameters are optional
	Force   *bool   `url:"force,omitempty",json:"force,omitempty"`     // Overwrite existing custom or ACME certificate files.
	Key     *string `url:"key,omitempty",json:"key,omitempty"`         // PEM encoded private key.
	Restart *bool   `url:"restart,omitempty",json:"restart,omitempty"` // Restart pveproxy.
}

type UploadCustomCertCustomResponse map[string]interface{}

// UploadCustomCertCustom Upload or update custom certificate chain and key.
func (c *Client) UploadCustomCertCustom(ctx context.Context, req *UploadCustomCertCustomRequest) (*UploadCustomCertCustomResponse, error) {
	var resp *UploadCustomCertCustomResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/custom", "POST", &resp, req)
	return resp, err
}

type RemoveCustomCertCustomRequest struct {
	Node string `url:"node",json:"node"` // The cluster node name.

	// The following parameters are optional
	Restart *bool `url:"restart,omitempty",json:"restart,omitempty"` // Restart pveproxy.
}

type RemoveCustomCertCustomResponse map[string]interface{}

// RemoveCustomCertCustom DELETE custom certificate chain and key.
func (c *Client) RemoveCustomCertCustom(ctx context.Context, req *RemoveCustomCertCustomRequest) (*RemoveCustomCertCustomResponse, error) {
	var resp *RemoveCustomCertCustomResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/custom", "DELETE", &resp, req)
	return resp, err
}
