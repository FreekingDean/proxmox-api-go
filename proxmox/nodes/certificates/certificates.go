// File generated by proxmox json schema, DO NOT EDIT

package certificates

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*map[string]interface{}

// Index Node index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates", "GET", &resp, req)
	return resp, err
}

type InfoRequest struct {
	Node string `url:"node",json:"node"`
}

type InfoResponse []*struct {
	Filename      *string  `url:"filename,omitempty",json:"filename,omitempty"`
	Fingerprint   *string  `url:"fingerprint,omitempty",json:"fingerprint,omitempty"`
	Issuer        *string  `url:"issuer,omitempty",json:"issuer,omitempty"`
	Notbefore     *int     `url:"notbefore,omitempty",json:"notbefore,omitempty"`
	Pem           *string  `url:"pem,omitempty",json:"pem,omitempty"`
	San           []string `url:"san,omitempty",json:"san,omitempty"`
	Notafter      *int     `url:"notafter,omitempty",json:"notafter,omitempty"`
	PublicKeyBits *int     `url:"public-key-bits,omitempty",json:"public-key-bits,omitempty"`
	PublicKeyType *string  `url:"public-key-type,omitempty",json:"public-key-type,omitempty"`
	Subject       *string  `url:"subject,omitempty",json:"subject,omitempty"`
}

// Info Get information about node's certificates.
func (c *Client) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	var resp *InfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/info", "GET", &resp, req)
	return resp, err
}

type RemoveCustomCertCustomRequest struct {
	Node    string `url:"node",json:"node"`
	Restart *bool  `url:"restart,omitempty",json:"restart,omitempty"`
}

type RemoveCustomCertCustomResponse map[string]interface{}

// RemoveCustomCertCustom DELETE custom certificate chain and key.
func (c *Client) RemoveCustomCertCustom(ctx context.Context, req *RemoveCustomCertCustomRequest) (*RemoveCustomCertCustomResponse, error) {
	var resp *RemoveCustomCertCustomResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/custom", "DELETE", &resp, req)
	return resp, err
}

type UploadCustomCertCustomRequest struct {
	Certificates string  `url:"certificates",json:"certificates"`
	Force        *bool   `url:"force,omitempty",json:"force,omitempty"`
	Key          *string `url:"key,omitempty",json:"key,omitempty"`
	Node         string  `url:"node",json:"node"`
	Restart      *bool   `url:"restart,omitempty",json:"restart,omitempty"`
}

type UploadCustomCertCustomResponse struct {
	Fingerprint   *string  `url:"fingerprint,omitempty",json:"fingerprint,omitempty"`
	Notafter      *int     `url:"notafter,omitempty",json:"notafter,omitempty"`
	Pem           *string  `url:"pem,omitempty",json:"pem,omitempty"`
	PublicKeyBits *int     `url:"public-key-bits,omitempty",json:"public-key-bits,omitempty"`
	Subject       *string  `url:"subject,omitempty",json:"subject,omitempty"`
	Filename      *string  `url:"filename,omitempty",json:"filename,omitempty"`
	Issuer        *string  `url:"issuer,omitempty",json:"issuer,omitempty"`
	Notbefore     *int     `url:"notbefore,omitempty",json:"notbefore,omitempty"`
	PublicKeyType *string  `url:"public-key-type,omitempty",json:"public-key-type,omitempty"`
	San           []string `url:"san,omitempty",json:"san,omitempty"`
}

// UploadCustomCertCustom Upload or update custom certificate chain and key.
func (c *Client) UploadCustomCertCustom(ctx context.Context, req *UploadCustomCertCustomRequest) (*UploadCustomCertCustomResponse, error) {
	var resp *UploadCustomCertCustomResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/certificates/custom", "POST", &resp, req)
	return resp, err
}
