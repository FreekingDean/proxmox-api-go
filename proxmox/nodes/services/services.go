// File generated by proxmox json schema, DO NOT EDIT

package services

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*map[string]interface{}

// Index Service list.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services", "GET", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node    string `url:"node",json:"node"`
	Service string `url:"service",json:"service"`
}

type FindResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Find Directory index
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}", "GET", &resp, req)
	return resp, err
}

type ServiceStateRequest struct {
	Node    string `url:"node",json:"node"`
	Service string `url:"service",json:"service"`
}

type ServiceStateResponse map[string]interface{}

// ServiceState Read service properties
func (c *Client) ServiceState(ctx context.Context, req *ServiceStateRequest) (*ServiceStateResponse, error) {
	var resp *ServiceStateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/state", "GET", &resp, req)
	return resp, err
}

type ServiceStartRequest struct {
	Service string `url:"service",json:"service"`
	Node    string `url:"node",json:"node"`
}

type ServiceStartResponse string

// ServiceStart Start service.
func (c *Client) ServiceStart(ctx context.Context, req *ServiceStartRequest) (*ServiceStartResponse, error) {
	var resp *ServiceStartResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/start", "POST", &resp, req)
	return resp, err
}

type ServiceStopRequest struct {
	Node    string `url:"node",json:"node"`
	Service string `url:"service",json:"service"`
}

type ServiceStopResponse string

// ServiceStop Stop service.
func (c *Client) ServiceStop(ctx context.Context, req *ServiceStopRequest) (*ServiceStopResponse, error) {
	var resp *ServiceStopResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/stop", "POST", &resp, req)
	return resp, err
}

type ServiceRestartRequest struct {
	Node    string `url:"node",json:"node"`
	Service string `url:"service",json:"service"`
}

type ServiceRestartResponse string

// ServiceRestart Hard restart service. Use reload if you want to reduce interruptions.
func (c *Client) ServiceRestart(ctx context.Context, req *ServiceRestartRequest) (*ServiceRestartResponse, error) {
	var resp *ServiceRestartResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/restart", "POST", &resp, req)
	return resp, err
}

type ServiceReloadRequest struct {
	Node    string `url:"node",json:"node"`
	Service string `url:"service",json:"service"`
}

type ServiceReloadResponse string

// ServiceReload Reload service. Falls back to restart if service cannot be reloaded.
func (c *Client) ServiceReload(ctx context.Context, req *ServiceReloadRequest) (*ServiceReloadResponse, error) {
	var resp *ServiceReloadResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/reload", "POST", &resp, req)
	return resp, err
}
