// File generated by proxmox json schema, DO NOT EDIT

package services

import (
	"context"
)

const (
	Service_CHRONY            Service = "chrony"
	Service_COROSYNC          Service = "corosync"
	Service_CRON              Service = "cron"
	Service_KSMTUNED          Service = "ksmtuned"
	Service_POSTFIX           Service = "postfix"
	Service_PVE_CLUSTER       Service = "pve-cluster"
	Service_PVE_FIREWALL      Service = "pve-firewall"
	Service_PVE_HA_CRM        Service = "pve-ha-crm"
	Service_PVE_HA_LRM        Service = "pve-ha-lrm"
	Service_PVEDAEMON         Service = "pvedaemon"
	Service_PVEFW_LOGGER      Service = "pvefw-logger"
	Service_PVEPROXY          Service = "pveproxy"
	Service_PVESCHEDULER      Service = "pvescheduler"
	Service_PVESTATD          Service = "pvestatd"
	Service_SPICEPROXY        Service = "spiceproxy"
	Service_SSHD              Service = "sshd"
	Service_SYSLOG            Service = "syslog"
	Service_SYSTEMD_JOURNALD  Service = "systemd-journald"
	Service_SYSTEMD_TIMESYNCD Service = "systemd-timesyncd"
)

type Service string

func PtrService(i Service) *Service {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type FindRequest struct {
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service ID

}

type FindResponse struct {
	Subdir string `url:"subdir" json:"subdir"`
}

type ServiceStateRequest struct {
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service ID

}

type ServiceStartRequest struct {
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service ID

}

type ServiceStopRequest struct {
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service ID

}

type ServiceRestartRequest struct {
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service ID

}

type ServiceReloadRequest struct {
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Service Service `url:"service" json:"service"` // Service ID

}

// Index Service list.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/services", "GET", &resp, req)
	return resp, err
}

// Find Directory index
func (c *Client) Find(ctx context.Context, req FindRequest) ([]FindResponse, error) {
	var resp []FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}", "GET", &resp, req)
	return resp, err
}

// ServiceState Read service properties
func (c *Client) ServiceState(ctx context.Context, req ServiceStateRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/state", "GET", &resp, req)
	return resp, err
}

// ServiceStart Start service.
func (c *Client) ServiceStart(ctx context.Context, req ServiceStartRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/start", "POST", &resp, req)
	return resp, err
}

// ServiceStop Stop service.
func (c *Client) ServiceStop(ctx context.Context, req ServiceStopRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/stop", "POST", &resp, req)
	return resp, err
}

// ServiceRestart Hard restart service. Use reload if you want to reduce interruptions.
func (c *Client) ServiceRestart(ctx context.Context, req ServiceRestartRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/restart", "POST", &resp, req)
	return resp, err
}

// ServiceReload Reload service. Falls back to restart if service cannot be reloaded.
func (c *Client) ServiceReload(ctx context.Context, req ServiceReloadRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/services/{service}/reload", "POST", &resp, req)
	return resp, err
}
