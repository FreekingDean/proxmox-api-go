// File generated by proxmox json schema, DO NOT EDIT

package zones

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type IndexResponse struct {
	Status string `url:"status" json:"status"` // Status of zone
	Zone   string `url:"zone" json:"zone"`     // The SDN zone object identifier.

}

type FindRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Zone string `url:"zone" json:"zone"` // The SDN zone object identifier.

}

type FindResponse struct {
	Subdir string `url:"subdir" json:"subdir"`
}

type IndexContentRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Zone string `url:"zone" json:"zone"` // The SDN zone object identifier.

}

type IndexContentResponse struct {
	Vnet string `url:"vnet" json:"vnet"` // Vnet identifier.

	// The following parameters are optional
	Status    *string `url:"status,omitempty" json:"status,omitempty"`       // Status.
	Statusmsg *string `url:"statusmsg,omitempty" json:"statusmsg,omitempty"` // Status details
}

// Index Get status for all zones.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/sdn/zones", "GET", &resp, req)
	return resp, err
}

// Find
func (c *Client) Find(ctx context.Context, req FindRequest) ([]FindResponse, error) {
	var resp []FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/sdn/zones/{zone}", "GET", &resp, req)
	return resp, err
}

// IndexContent List zone content.
func (c *Client) IndexContent(ctx context.Context, req IndexContentRequest) ([]IndexContentResponse, error) {
	var resp []IndexContentResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/sdn/zones/{zone}/content", "GET", &resp, req)
	return resp, err
}
