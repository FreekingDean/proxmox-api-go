// File generated by proxmox json schema, DO NOT EDIT

package scan

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*struct {
	Method string `url:"method",json:"method"`
}

// Index Index of available scan methods
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan", "GET", &resp, req)
	return resp, err
}

type NfsscanNfsRequest struct {
	Node   string `url:"node",json:"node"`
	Server string `url:"server",json:"server"`
}

type NfsscanNfsResponse []*struct {
	Options string `url:"options",json:"options"`
	Path    string `url:"path",json:"path"`
}

// NfsscanNfs Scan remote NFS server.
func (c *Client) NfsscanNfs(ctx context.Context, req *NfsscanNfsRequest) (*NfsscanNfsResponse, error) {
	var resp *NfsscanNfsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/nfs", "GET", &resp, req)
	return resp, err
}

type CifsscanCifsRequest struct {
	Domain   *string `url:"domain,omitempty",json:"domain,omitempty"`
	Node     string  `url:"node",json:"node"`
	Password *string `url:"password,omitempty",json:"password,omitempty"`
	Server   string  `url:"server",json:"server"`
	Username *string `url:"username,omitempty",json:"username,omitempty"`
}

type CifsscanCifsResponse []*struct {
	Description string `url:"description",json:"description"`
	Share       string `url:"share",json:"share"`
}

// CifsscanCifs Scan remote CIFS server.
func (c *Client) CifsscanCifs(ctx context.Context, req *CifsscanCifsRequest) (*CifsscanCifsResponse, error) {
	var resp *CifsscanCifsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/cifs", "GET", &resp, req)
	return resp, err
}

type PbsscanPbsRequest struct {
	Fingerprint *string `url:"fingerprint,omitempty",json:"fingerprint,omitempty"`
	Node        string  `url:"node",json:"node"`
	Password    string  `url:"password",json:"password"`
	Port        *int    `url:"port,omitempty",json:"port,omitempty"`
	Server      string  `url:"server",json:"server"`
	Username    string  `url:"username",json:"username"`
}

type PbsscanPbsResponse []*struct {
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Store   string  `url:"store",json:"store"`
}

// PbsscanPbs Scan remote Proxmox Backup Server.
func (c *Client) PbsscanPbs(ctx context.Context, req *PbsscanPbsRequest) (*PbsscanPbsResponse, error) {
	var resp *PbsscanPbsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/pbs", "GET", &resp, req)
	return resp, err
}

type GlusterfsscanGlusterfsRequest struct {
	Node   string `url:"node",json:"node"`
	Server string `url:"server",json:"server"`
}

type GlusterfsscanGlusterfsResponse []*struct {
	Volname string `url:"volname",json:"volname"`
}

// GlusterfsscanGlusterfs Scan remote GlusterFS server.
func (c *Client) GlusterfsscanGlusterfs(ctx context.Context, req *GlusterfsscanGlusterfsRequest) (*GlusterfsscanGlusterfsResponse, error) {
	var resp *GlusterfsscanGlusterfsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/glusterfs", "GET", &resp, req)
	return resp, err
}

type IscsiscanIscsiRequest struct {
	Portal string `url:"portal",json:"portal"`
	Node   string `url:"node",json:"node"`
}

type IscsiscanIscsiResponse []*struct {
	Portal string `url:"portal",json:"portal"`
	Target string `url:"target",json:"target"`
}

// IscsiscanIscsi Scan remote iSCSI server.
func (c *Client) IscsiscanIscsi(ctx context.Context, req *IscsiscanIscsiRequest) (*IscsiscanIscsiResponse, error) {
	var resp *IscsiscanIscsiResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/iscsi", "GET", &resp, req)
	return resp, err
}

type LvmscanLvmRequest struct {
	Node string `url:"node",json:"node"`
}

type LvmscanLvmResponse []*struct {
	Vg string `url:"vg",json:"vg"`
}

// LvmscanLvm List local LVM volume groups.
func (c *Client) LvmscanLvm(ctx context.Context, req *LvmscanLvmRequest) (*LvmscanLvmResponse, error) {
	var resp *LvmscanLvmResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/lvm", "GET", &resp, req)
	return resp, err
}

type LvmthinscanLvmthinRequest struct {
	Node string `url:"node",json:"node"`
	Vg   string `url:"vg",json:"vg"`
}

type LvmthinscanLvmthinResponse []*struct {
	Lv string `url:"lv",json:"lv"`
}

// LvmthinscanLvmthin List local LVM Thin Pools.
func (c *Client) LvmthinscanLvmthin(ctx context.Context, req *LvmthinscanLvmthinRequest) (*LvmthinscanLvmthinResponse, error) {
	var resp *LvmthinscanLvmthinResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/lvmthin", "GET", &resp, req)
	return resp, err
}

type ZfsscanZfsRequest struct {
	Node string `url:"node",json:"node"`
}

type ZfsscanZfsResponse []*struct {
	Pool string `url:"pool",json:"pool"`
}

// ZfsscanZfs Scan zfs pool list on local node.
func (c *Client) ZfsscanZfs(ctx context.Context, req *ZfsscanZfsRequest) (*ZfsscanZfsResponse, error) {
	var resp *ZfsscanZfsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/scan/zfs", "GET", &resp, req)
	return resp, err
}
