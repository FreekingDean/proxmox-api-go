// File generated by proxmox json schema, DO NOT EDIT

package pci

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node              string  `url:"node",json:"node"`
	PciClassBlacklist *string `url:"pci-class-blacklist,omitempty",json:"pci-class-blacklist,omitempty"`
	Verbose           *bool   `url:"verbose,omitempty",json:"verbose,omitempty"`
}

type IndexResponse []*struct {
	DeviceName          *string `url:"device_name,omitempty",json:"device_name,omitempty"`
	Id                  string  `url:"id",json:"id"`
	Iommugroup          int     `url:"iommugroup",json:"iommugroup"`
	Mdev                *bool   `url:"mdev,omitempty",json:"mdev,omitempty"`
	SubsystemDevice     *string `url:"subsystem_device,omitempty",json:"subsystem_device,omitempty"`
	SubsystemDeviceName *string `url:"subsystem_device_name,omitempty",json:"subsystem_device_name,omitempty"`
	Class               string  `url:"class",json:"class"`
	Device              string  `url:"device",json:"device"`
	SubsystemVendorName *string `url:"subsystem_vendor_name,omitempty",json:"subsystem_vendor_name,omitempty"`
	VendorName          *string `url:"vendor_name,omitempty",json:"vendor_name,omitempty"`
	SubsystemVendor     *string `url:"subsystem_vendor,omitempty",json:"subsystem_vendor,omitempty"`
	Vendor              string  `url:"vendor",json:"vendor"`
}

// Index List local PCI devices.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/hardware/pci", "GET", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node  string `url:"node",json:"node"`
	Pciid string `url:"pciid",json:"pciid"`
}

type FindResponse []*struct {
	Method string `url:"method",json:"method"`
}

// Find Index of available pci methods
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/hardware/pci/{pciid}", "GET", &resp, req)
	return resp, err
}

type MdevscanMdevRequest struct {
	Node  string `url:"node",json:"node"`
	Pciid string `url:"pciid",json:"pciid"`
}

type MdevscanMdevResponse []*struct {
	Available   int    `url:"available",json:"available"`
	Description string `url:"description",json:"description"`
	Type        string `url:"type",json:"type"`
}

// MdevscanMdev List mediated device types for given PCI device.
func (c *Client) MdevscanMdev(ctx context.Context, req *MdevscanMdevRequest) (*MdevscanMdevResponse, error) {
	var resp *MdevscanMdevResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/hardware/pci/{pciid}/mdev", "GET", &resp, req)
	return resp, err
}
