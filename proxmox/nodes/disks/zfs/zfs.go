// File generated by proxmox json schema, DO NOT EDIT

package zfs

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*struct {
	Alloc  int     `url:"alloc",json:"alloc"`
	Dedup  float64 `url:"dedup",json:"dedup"`
	Frag   int     `url:"frag",json:"frag"`
	Free   int     `url:"free",json:"free"`
	Health string  `url:"health",json:"health"`
	Name   string  `url:"name",json:"name"`
	Size   int     `url:"size",json:"size"`
}

// Index List Zpools.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/zfs", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Compression *string `url:"compression,omitempty",json:"compression,omitempty"`
	Devices     string  `url:"devices",json:"devices"`
	DraidConfig *string `url:"draid-config,omitempty",json:"draid-config,omitempty"`
	Name        string  `url:"name",json:"name"`
	Node        string  `url:"node",json:"node"`
	Raidlevel   string  `url:"raidlevel",json:"raidlevel"`
	AddStorage  *bool   `url:"add_storage,omitempty",json:"add_storage,omitempty"`
	Ashift      *int    `url:"ashift,omitempty",json:"ashift,omitempty"`
}

type CreateResponse string

// Create Create a ZFS pool.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/zfs", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Name string `url:"name",json:"name"`
	Node string `url:"node",json:"node"`
}

type FindResponse struct {
	Errors   string  `url:"errors",json:"errors"`
	Name     string  `url:"name",json:"name"`
	Scan     *string `url:"scan,omitempty",json:"scan,omitempty"`
	State    string  `url:"state",json:"state"`
	Status   *string `url:"status,omitempty",json:"status,omitempty"`
	Action   *string `url:"action,omitempty",json:"action,omitempty"`
	Children []*struct {
		Msg   string   `url:"msg",json:"msg"`
		Name  string   `url:"name",json:"name"`
		Read  *float64 `url:"read,omitempty",json:"read,omitempty"`
		State *string  `url:"state,omitempty",json:"state,omitempty"`
		Write *float64 `url:"write,omitempty",json:"write,omitempty"`
		Cksum *float64 `url:"cksum,omitempty",json:"cksum,omitempty"`
	} `url:"children",json:"children"`
}

// Find Get details about a zpool.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/zfs/{name}", "GET", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	CleanupConfig *bool  `url:"cleanup-config,omitempty",json:"cleanup-config,omitempty"`
	CleanupDisks  *bool  `url:"cleanup-disks,omitempty",json:"cleanup-disks,omitempty"`
	Name          string `url:"name",json:"name"`
	Node          string `url:"node",json:"node"`
}

type DeleteResponse string

// Delete Destroy a ZFS pool.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/zfs/{name}", "DELETE", &resp, req)
	return resp, err
}
