// File generated by proxmox json schema, DO NOT EDIT

package lvmthin

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"` // The cluster node name.

}

type IndexResponse []*struct {
	Lv           string `url:"lv",json:"lv"`                       // The name of the thinpool.
	LvSize       int    `url:"lv_size",json:"lv_size"`             // The size of the thinpool in bytes.
	MetadataSize int    `url:"metadata_size",json:"metadata_size"` // The size of the metadata lv in bytes.
	MetadataUsed int    `url:"metadata_used",json:"metadata_used"` // The used bytes of the metadata lv.
	Used         int    `url:"used",json:"used"`                   // The used bytes of the thinpool.
	Vg           string `url:"vg",json:"vg"`                       // The associated volume group.

}

// Index List LVM thinpools
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvmthin", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Device string `url:"device",json:"device"` // The block device you want to create the thinpool on.
	Name   string `url:"name",json:"name"`     // The storage identifier.
	Node   string `url:"node",json:"node"`     // The cluster node name.

	// The following parameters are optional
	AddStorage *bool `url:"add_storage,omitempty",json:"add_storage,omitempty"` // Configure storage using the thinpool.
}

type CreateResponse string

// Create Create an LVM thinpool
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvmthin", "POST", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Name        string `url:"name",json:"name"`                 // The storage identifier.
	Node        string `url:"node",json:"node"`                 // The cluster node name.
	VolumeGroup string `url:"volume-group",json:"volume-group"` // The storage identifier.

	// The following parameters are optional
	CleanupConfig *bool `url:"cleanup-config,omitempty",json:"cleanup-config,omitempty"` // Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only).
	CleanupDisks  *bool `url:"cleanup-disks,omitempty",json:"cleanup-disks,omitempty"`   // Also wipe disks so they can be repurposed afterwards.
}

type DeleteResponse string

// Delete Remove an LVM thin pool.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvmthin/{name}", "DELETE", &resp, req)
	return resp, err
}
