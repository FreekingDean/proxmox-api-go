// File generated by proxmox json schema, DO NOT EDIT

package lvm

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse struct {
	Leaf     bool `url:"leaf",json:"leaf"`
	Children []*struct {
		Name     string `url:"name",json:"name"`
		Size     int    `url:"size",json:"size"`
		Children []*struct {
			Name string `url:"name",json:"name"`
			Size int    `url:"size",json:"size"`
			Free int    `url:"free",json:"free"`
			Leaf bool   `url:"leaf",json:"leaf"`
		} `url:"children,omitempty",json:"children,omitempty"`
		Free int  `url:"free",json:"free"`
		Leaf bool `url:"leaf",json:"leaf"`
	} `url:"children",json:"children"`
}

// Index List LVM Volume Groups
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvm", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	AddStorage *bool  `url:"add_storage,omitempty",json:"add_storage,omitempty"`
	Device     string `url:"device",json:"device"`
	Name       string `url:"name",json:"name"`
	Node       string `url:"node",json:"node"`
}

type CreateResponse string

// Create Create an LVM Volume Group
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvm", "POST", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Node          string `url:"node",json:"node"`
	CleanupConfig *bool  `url:"cleanup-config,omitempty",json:"cleanup-config,omitempty"`
	CleanupDisks  *bool  `url:"cleanup-disks,omitempty",json:"cleanup-disks,omitempty"`
	Name          string `url:"name",json:"name"`
}

type DeleteResponse string

// Delete Remove an LVM Volume Group.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvm/{name}", "DELETE", &resp, req)
	return resp, err
}
