// File generated by proxmox json schema, DO NOT EDIT

package lvm

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"` // The cluster node name.

}

type IndexResponse struct {
	Children []*struct {
		Free int    `url:"free",json:"free"` // The free bytes in the volume group
		Leaf bool   `url:"leaf",json:"leaf"`
		Name string `url:"name",json:"name"` // The name of the volume group
		Size int    `url:"size",json:"size"` // The size of the volume group in bytes

		// The following parameters are optional
		Children []*struct {
			Free int    `url:"free",json:"free"` // The free bytes in the physical volume
			Leaf bool   `url:"leaf",json:"leaf"`
			Name string `url:"name",json:"name"` // The name of the physical volume
			Size int    `url:"size",json:"size"` // The size of the physical volume in bytes

		} `url:"children,omitempty",json:"children,omitempty"` // The underlying physical volumes
	} `url:"children",json:"children"`
	Leaf bool `url:"leaf",json:"leaf"`
}

// Index List LVM Volume Groups
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvm", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Device string `url:"device",json:"device"` // The block device you want to create the volume group on
	Name   string `url:"name",json:"name"`     // The storage identifier.
	Node   string `url:"node",json:"node"`     // The cluster node name.

	// The following parameters are optional
	AddStorage *bool `url:"add_storage,omitempty",json:"add_storage,omitempty"` // Configure storage using the Volume Group
}

type CreateResponse string

// Create Create an LVM Volume Group
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvm", "POST", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Name string `url:"name",json:"name"` // The storage identifier.
	Node string `url:"node",json:"node"` // The cluster node name.

	// The following parameters are optional
	CleanupConfig *bool `url:"cleanup-config,omitempty",json:"cleanup-config,omitempty"` // Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only).
	CleanupDisks  *bool `url:"cleanup-disks,omitempty",json:"cleanup-disks,omitempty"`   // Also wipe disks so they can be repurposed afterwards.
}

type DeleteResponse string

// Delete Remove an LVM Volume Group.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/disks/lvm/{name}", "DELETE", &resp, req)
	return resp, err
}
