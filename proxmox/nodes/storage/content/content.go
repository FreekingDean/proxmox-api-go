// File generated by proxmox json schema, DO NOT EDIT

package content

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Storage string  `url:"storage",json:"storage"`
	Vmid    *int    `url:"vmid,omitempty",json:"vmid,omitempty"`
	Content *string `url:"content,omitempty",json:"content,omitempty"`
	Node    string  `url:"node",json:"node"`
}

type IndexResponse []*struct {
	Parent       *string `url:"parent,omitempty",json:"parent,omitempty"`
	Used         *int    `url:"used,omitempty",json:"used,omitempty"`
	Verification struct {
		State string `url:"state",json:"state"`
		Upid  string `url:"upid",json:"upid"`
	} `url:"verification,omitempty",json:"verification,omitempty"`
	Ctime     *int    `url:"ctime,omitempty",json:"ctime,omitempty"`
	Format    string  `url:"format",json:"format"`
	Protected *bool   `url:"protected,omitempty",json:"protected,omitempty"`
	Size      int     `url:"size",json:"size"`
	Vmid      *int    `url:"vmid,omitempty",json:"vmid,omitempty"`
	Volid     string  `url:"volid",json:"volid"`
	Encrypted *string `url:"encrypted,omitempty",json:"encrypted,omitempty"`
	Notes     *string `url:"notes,omitempty",json:"notes,omitempty"`
}

// Index List storage content.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/content", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Vmid     int     `url:"vmid",json:"vmid"`
	Filename string  `url:"filename",json:"filename"`
	Format   *string `url:"format,omitempty",json:"format,omitempty"`
	Node     string  `url:"node",json:"node"`
	Size     string  `url:"size",json:"size"`
	Storage  string  `url:"storage",json:"storage"`
}

type CreateResponse string

// Create Allocate disk images.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/content", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node    string  `url:"node",json:"node"`
	Storage *string `url:"storage,omitempty",json:"storage,omitempty"`
	Volume  string  `url:"volume",json:"volume"`
}

type FindResponse struct {
	Format    string  `url:"format",json:"format"`
	Notes     *string `url:"notes,omitempty",json:"notes,omitempty"`
	Path      string  `url:"path",json:"path"`
	Protected *bool   `url:"protected,omitempty",json:"protected,omitempty"`
	Size      int     `url:"size",json:"size"`
	Used      int     `url:"used",json:"used"`
}

// Find Get volume attributes
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/content/{volume}", "GET", &resp, req)
	return resp, err
}

type ChildCreateRequest struct {
	Node       string  `url:"node",json:"node"`
	Storage    *string `url:"storage,omitempty",json:"storage,omitempty"`
	Target     string  `url:"target",json:"target"`
	TargetNode *string `url:"target_node,omitempty",json:"target_node,omitempty"`
	Volume     string  `url:"volume",json:"volume"`
}

type ChildCreateResponse string

// ChildCreate Copy a volume. This is experimental code - do not use.
func (c *Client) ChildCreate(ctx context.Context, req *ChildCreateRequest) (*ChildCreateResponse, error) {
	var resp *ChildCreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/content/{volume}", "POST", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Node      string  `url:"node",json:"node"`
	Notes     *string `url:"notes,omitempty",json:"notes,omitempty"`
	Protected *bool   `url:"protected,omitempty",json:"protected,omitempty"`
	Storage   *string `url:"storage,omitempty",json:"storage,omitempty"`
	Volume    string  `url:"volume",json:"volume"`
}

type UpdateResponse map[string]interface{}

// Update Update volume attributes
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/content/{volume}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Delay   *int    `url:"delay,omitempty",json:"delay,omitempty"`
	Node    string  `url:"node",json:"node"`
	Storage *string `url:"storage,omitempty",json:"storage,omitempty"`
	Volume  string  `url:"volume",json:"volume"`
}

type DeleteResponse *string

// Delete Delete volume
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/content/{volume}", "DELETE", &resp, req)
	return resp, err
}
