// File generated by proxmox json schema, DO NOT EDIT

package storage

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Content *string `url:"content,omitempty",json:"content,omitempty"`
	Enabled *bool   `url:"enabled,omitempty",json:"enabled,omitempty"`
	Format  *bool   `url:"format,omitempty",json:"format,omitempty"`
	Node    string  `url:"node",json:"node"`
	Storage *string `url:"storage,omitempty",json:"storage,omitempty"`
	Target  *string `url:"target,omitempty",json:"target,omitempty"`
}

type IndexResponse []*struct {
	Active       *bool    `url:"active,omitempty",json:"active,omitempty"`
	Content      string   `url:"content",json:"content"`
	Enabled      *bool    `url:"enabled,omitempty",json:"enabled,omitempty"`
	Storage      string   `url:"storage",json:"storage"`
	Type         string   `url:"type",json:"type"`
	UsedFraction *float64 `url:"used_fraction,omitempty",json:"used_fraction,omitempty"`
	Avail        *int     `url:"avail,omitempty",json:"avail,omitempty"`
	Shared       *bool    `url:"shared,omitempty",json:"shared,omitempty"`
	Total        *int     `url:"total,omitempty",json:"total,omitempty"`
	Used         *int     `url:"used,omitempty",json:"used,omitempty"`
}

// Index Get status for all datastores.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage", "GET", &resp, req)
	return resp, err
}

type FindRequest struct {
	Storage string `url:"storage",json:"storage"`
	Node    string `url:"node",json:"node"`
}

type FindResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Find
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}", "GET", &resp, req)
	return resp, err
}

type DeletePrunebackupsRequest struct {
	Vmid         *int    `url:"vmid,omitempty",json:"vmid,omitempty"`
	Node         string  `url:"node",json:"node"`
	PruneBackups *string `url:"prune-backups,omitempty",json:"prune-backups,omitempty"`
	Storage      string  `url:"storage",json:"storage"`
	Type         *string `url:"type,omitempty",json:"type,omitempty"`
}

type DeletePrunebackupsResponse string

// DeletePrunebackups Prune backups. Only those using the standard naming scheme are considered.
func (c *Client) DeletePrunebackups(ctx context.Context, req *DeletePrunebackupsRequest) (*DeletePrunebackupsResponse, error) {
	var resp *DeletePrunebackupsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/prunebackups", "DELETE", &resp, req)
	return resp, err
}

type DryrunPrunebackupsRequest struct {
	Type         *string `url:"type,omitempty",json:"type,omitempty"`
	Vmid         *int    `url:"vmid,omitempty",json:"vmid,omitempty"`
	Node         string  `url:"node",json:"node"`
	PruneBackups *string `url:"prune-backups,omitempty",json:"prune-backups,omitempty"`
	Storage      string  `url:"storage",json:"storage"`
}

type DryrunPrunebackupsResponse []*struct {
	Mark  string `url:"mark",json:"mark"`
	Type  string `url:"type",json:"type"`
	Vmid  *int   `url:"vmid,omitempty",json:"vmid,omitempty"`
	Volid string `url:"volid",json:"volid"`
	Ctime int    `url:"ctime",json:"ctime"`
}

// DryrunPrunebackups Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.
func (c *Client) DryrunPrunebackups(ctx context.Context, req *DryrunPrunebackupsRequest) (*DryrunPrunebackupsResponse, error) {
	var resp *DryrunPrunebackupsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/prunebackups", "GET", &resp, req)
	return resp, err
}

type ReadStatusRequest struct {
	Node    string `url:"node",json:"node"`
	Storage string `url:"storage",json:"storage"`
}

type ReadStatusResponse map[string]interface{}

// ReadStatus Read storage status.
func (c *Client) ReadStatus(ctx context.Context, req *ReadStatusRequest) (*ReadStatusResponse, error) {
	var resp *ReadStatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/status", "GET", &resp, req)
	return resp, err
}

type RrdRequest struct {
	Ds        string  `url:"ds",json:"ds"`
	Node      string  `url:"node",json:"node"`
	Storage   string  `url:"storage",json:"storage"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
}

type RrdResponse struct {
	Filename string `url:"filename",json:"filename"`
}

// Rrd Read storage RRD statistics (returns PNG).
func (c *Client) Rrd(ctx context.Context, req *RrdRequest) (*RrdResponse, error) {
	var resp *RrdResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/rrd", "GET", &resp, req)
	return resp, err
}

type RrddataRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Node      string  `url:"node",json:"node"`
	Storage   string  `url:"storage",json:"storage"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
}

type RrddataResponse []*map[string]interface{}

// Rrddata Read storage RRD statistics.
func (c *Client) Rrddata(ctx context.Context, req *RrddataRequest) (*RrddataResponse, error) {
	var resp *RrddataResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/rrddata", "GET", &resp, req)
	return resp, err
}

type UploadRequest struct {
	Checksum          *string `url:"checksum,omitempty",json:"checksum,omitempty"`
	ChecksumAlgorithm *string `url:"checksum-algorithm,omitempty",json:"checksum-algorithm,omitempty"`
	Content           string  `url:"content",json:"content"`
	Filename          string  `url:"filename",json:"filename"`
	Node              string  `url:"node",json:"node"`
	Storage           string  `url:"storage",json:"storage"`
	Tmpfilename       *string `url:"tmpfilename,omitempty",json:"tmpfilename,omitempty"`
}

type UploadResponse string

// Upload Upload templates and ISO images.
func (c *Client) Upload(ctx context.Context, req *UploadRequest) (*UploadResponse, error) {
	var resp *UploadResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/upload", "POST", &resp, req)
	return resp, err
}

type DownloadUrlRequest struct {
	VerifyCertificates *bool   `url:"verify-certificates,omitempty",json:"verify-certificates,omitempty"`
	Checksum           *string `url:"checksum,omitempty",json:"checksum,omitempty"`
	ChecksumAlgorithm  *string `url:"checksum-algorithm,omitempty",json:"checksum-algorithm,omitempty"`
	Content            string  `url:"content",json:"content"`
	Filename           string  `url:"filename",json:"filename"`
	Node               string  `url:"node",json:"node"`
	Storage            string  `url:"storage",json:"storage"`
	Url                string  `url:"url",json:"url"`
}

type DownloadUrlResponse string

// DownloadUrl Download templates and ISO images by using an URL.
func (c *Client) DownloadUrl(ctx context.Context, req *DownloadUrlRequest) (*DownloadUrlResponse, error) {
	var resp *DownloadUrlResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/storage/{storage}/download-url", "POST", &resp, req)
	return resp, err
}
