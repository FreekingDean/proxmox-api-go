// File generated by proxmox json schema, DO NOT EDIT

package network

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string  `url:"node",json:"node"`
	Type *string `url:"type,omitempty",json:"type,omitempty"`
}

type IndexResponse []*map[string]interface{}

// Index List available networks
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	BridgePorts        *string `url:"bridge_ports,omitempty",json:"bridge_ports,omitempty"`
	BridgeVlanAware    *bool   `url:"bridge_vlan_aware,omitempty",json:"bridge_vlan_aware,omitempty"`
	Gateway6           *string `url:"gateway6,omitempty",json:"gateway6,omitempty"`
	Mtu                *int    `url:"mtu,omitempty",json:"mtu,omitempty"`
	OvsBonds           *string `url:"ovs_bonds,omitempty",json:"ovs_bonds,omitempty"`
	OvsBridge          *string `url:"ovs_bridge,omitempty",json:"ovs_bridge,omitempty"`
	VlanId             *int    `url:"vlan-id,omitempty",json:"vlan-id,omitempty"`
	Address6           *string `url:"address6,omitempty",json:"address6,omitempty"`
	Iface              string  `url:"iface",json:"iface"`
	Slaves             *string `url:"slaves,omitempty",json:"slaves,omitempty"`
	Address            *string `url:"address,omitempty",json:"address,omitempty"`
	Cidr               *string `url:"cidr,omitempty",json:"cidr,omitempty"`
	Comments6          *string `url:"comments6,omitempty",json:"comments6,omitempty"`
	Node               string  `url:"node",json:"node"`
	Comments           *string `url:"comments,omitempty",json:"comments,omitempty"`
	Gateway            *string `url:"gateway,omitempty",json:"gateway,omitempty"`
	OvsPorts           *string `url:"ovs_ports,omitempty",json:"ovs_ports,omitempty"`
	Netmask            *string `url:"netmask,omitempty",json:"netmask,omitempty"`
	VlanRawDevice      *string `url:"vlan-raw-device,omitempty",json:"vlan-raw-device,omitempty"`
	BondPrimary        *string `url:"bond-primary,omitempty",json:"bond-primary,omitempty"`
	BondXmitHashPolicy *string `url:"bond_xmit_hash_policy,omitempty",json:"bond_xmit_hash_policy,omitempty"`
	Cidr6              *string `url:"cidr6,omitempty",json:"cidr6,omitempty"`
	OvsTag             *int    `url:"ovs_tag,omitempty",json:"ovs_tag,omitempty"`
	Type               string  `url:"type",json:"type"`
	Autostart          *bool   `url:"autostart,omitempty",json:"autostart,omitempty"`
	BondMode           *string `url:"bond_mode,omitempty",json:"bond_mode,omitempty"`
	Netmask6           *int    `url:"netmask6,omitempty",json:"netmask6,omitempty"`
	OvsOptions         *string `url:"ovs_options,omitempty",json:"ovs_options,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create network device configuration
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network", "POST", &resp, req)
	return resp, err
}

type MassUpdateRequest struct {
	Node string `url:"node",json:"node"`
}

type MassUpdateResponse string

// MassUpdate Reload network configuration
func (c *Client) MassUpdate(ctx context.Context, req *MassUpdateRequest) (*MassUpdateResponse, error) {
	var resp *MassUpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network", "PUT", &resp, req)
	return resp, err
}

type MassDeleteRequest struct {
	Node string `url:"node",json:"node"`
}

type MassDeleteResponse map[string]interface{}

// MassDelete Revert network configuration changes.
func (c *Client) MassDelete(ctx context.Context, req *MassDeleteRequest) (*MassDeleteResponse, error) {
	var resp *MassDeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network", "DELETE", &resp, req)
	return resp, err
}

type FindRequest struct {
	Iface string `url:"iface",json:"iface"`
	Node  string `url:"node",json:"node"`
}

type FindResponse struct {
	Method string `url:"method",json:"method"`
	Type   string `url:"type",json:"type"`
}

// Find Read network device configuration
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network/{iface}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	BridgeVlanAware    *bool   `url:"bridge_vlan_aware,omitempty",json:"bridge_vlan_aware,omitempty"`
	Gateway6           *string `url:"gateway6,omitempty",json:"gateway6,omitempty"`
	OvsOptions         *string `url:"ovs_options,omitempty",json:"ovs_options,omitempty"`
	OvsPorts           *string `url:"ovs_ports,omitempty",json:"ovs_ports,omitempty"`
	BondMode           *string `url:"bond_mode,omitempty",json:"bond_mode,omitempty"`
	Cidr               *string `url:"cidr,omitempty",json:"cidr,omitempty"`
	Netmask6           *int    `url:"netmask6,omitempty",json:"netmask6,omitempty"`
	Slaves             *string `url:"slaves,omitempty",json:"slaves,omitempty"`
	Type               string  `url:"type",json:"type"`
	Comments           *string `url:"comments,omitempty",json:"comments,omitempty"`
	Comments6          *string `url:"comments6,omitempty",json:"comments6,omitempty"`
	Gateway            *string `url:"gateway,omitempty",json:"gateway,omitempty"`
	OvsBonds           *string `url:"ovs_bonds,omitempty",json:"ovs_bonds,omitempty"`
	VlanId             *int    `url:"vlan-id,omitempty",json:"vlan-id,omitempty"`
	Autostart          *bool   `url:"autostart,omitempty",json:"autostart,omitempty"`
	BridgePorts        *string `url:"bridge_ports,omitempty",json:"bridge_ports,omitempty"`
	Address            *string `url:"address,omitempty",json:"address,omitempty"`
	BondXmitHashPolicy *string `url:"bond_xmit_hash_policy,omitempty",json:"bond_xmit_hash_policy,omitempty"`
	Cidr6              *string `url:"cidr6,omitempty",json:"cidr6,omitempty"`
	Delete             *string `url:"delete,omitempty",json:"delete,omitempty"`
	Netmask            *string `url:"netmask,omitempty",json:"netmask,omitempty"`
	OvsBridge          *string `url:"ovs_bridge,omitempty",json:"ovs_bridge,omitempty"`
	Mtu                *int    `url:"mtu,omitempty",json:"mtu,omitempty"`
	Node               string  `url:"node",json:"node"`
	OvsTag             *int    `url:"ovs_tag,omitempty",json:"ovs_tag,omitempty"`
	Address6           *string `url:"address6,omitempty",json:"address6,omitempty"`
	BondPrimary        *string `url:"bond-primary,omitempty",json:"bond-primary,omitempty"`
	Iface              string  `url:"iface",json:"iface"`
	VlanRawDevice      *string `url:"vlan-raw-device,omitempty",json:"vlan-raw-device,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update network device configuration
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network/{iface}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Iface string `url:"iface",json:"iface"`
	Node  string `url:"node",json:"node"`
}

type DeleteResponse map[string]interface{}

// Delete Delete network device configuration
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/network/{iface}", "DELETE", &resp, req)
	return resp, err
}
