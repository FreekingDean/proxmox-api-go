// File generated by proxmox json schema, DO NOT EDIT

package firewall

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type IndexResponse []*map[string]interface{}

// Index Directory index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall", "GET", &resp, req)
	return resp, err
}

type GetOptionsRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetOptionsResponse struct {
	Dhcp        *bool   `url:"dhcp,omitempty",json:"dhcp,omitempty"`
	Enable      *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	Ipfilter    *bool   `url:"ipfilter,omitempty",json:"ipfilter,omitempty"`
	LogLevelOut *string `url:"log_level_out,omitempty",json:"log_level_out,omitempty"`
	PolicyOut   *string `url:"policy_out,omitempty",json:"policy_out,omitempty"`
	LogLevelIn  *string `url:"log_level_in,omitempty",json:"log_level_in,omitempty"`
	Macfilter   *bool   `url:"macfilter,omitempty",json:"macfilter,omitempty"`
	Ndp         *bool   `url:"ndp,omitempty",json:"ndp,omitempty"`
	PolicyIn    *string `url:"policy_in,omitempty",json:"policy_in,omitempty"`
	Radv        *bool   `url:"radv,omitempty",json:"radv,omitempty"`
}

// GetOptions Get VM firewall options.
func (c *Client) GetOptions(ctx context.Context, req *GetOptionsRequest) (*GetOptionsResponse, error) {
	var resp *GetOptionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/options", "GET", &resp, req)
	return resp, err
}

type SetOptionsRequest struct {
	Dhcp        *bool   `url:"dhcp,omitempty",json:"dhcp,omitempty"`
	PolicyIn    *string `url:"policy_in,omitempty",json:"policy_in,omitempty"`
	Vmid        int     `url:"vmid",json:"vmid"`
	Delete      *string `url:"delete,omitempty",json:"delete,omitempty"`
	Digest      *string `url:"digest,omitempty",json:"digest,omitempty"`
	LogLevelIn  *string `url:"log_level_in,omitempty",json:"log_level_in,omitempty"`
	Macfilter   *bool   `url:"macfilter,omitempty",json:"macfilter,omitempty"`
	PolicyOut   *string `url:"policy_out,omitempty",json:"policy_out,omitempty"`
	Radv        *bool   `url:"radv,omitempty",json:"radv,omitempty"`
	Enable      *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	Ipfilter    *bool   `url:"ipfilter,omitempty",json:"ipfilter,omitempty"`
	LogLevelOut *string `url:"log_level_out,omitempty",json:"log_level_out,omitempty"`
	Ndp         *bool   `url:"ndp,omitempty",json:"ndp,omitempty"`
	Node        string  `url:"node",json:"node"`
}

type SetOptionsResponse map[string]interface{}

// SetOptions Set Firewall options.
func (c *Client) SetOptions(ctx context.Context, req *SetOptionsRequest) (*SetOptionsResponse, error) {
	var resp *SetOptionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/options", "PUT", &resp, req)
	return resp, err
}

type LogRequest struct {
	Limit *int   `url:"limit,omitempty",json:"limit,omitempty"`
	Node  string `url:"node",json:"node"`
	Start *int   `url:"start,omitempty",json:"start,omitempty"`
	Vmid  int    `url:"vmid",json:"vmid"`
}

type LogResponse []*struct {
	N int    `url:"n",json:"n"`
	T string `url:"t",json:"t"`
}

// Log Read firewall log
func (c *Client) Log(ctx context.Context, req *LogRequest) (*LogResponse, error) {
	var resp *LogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/log", "GET", &resp, req)
	return resp, err
}

type RefsRequest struct {
	Node string  `url:"node",json:"node"`
	Type *string `url:"type,omitempty",json:"type,omitempty"`
	Vmid int     `url:"vmid",json:"vmid"`
}

type RefsResponse []*struct {
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Name    string  `url:"name",json:"name"`
	Type    string  `url:"type",json:"type"`
}

// Refs Lists possible IPSet/Alias reference which are allowed in source/dest properties.
func (c *Client) Refs(ctx context.Context, req *RefsRequest) (*RefsResponse, error) {
	var resp *RefsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/refs", "GET", &resp, req)
	return resp, err
}
