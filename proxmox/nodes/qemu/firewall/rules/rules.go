// File generated by proxmox json schema, DO NOT EDIT

package rules

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type IndexResponse []*struct {
	Pos int `url:"pos",json:"pos"`
}

// Index List rules.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/rules", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Iface    *string `url:"iface,omitempty",json:"iface,omitempty"`
	Proto    *string `url:"proto,omitempty",json:"proto,omitempty"`
	Sport    *string `url:"sport,omitempty",json:"sport,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
	Action   string  `url:"action",json:"action"`
	Comment  *string `url:"comment,omitempty",json:"comment,omitempty"`
	Dest     *string `url:"dest,omitempty",json:"dest,omitempty"`
	Dport    *string `url:"dport,omitempty",json:"dport,omitempty"`
	IcmpType *string `url:"icmp-type,omitempty",json:"icmp-type,omitempty"`
	Source   *string `url:"source,omitempty",json:"source,omitempty"`
	Digest   *string `url:"digest,omitempty",json:"digest,omitempty"`
	Log      *string `url:"log,omitempty",json:"log,omitempty"`
	Node     string  `url:"node",json:"node"`
	Pos      *int    `url:"pos,omitempty",json:"pos,omitempty"`
	Type     string  `url:"type",json:"type"`
	Enable   *int    `url:"enable,omitempty",json:"enable,omitempty"`
	Macro    *string `url:"macro,omitempty",json:"macro,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create new rule.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/rules", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node string `url:"node",json:"node"`
	Pos  *int   `url:"pos,omitempty",json:"pos,omitempty"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FindResponse struct {
	Sport     *string `url:"sport,omitempty",json:"sport,omitempty"`
	Type      string  `url:"type",json:"type"`
	Dest      *string `url:"dest,omitempty",json:"dest,omitempty"`
	Enable    *int    `url:"enable,omitempty",json:"enable,omitempty"`
	Proto     *string `url:"proto,omitempty",json:"proto,omitempty"`
	Dport     *string `url:"dport,omitempty",json:"dport,omitempty"`
	Iface     *string `url:"iface,omitempty",json:"iface,omitempty"`
	Macro     *string `url:"macro,omitempty",json:"macro,omitempty"`
	Pos       int     `url:"pos",json:"pos"`
	Source    *string `url:"source,omitempty",json:"source,omitempty"`
	IcmpType  *string `url:"icmp-type,omitempty",json:"icmp-type,omitempty"`
	Log       *string `url:"log,omitempty",json:"log,omitempty"`
	Ipversion *int    `url:"ipversion,omitempty",json:"ipversion,omitempty"`
	Action    string  `url:"action",json:"action"`
	Comment   *string `url:"comment,omitempty",json:"comment,omitempty"`
}

// Find Get single rule data.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/rules/{pos}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Enable   *int    `url:"enable,omitempty",json:"enable,omitempty"`
	Node     string  `url:"node",json:"node"`
	Source   *string `url:"source,omitempty",json:"source,omitempty"`
	Moveto   *int    `url:"moveto,omitempty",json:"moveto,omitempty"`
	Pos      *int    `url:"pos,omitempty",json:"pos,omitempty"`
	Proto    *string `url:"proto,omitempty",json:"proto,omitempty"`
	Sport    *string `url:"sport,omitempty",json:"sport,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
	Delete   *string `url:"delete,omitempty",json:"delete,omitempty"`
	Dest     *string `url:"dest,omitempty",json:"dest,omitempty"`
	Digest   *string `url:"digest,omitempty",json:"digest,omitempty"`
	Type     *string `url:"type,omitempty",json:"type,omitempty"`
	Action   *string `url:"action,omitempty",json:"action,omitempty"`
	Comment  *string `url:"comment,omitempty",json:"comment,omitempty"`
	IcmpType *string `url:"icmp-type,omitempty",json:"icmp-type,omitempty"`
	Macro    *string `url:"macro,omitempty",json:"macro,omitempty"`
	Dport    *string `url:"dport,omitempty",json:"dport,omitempty"`
	Iface    *string `url:"iface,omitempty",json:"iface,omitempty"`
	Log      *string `url:"log,omitempty",json:"log,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Modify rule data.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/rules/{pos}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Digest *string `url:"digest,omitempty",json:"digest,omitempty"`
	Node   string  `url:"node",json:"node"`
	Pos    *int    `url:"pos,omitempty",json:"pos,omitempty"`
	Vmid   int     `url:"vmid",json:"vmid"`
}

type DeleteResponse map[string]interface{}

// Delete Delete rule.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/firewall/rules/{pos}", "DELETE", &resp, req)
	return resp, err
}
