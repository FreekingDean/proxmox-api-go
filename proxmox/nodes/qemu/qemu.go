// File generated by proxmox json schema, DO NOT EDIT

package qemu

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
	Full *bool  `url:"full,omitempty",json:"full,omitempty"`
}

type IndexResponse []*struct {
	Pid            *int     `url:"pid,omitempty",json:"pid,omitempty"`
	Tags           *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Uptime         *int     `url:"uptime,omitempty",json:"uptime,omitempty"`
	Cpus           *float64 `url:"cpus,omitempty",json:"cpus,omitempty"`
	Maxdisk        *int     `url:"maxdisk,omitempty",json:"maxdisk,omitempty"`
	Maxmem         *int     `url:"maxmem,omitempty",json:"maxmem,omitempty"`
	Name           *string  `url:"name,omitempty",json:"name,omitempty"`
	Qmpstatus      *string  `url:"qmpstatus,omitempty",json:"qmpstatus,omitempty"`
	RunningMachine *string  `url:"running-machine,omitempty",json:"running-machine,omitempty"`
	RunningQemu    *string  `url:"running-qemu,omitempty",json:"running-qemu,omitempty"`
	Status         string   `url:"status",json:"status"`
	Lock           *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Vmid           int      `url:"vmid",json:"vmid"`
}

// Index Virtual machine index (per node).
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Scsihw            *string  `url:"scsihw,omitempty",json:"scsihw,omitempty"`
	Tags              *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Bootdisk          *string  `url:"bootdisk,omitempty",json:"bootdisk,omitempty"`
	Cpu               *string  `url:"cpu,omitempty",json:"cpu,omitempty"`
	Protection        *bool    `url:"protection,omitempty",json:"protection,omitempty"`
	Rng0              *string  `url:"rng0,omitempty",json:"rng0,omitempty"`
	Numan             *string  `url:"numa[n],omitempty",json:"numa[n],omitempty"`
	Arch              *string  `url:"arch,omitempty",json:"arch,omitempty"`
	Args              *string  `url:"args,omitempty",json:"args,omitempty"`
	Keyboard          *string  `url:"keyboard,omitempty",json:"keyboard,omitempty"`
	LiveRestore       *bool    `url:"live-restore,omitempty",json:"live-restore,omitempty"`
	Description       *string  `url:"description,omitempty",json:"description,omitempty"`
	Ipconfign         *string  `url:"ipconfig[n],omitempty",json:"ipconfig[n],omitempty"`
	Kvm               *bool    `url:"kvm,omitempty",json:"kvm,omitempty"`
	Storage           *string  `url:"storage,omitempty",json:"storage,omitempty"`
	Agent             *string  `url:"agent,omitempty",json:"agent,omitempty"`
	Efidisk0          *string  `url:"efidisk0,omitempty",json:"efidisk0,omitempty"`
	Memory            *int     `url:"memory,omitempty",json:"memory,omitempty"`
	Reboot            *bool    `url:"reboot,omitempty",json:"reboot,omitempty"`
	Smp               *int     `url:"smp,omitempty",json:"smp,omitempty"`
	Vmgenid           *string  `url:"vmgenid,omitempty",json:"vmgenid,omitempty"`
	Netn              *string  `url:"net[n],omitempty",json:"net[n],omitempty"`
	Satan             *string  `url:"sata[n],omitempty",json:"sata[n],omitempty"`
	Tdf               *bool    `url:"tdf,omitempty",json:"tdf,omitempty"`
	Tpmstate0         *string  `url:"tpmstate0,omitempty",json:"tpmstate0,omitempty"`
	Citype            *string  `url:"citype,omitempty",json:"citype,omitempty"`
	Cpulimit          *float64 `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Hugepages         *string  `url:"hugepages,omitempty",json:"hugepages,omitempty"`
	Localtime         *bool    `url:"localtime,omitempty",json:"localtime,omitempty"`
	Node              string   `url:"node",json:"node"`
	Onboot            *bool    `url:"onboot,omitempty",json:"onboot,omitempty"`
	Pool              *string  `url:"pool,omitempty",json:"pool,omitempty"`
	Archive           *string  `url:"archive,omitempty",json:"archive,omitempty"`
	Cipassword        *string  `url:"cipassword,omitempty",json:"cipassword,omitempty"`
	Cpuunits          *int     `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Lock              *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Acpi              *bool    `url:"acpi,omitempty",json:"acpi,omitempty"`
	Bios              *string  `url:"bios,omitempty",json:"bios,omitempty"`
	Serialn           *string  `url:"serial[n],omitempty",json:"serial[n],omitempty"`
	Tablet            *bool    `url:"tablet,omitempty",json:"tablet,omitempty"`
	Ciuser            *string  `url:"ciuser,omitempty",json:"ciuser,omitempty"`
	Cores             *int     `url:"cores,omitempty",json:"cores,omitempty"`
	Iden              *string  `url:"ide[n],omitempty",json:"ide[n],omitempty"`
	Nameserver        *string  `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Affinity          *string  `url:"affinity,omitempty",json:"affinity,omitempty"`
	Audio0            *string  `url:"audio0,omitempty",json:"audio0,omitempty"`
	Balloon           *int     `url:"balloon,omitempty",json:"balloon,omitempty"`
	Cicustom          *string  `url:"cicustom,omitempty",json:"cicustom,omitempty"`
	Vga               *string  `url:"vga,omitempty",json:"vga,omitempty"`
	Virtion           *string  `url:"virtio[n],omitempty",json:"virtio[n],omitempty"`
	Vmstatestorage    *string  `url:"vmstatestorage,omitempty",json:"vmstatestorage,omitempty"`
	Watchdog          *string  `url:"watchdog,omitempty",json:"watchdog,omitempty"`
	Searchdomain      *string  `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
	Template          *bool    `url:"template,omitempty",json:"template,omitempty"`
	Unusedn           *string  `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Vcpus             *int     `url:"vcpus,omitempty",json:"vcpus,omitempty"`
	Force             *bool    `url:"force,omitempty",json:"force,omitempty"`
	Shares            *int     `url:"shares,omitempty",json:"shares,omitempty"`
	Keephugepages     *bool    `url:"keephugepages,omitempty",json:"keephugepages,omitempty"`
	MigrateSpeed      *int     `url:"migrate_speed,omitempty",json:"migrate_speed,omitempty"`
	SpiceEnhancements *string  `url:"spice_enhancements,omitempty",json:"spice_enhancements,omitempty"`
	Numa              *bool    `url:"numa,omitempty",json:"numa,omitempty"`
	Ostype            *string  `url:"ostype,omitempty",json:"ostype,omitempty"`
	Cdrom             *string  `url:"cdrom,omitempty",json:"cdrom,omitempty"`
	Hotplug           *string  `url:"hotplug,omitempty",json:"hotplug,omitempty"`
	Ivshmem           *string  `url:"ivshmem,omitempty",json:"ivshmem,omitempty"`
	MigrateDowntime   *float64 `url:"migrate_downtime,omitempty",json:"migrate_downtime,omitempty"`
	Start             *bool    `url:"start,omitempty",json:"start,omitempty"`
	Boot              *string  `url:"boot,omitempty",json:"boot,omitempty"`
	Paralleln         *string  `url:"parallel[n],omitempty",json:"parallel[n],omitempty"`
	Scsin             *string  `url:"scsi[n],omitempty",json:"scsi[n],omitempty"`
	Smbios1           *string  `url:"smbios1,omitempty",json:"smbios1,omitempty"`
	Vmid              int      `url:"vmid",json:"vmid"`
	Bwlimit           *int     `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Hostpcin          *string  `url:"hostpci[n],omitempty",json:"hostpci[n],omitempty"`
	Name              *string  `url:"name,omitempty",json:"name,omitempty"`
	Startdate         *string  `url:"startdate,omitempty",json:"startdate,omitempty"`
	Usbn              *string  `url:"usb[n],omitempty",json:"usb[n],omitempty"`
	Autostart         *bool    `url:"autostart,omitempty",json:"autostart,omitempty"`
	Machine           *string  `url:"machine,omitempty",json:"machine,omitempty"`
	Sshkeys           *string  `url:"sshkeys,omitempty",json:"sshkeys,omitempty"`
	Startup           *string  `url:"startup,omitempty",json:"startup,omitempty"`
	Freeze            *bool    `url:"freeze,omitempty",json:"freeze,omitempty"`
	Hookscript        *string  `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Sockets           *int     `url:"sockets,omitempty",json:"sockets,omitempty"`
	Unique            *bool    `url:"unique,omitempty",json:"unique,omitempty"`
}

type CreateResponse string

// Create Create or restore a virtual machine.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FindResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Find Directory index
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}", "GET", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	DestroyUnreferencedDisks *bool  `url:"destroy-unreferenced-disks,omitempty",json:"destroy-unreferenced-disks,omitempty"`
	Node                     string `url:"node",json:"node"`
	Purge                    *bool  `url:"purge,omitempty",json:"purge,omitempty"`
	Skiplock                 *bool  `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Vmid                     int    `url:"vmid",json:"vmid"`
}

type DeleteResponse string

// Delete Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}", "DELETE", &resp, req)
	return resp, err
}

type RrdRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Ds        string  `url:"ds",json:"ds"`
	Node      string  `url:"node",json:"node"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
	Vmid      int     `url:"vmid",json:"vmid"`
}

type RrdResponse struct {
	Filename string `url:"filename",json:"filename"`
}

// Rrd Read VM RRD statistics (returns PNG)
func (c *Client) Rrd(ctx context.Context, req *RrdRequest) (*RrdResponse, error) {
	var resp *RrdResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/rrd", "GET", &resp, req)
	return resp, err
}

type RrddataRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Node      string  `url:"node",json:"node"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
	Vmid      int     `url:"vmid",json:"vmid"`
}

type RrddataResponse []*map[string]interface{}

// Rrddata Read VM RRD statistics
func (c *Client) Rrddata(ctx context.Context, req *RrddataRequest) (*RrddataResponse, error) {
	var resp *RrddataResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/rrddata", "GET", &resp, req)
	return resp, err
}

type VmConfigRequest struct {
	Snapshot *string `url:"snapshot,omitempty",json:"snapshot,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
	Current  *bool   `url:"current,omitempty",json:"current,omitempty"`
	Node     string  `url:"node",json:"node"`
}

type VmConfigResponse struct {
	Affinity          *string  `url:"affinity,omitempty",json:"affinity,omitempty"`
	Agent             *string  `url:"agent,omitempty",json:"agent,omitempty"`
	Cdrom             *string  `url:"cdrom,omitempty",json:"cdrom,omitempty"`
	Kvm               *bool    `url:"kvm,omitempty",json:"kvm,omitempty"`
	MigrateDowntime   *float64 `url:"migrate_downtime,omitempty",json:"migrate_downtime,omitempty"`
	Boot              *string  `url:"boot,omitempty",json:"boot,omitempty"`
	Cicustom          *string  `url:"cicustom,omitempty",json:"cicustom,omitempty"`
	Cipassword        *string  `url:"cipassword,omitempty",json:"cipassword,omitempty"`
	Cpu               *string  `url:"cpu,omitempty",json:"cpu,omitempty"`
	Ipconfign         *string  `url:"ipconfig[n],omitempty",json:"ipconfig[n],omitempty"`
	Template          *bool    `url:"template,omitempty",json:"template,omitempty"`
	Efidisk0          *string  `url:"efidisk0,omitempty",json:"efidisk0,omitempty"`
	Scsin             *string  `url:"scsi[n],omitempty",json:"scsi[n],omitempty"`
	Autostart         *bool    `url:"autostart,omitempty",json:"autostart,omitempty"`
	Description       *string  `url:"description,omitempty",json:"description,omitempty"`
	Digest            string   `url:"digest",json:"digest"`
	Hostpcin          *string  `url:"hostpci[n],omitempty",json:"hostpci[n],omitempty"`
	Memory            *int     `url:"memory,omitempty",json:"memory,omitempty"`
	Ostype            *string  `url:"ostype,omitempty",json:"ostype,omitempty"`
	Vmstatestorage    *string  `url:"vmstatestorage,omitempty",json:"vmstatestorage,omitempty"`
	Bios              *string  `url:"bios,omitempty",json:"bios,omitempty"`
	Hotplug           *string  `url:"hotplug,omitempty",json:"hotplug,omitempty"`
	Keephugepages     *bool    `url:"keephugepages,omitempty",json:"keephugepages,omitempty"`
	Netn              *string  `url:"net[n],omitempty",json:"net[n],omitempty"`
	Numa              *bool    `url:"numa,omitempty",json:"numa,omitempty"`
	Audio0            *string  `url:"audio0,omitempty",json:"audio0,omitempty"`
	Cpuunits          *int     `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Nameserver        *string  `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Args              *string  `url:"args,omitempty",json:"args,omitempty"`
	Ciuser            *string  `url:"ciuser,omitempty",json:"ciuser,omitempty"`
	Usbn              *string  `url:"usb[n],omitempty",json:"usb[n],omitempty"`
	Watchdog          *string  `url:"watchdog,omitempty",json:"watchdog,omitempty"`
	Bootdisk          *string  `url:"bootdisk,omitempty",json:"bootdisk,omitempty"`
	Cores             *int     `url:"cores,omitempty",json:"cores,omitempty"`
	Cpulimit          *float64 `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Onboot            *bool    `url:"onboot,omitempty",json:"onboot,omitempty"`
	Tablet            *bool    `url:"tablet,omitempty",json:"tablet,omitempty"`
	Tags              *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Unusedn           *string  `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Ivshmem           *string  `url:"ivshmem,omitempty",json:"ivshmem,omitempty"`
	Satan             *string  `url:"sata[n],omitempty",json:"sata[n],omitempty"`
	Serialn           *string  `url:"serial[n],omitempty",json:"serial[n],omitempty"`
	Smp               *int     `url:"smp,omitempty",json:"smp,omitempty"`
	MigrateSpeed      *int     `url:"migrate_speed,omitempty",json:"migrate_speed,omitempty"`
	Vga               *string  `url:"vga,omitempty",json:"vga,omitempty"`
	Hookscript        *string  `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Rng0              *string  `url:"rng0,omitempty",json:"rng0,omitempty"`
	Smbios1           *string  `url:"smbios1,omitempty",json:"smbios1,omitempty"`
	Tdf               *bool    `url:"tdf,omitempty",json:"tdf,omitempty"`
	Vmgenid           *string  `url:"vmgenid,omitempty",json:"vmgenid,omitempty"`
	Freeze            *bool    `url:"freeze,omitempty",json:"freeze,omitempty"`
	Searchdomain      *string  `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
	Sshkeys           *string  `url:"sshkeys,omitempty",json:"sshkeys,omitempty"`
	Balloon           *int     `url:"balloon,omitempty",json:"balloon,omitempty"`
	Hugepages         *string  `url:"hugepages,omitempty",json:"hugepages,omitempty"`
	Name              *string  `url:"name,omitempty",json:"name,omitempty"`
	Paralleln         *string  `url:"parallel[n],omitempty",json:"parallel[n],omitempty"`
	SpiceEnhancements *string  `url:"spice_enhancements,omitempty",json:"spice_enhancements,omitempty"`
	Startdate         *string  `url:"startdate,omitempty",json:"startdate,omitempty"`
	Tpmstate0         *string  `url:"tpmstate0,omitempty",json:"tpmstate0,omitempty"`
	Acpi              *bool    `url:"acpi,omitempty",json:"acpi,omitempty"`
	Citype            *string  `url:"citype,omitempty",json:"citype,omitempty"`
	Machine           *string  `url:"machine,omitempty",json:"machine,omitempty"`
	Scsihw            *string  `url:"scsihw,omitempty",json:"scsihw,omitempty"`
	Virtion           *string  `url:"virtio[n],omitempty",json:"virtio[n],omitempty"`
	Arch              *string  `url:"arch,omitempty",json:"arch,omitempty"`
	Iden              *string  `url:"ide[n],omitempty",json:"ide[n],omitempty"`
	Keyboard          *string  `url:"keyboard,omitempty",json:"keyboard,omitempty"`
	Protection        *bool    `url:"protection,omitempty",json:"protection,omitempty"`
	Reboot            *bool    `url:"reboot,omitempty",json:"reboot,omitempty"`
	Shares            *int     `url:"shares,omitempty",json:"shares,omitempty"`
	Vcpus             *int     `url:"vcpus,omitempty",json:"vcpus,omitempty"`
	Localtime         *bool    `url:"localtime,omitempty",json:"localtime,omitempty"`
	Lock              *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Numan             *string  `url:"numa[n],omitempty",json:"numa[n],omitempty"`
	Sockets           *int     `url:"sockets,omitempty",json:"sockets,omitempty"`
	Startup           *string  `url:"startup,omitempty",json:"startup,omitempty"`
}

// VmConfig Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.
func (c *Client) VmConfig(ctx context.Context, req *VmConfigRequest) (*VmConfigResponse, error) {
	var resp *VmConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/config", "GET", &resp, req)
	return resp, err
}

type UpdateVmAsyncConfigRequest struct {
	Paralleln         *string  `url:"parallel[n],omitempty",json:"parallel[n],omitempty"`
	Serialn           *string  `url:"serial[n],omitempty",json:"serial[n],omitempty"`
	Startup           *string  `url:"startup,omitempty",json:"startup,omitempty"`
	Vmid              int      `url:"vmid",json:"vmid"`
	Cdrom             *string  `url:"cdrom,omitempty",json:"cdrom,omitempty"`
	Cipassword        *string  `url:"cipassword,omitempty",json:"cipassword,omitempty"`
	Cpulimit          *float64 `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Force             *bool    `url:"force,omitempty",json:"force,omitempty"`
	Hostpcin          *string  `url:"hostpci[n],omitempty",json:"hostpci[n],omitempty"`
	Keephugepages     *bool    `url:"keephugepages,omitempty",json:"keephugepages,omitempty"`
	Startdate         *string  `url:"startdate,omitempty",json:"startdate,omitempty"`
	Description       *string  `url:"description,omitempty",json:"description,omitempty"`
	Searchdomain      *string  `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
	Skiplock          *bool    `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Smp               *int     `url:"smp,omitempty",json:"smp,omitempty"`
	Keyboard          *string  `url:"keyboard,omitempty",json:"keyboard,omitempty"`
	Args              *string  `url:"args,omitempty",json:"args,omitempty"`
	Cicustom          *string  `url:"cicustom,omitempty",json:"cicustom,omitempty"`
	Ciuser            *string  `url:"ciuser,omitempty",json:"ciuser,omitempty"`
	Cpu               *string  `url:"cpu,omitempty",json:"cpu,omitempty"`
	Cpuunits          *int     `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Hugepages         *string  `url:"hugepages,omitempty",json:"hugepages,omitempty"`
	Ivshmem           *string  `url:"ivshmem,omitempty",json:"ivshmem,omitempty"`
	MigrateSpeed      *int     `url:"migrate_speed,omitempty",json:"migrate_speed,omitempty"`
	Numa              *bool    `url:"numa,omitempty",json:"numa,omitempty"`
	Vmstatestorage    *string  `url:"vmstatestorage,omitempty",json:"vmstatestorage,omitempty"`
	Freeze            *bool    `url:"freeze,omitempty",json:"freeze,omitempty"`
	Onboot            *bool    `url:"onboot,omitempty",json:"onboot,omitempty"`
	Tpmstate0         *string  `url:"tpmstate0,omitempty",json:"tpmstate0,omitempty"`
	Unusedn           *string  `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Arch              *string  `url:"arch,omitempty",json:"arch,omitempty"`
	Bootdisk          *string  `url:"bootdisk,omitempty",json:"bootdisk,omitempty"`
	Delete            *string  `url:"delete,omitempty",json:"delete,omitempty"`
	MigrateDowntime   *float64 `url:"migrate_downtime,omitempty",json:"migrate_downtime,omitempty"`
	Netn              *string  `url:"net[n],omitempty",json:"net[n],omitempty"`
	Tdf               *bool    `url:"tdf,omitempty",json:"tdf,omitempty"`
	Watchdog          *string  `url:"watchdog,omitempty",json:"watchdog,omitempty"`
	Boot              *string  `url:"boot,omitempty",json:"boot,omitempty"`
	Satan             *string  `url:"sata[n],omitempty",json:"sata[n],omitempty"`
	SpiceEnhancements *string  `url:"spice_enhancements,omitempty",json:"spice_enhancements,omitempty"`
	Vcpus             *int     `url:"vcpus,omitempty",json:"vcpus,omitempty"`
	Numan             *string  `url:"numa[n],omitempty",json:"numa[n],omitempty"`
	Template          *bool    `url:"template,omitempty",json:"template,omitempty"`
	Nameserver        *string  `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Node              string   `url:"node",json:"node"`
	Acpi              *bool    `url:"acpi,omitempty",json:"acpi,omitempty"`
	Autostart         *bool    `url:"autostart,omitempty",json:"autostart,omitempty"`
	BackgroundDelay   *int     `url:"background_delay,omitempty",json:"background_delay,omitempty"`
	Bios              *string  `url:"bios,omitempty",json:"bios,omitempty"`
	Hookscript        *string  `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Ipconfign         *string  `url:"ipconfig[n],omitempty",json:"ipconfig[n],omitempty"`
	Scsihw            *string  `url:"scsihw,omitempty",json:"scsihw,omitempty"`
	Cores             *int     `url:"cores,omitempty",json:"cores,omitempty"`
	Digest            *string  `url:"digest,omitempty",json:"digest,omitempty"`
	Usbn              *string  `url:"usb[n],omitempty",json:"usb[n],omitempty"`
	Balloon           *int     `url:"balloon,omitempty",json:"balloon,omitempty"`
	Citype            *string  `url:"citype,omitempty",json:"citype,omitempty"`
	Efidisk0          *string  `url:"efidisk0,omitempty",json:"efidisk0,omitempty"`
	Ostype            *string  `url:"ostype,omitempty",json:"ostype,omitempty"`
	Sockets           *int     `url:"sockets,omitempty",json:"sockets,omitempty"`
	Tags              *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Virtion           *string  `url:"virtio[n],omitempty",json:"virtio[n],omitempty"`
	Agent             *string  `url:"agent,omitempty",json:"agent,omitempty"`
	Audio0            *string  `url:"audio0,omitempty",json:"audio0,omitempty"`
	Localtime         *bool    `url:"localtime,omitempty",json:"localtime,omitempty"`
	Machine           *string  `url:"machine,omitempty",json:"machine,omitempty"`
	Memory            *int     `url:"memory,omitempty",json:"memory,omitempty"`
	Scsin             *string  `url:"scsi[n],omitempty",json:"scsi[n],omitempty"`
	Sshkeys           *string  `url:"sshkeys,omitempty",json:"sshkeys,omitempty"`
	Lock              *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Revert            *string  `url:"revert,omitempty",json:"revert,omitempty"`
	Rng0              *string  `url:"rng0,omitempty",json:"rng0,omitempty"`
	Shares            *int     `url:"shares,omitempty",json:"shares,omitempty"`
	Hotplug           *string  `url:"hotplug,omitempty",json:"hotplug,omitempty"`
	Kvm               *bool    `url:"kvm,omitempty",json:"kvm,omitempty"`
	Name              *string  `url:"name,omitempty",json:"name,omitempty"`
	Reboot            *bool    `url:"reboot,omitempty",json:"reboot,omitempty"`
	Tablet            *bool    `url:"tablet,omitempty",json:"tablet,omitempty"`
	Vga               *string  `url:"vga,omitempty",json:"vga,omitempty"`
	Affinity          *string  `url:"affinity,omitempty",json:"affinity,omitempty"`
	Iden              *string  `url:"ide[n],omitempty",json:"ide[n],omitempty"`
	Protection        *bool    `url:"protection,omitempty",json:"protection,omitempty"`
	Smbios1           *string  `url:"smbios1,omitempty",json:"smbios1,omitempty"`
	Vmgenid           *string  `url:"vmgenid,omitempty",json:"vmgenid,omitempty"`
}

type UpdateVmAsyncConfigResponse *string

// UpdateVmAsyncConfig Set virtual machine options (asynchrounous API).
func (c *Client) UpdateVmAsyncConfig(ctx context.Context, req *UpdateVmAsyncConfigRequest) (*UpdateVmAsyncConfigResponse, error) {
	var resp *UpdateVmAsyncConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/config", "POST", &resp, req)
	return resp, err
}

type UpdateVmConfigRequest struct {
	Hotplug           *string  `url:"hotplug,omitempty",json:"hotplug,omitempty"`
	Ivshmem           *string  `url:"ivshmem,omitempty",json:"ivshmem,omitempty"`
	Memory            *int     `url:"memory,omitempty",json:"memory,omitempty"`
	Paralleln         *string  `url:"parallel[n],omitempty",json:"parallel[n],omitempty"`
	Vmgenid           *string  `url:"vmgenid,omitempty",json:"vmgenid,omitempty"`
	Startup           *string  `url:"startup,omitempty",json:"startup,omitempty"`
	Acpi              *bool    `url:"acpi,omitempty",json:"acpi,omitempty"`
	Cicustom          *string  `url:"cicustom,omitempty",json:"cicustom,omitempty"`
	Cpu               *string  `url:"cpu,omitempty",json:"cpu,omitempty"`
	Cpulimit          *float64 `url:"cpulimit,omitempty",json:"cpulimit,omitempty"`
	Reboot            *bool    `url:"reboot,omitempty",json:"reboot,omitempty"`
	Sockets           *int     `url:"sockets,omitempty",json:"sockets,omitempty"`
	Smbios1           *string  `url:"smbios1,omitempty",json:"smbios1,omitempty"`
	Searchdomain      *string  `url:"searchdomain,omitempty",json:"searchdomain,omitempty"`
	Serialn           *string  `url:"serial[n],omitempty",json:"serial[n],omitempty"`
	Audio0            *string  `url:"audio0,omitempty",json:"audio0,omitempty"`
	Delete            *string  `url:"delete,omitempty",json:"delete,omitempty"`
	Hugepages         *string  `url:"hugepages,omitempty",json:"hugepages,omitempty"`
	Iden              *string  `url:"ide[n],omitempty",json:"ide[n],omitempty"`
	Numa              *bool    `url:"numa,omitempty",json:"numa,omitempty"`
	Rng0              *string  `url:"rng0,omitempty",json:"rng0,omitempty"`
	Usbn              *string  `url:"usb[n],omitempty",json:"usb[n],omitempty"`
	Ciuser            *string  `url:"ciuser,omitempty",json:"ciuser,omitempty"`
	Hookscript        *string  `url:"hookscript,omitempty",json:"hookscript,omitempty"`
	Ipconfign         *string  `url:"ipconfig[n],omitempty",json:"ipconfig[n],omitempty"`
	Unusedn           *string  `url:"unused[n],omitempty",json:"unused[n],omitempty"`
	Autostart         *bool    `url:"autostart,omitempty",json:"autostart,omitempty"`
	Force             *bool    `url:"force,omitempty",json:"force,omitempty"`
	Netn              *string  `url:"net[n],omitempty",json:"net[n],omitempty"`
	Node              string   `url:"node",json:"node"`
	SpiceEnhancements *string  `url:"spice_enhancements,omitempty",json:"spice_enhancements,omitempty"`
	Keephugepages     *bool    `url:"keephugepages,omitempty",json:"keephugepages,omitempty"`
	Keyboard          *string  `url:"keyboard,omitempty",json:"keyboard,omitempty"`
	Affinity          *string  `url:"affinity,omitempty",json:"affinity,omitempty"`
	Agent             *string  `url:"agent,omitempty",json:"agent,omitempty"`
	Balloon           *int     `url:"balloon,omitempty",json:"balloon,omitempty"`
	Cipassword        *string  `url:"cipassword,omitempty",json:"cipassword,omitempty"`
	Citype            *string  `url:"citype,omitempty",json:"citype,omitempty"`
	Hostpcin          *string  `url:"hostpci[n],omitempty",json:"hostpci[n],omitempty"`
	Kvm               *bool    `url:"kvm,omitempty",json:"kvm,omitempty"`
	Localtime         *bool    `url:"localtime,omitempty",json:"localtime,omitempty"`
	MigrateSpeed      *int     `url:"migrate_speed,omitempty",json:"migrate_speed,omitempty"`
	Revert            *string  `url:"revert,omitempty",json:"revert,omitempty"`
	Vga               *string  `url:"vga,omitempty",json:"vga,omitempty"`
	Bootdisk          *string  `url:"bootdisk,omitempty",json:"bootdisk,omitempty"`
	Digest            *string  `url:"digest,omitempty",json:"digest,omitempty"`
	Freeze            *bool    `url:"freeze,omitempty",json:"freeze,omitempty"`
	Name              *string  `url:"name,omitempty",json:"name,omitempty"`
	Shares            *int     `url:"shares,omitempty",json:"shares,omitempty"`
	Smp               *int     `url:"smp,omitempty",json:"smp,omitempty"`
	Cdrom             *string  `url:"cdrom,omitempty",json:"cdrom,omitempty"`
	Cpuunits          *int     `url:"cpuunits,omitempty",json:"cpuunits,omitempty"`
	Ostype            *string  `url:"ostype,omitempty",json:"ostype,omitempty"`
	Template          *bool    `url:"template,omitempty",json:"template,omitempty"`
	Vmid              int      `url:"vmid",json:"vmid"`
	Boot              *string  `url:"boot,omitempty",json:"boot,omitempty"`
	Machine           *string  `url:"machine,omitempty",json:"machine,omitempty"`
	Scsin             *string  `url:"scsi[n],omitempty",json:"scsi[n],omitempty"`
	Skiplock          *bool    `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Tdf               *bool    `url:"tdf,omitempty",json:"tdf,omitempty"`
	Lock              *string  `url:"lock,omitempty",json:"lock,omitempty"`
	Nameserver        *string  `url:"nameserver,omitempty",json:"nameserver,omitempty"`
	Onboot            *bool    `url:"onboot,omitempty",json:"onboot,omitempty"`
	Satan             *string  `url:"sata[n],omitempty",json:"sata[n],omitempty"`
	Sshkeys           *string  `url:"sshkeys,omitempty",json:"sshkeys,omitempty"`
	Vcpus             *int     `url:"vcpus,omitempty",json:"vcpus,omitempty"`
	Cores             *int     `url:"cores,omitempty",json:"cores,omitempty"`
	Numan             *string  `url:"numa[n],omitempty",json:"numa[n],omitempty"`
	Scsihw            *string  `url:"scsihw,omitempty",json:"scsihw,omitempty"`
	Tpmstate0         *string  `url:"tpmstate0,omitempty",json:"tpmstate0,omitempty"`
	Virtion           *string  `url:"virtio[n],omitempty",json:"virtio[n],omitempty"`
	Tablet            *bool    `url:"tablet,omitempty",json:"tablet,omitempty"`
	Tags              *string  `url:"tags,omitempty",json:"tags,omitempty"`
	Args              *string  `url:"args,omitempty",json:"args,omitempty"`
	Description       *string  `url:"description,omitempty",json:"description,omitempty"`
	Efidisk0          *string  `url:"efidisk0,omitempty",json:"efidisk0,omitempty"`
	MigrateDowntime   *float64 `url:"migrate_downtime,omitempty",json:"migrate_downtime,omitempty"`
	Protection        *bool    `url:"protection,omitempty",json:"protection,omitempty"`
	Startdate         *string  `url:"startdate,omitempty",json:"startdate,omitempty"`
	Vmstatestorage    *string  `url:"vmstatestorage,omitempty",json:"vmstatestorage,omitempty"`
	Watchdog          *string  `url:"watchdog,omitempty",json:"watchdog,omitempty"`
	Arch              *string  `url:"arch,omitempty",json:"arch,omitempty"`
	Bios              *string  `url:"bios,omitempty",json:"bios,omitempty"`
}

type UpdateVmConfigResponse map[string]interface{}

// UpdateVmConfig Set virtual machine options (synchrounous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.
func (c *Client) UpdateVmConfig(ctx context.Context, req *UpdateVmConfigRequest) (*UpdateVmConfigResponse, error) {
	var resp *UpdateVmConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/config", "PUT", &resp, req)
	return resp, err
}

type VmPendingRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type VmPendingResponse []*struct {
	Delete  *int    `url:"delete,omitempty",json:"delete,omitempty"`
	Key     string  `url:"key",json:"key"`
	Pending *string `url:"pending,omitempty",json:"pending,omitempty"`
	Value   *string `url:"value,omitempty",json:"value,omitempty"`
}

// VmPending Get the virtual machine configuration with both current and pending values.
func (c *Client) VmPending(ctx context.Context, req *VmPendingRequest) (*VmPendingResponse, error) {
	var resp *VmPendingResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/pending", "GET", &resp, req)
	return resp, err
}

type UnlinkRequest struct {
	Node   string `url:"node",json:"node"`
	Vmid   int    `url:"vmid",json:"vmid"`
	Force  *bool  `url:"force,omitempty",json:"force,omitempty"`
	Idlist string `url:"idlist",json:"idlist"`
}

type UnlinkResponse map[string]interface{}

// Unlink Unlink/delete disk images.
func (c *Client) Unlink(ctx context.Context, req *UnlinkRequest) (*UnlinkResponse, error) {
	var resp *UnlinkResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/unlink", "PUT", &resp, req)
	return resp, err
}

type VncproxyRequest struct {
	Vmid             int    `url:"vmid",json:"vmid"`
	Websocket        *bool  `url:"websocket,omitempty",json:"websocket,omitempty"`
	GeneratePassword *bool  `url:"generate-password,omitempty",json:"generate-password,omitempty"`
	Node             string `url:"node",json:"node"`
}

type VncproxyResponse struct {
	Cert     string  `url:"cert",json:"cert"`
	Password *string `url:"password,omitempty",json:"password,omitempty"`
	Port     int     `url:"port",json:"port"`
	Ticket   string  `url:"ticket",json:"ticket"`
	Upid     string  `url:"upid",json:"upid"`
	User     string  `url:"user",json:"user"`
}

// Vncproxy Creates a TCP VNC proxy connections.
func (c *Client) Vncproxy(ctx context.Context, req *VncproxyRequest) (*VncproxyResponse, error) {
	var resp *VncproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/vncproxy", "POST", &resp, req)
	return resp, err
}

type TermproxyRequest struct {
	Serial *string `url:"serial,omitempty",json:"serial,omitempty"`
	Vmid   int     `url:"vmid",json:"vmid"`
	Node   string  `url:"node",json:"node"`
}

type TermproxyResponse struct {
	Port   int    `url:"port",json:"port"`
	Ticket string `url:"ticket",json:"ticket"`
	Upid   string `url:"upid",json:"upid"`
	User   string `url:"user",json:"user"`
}

// Termproxy Creates a TCP proxy connections.
func (c *Client) Termproxy(ctx context.Context, req *TermproxyRequest) (*TermproxyResponse, error) {
	var resp *TermproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/termproxy", "POST", &resp, req)
	return resp, err
}

type VncwebsocketRequest struct {
	Vncticket string `url:"vncticket",json:"vncticket"`
	Node      string `url:"node",json:"node"`
	Port      int    `url:"port",json:"port"`
	Vmid      int    `url:"vmid",json:"vmid"`
}

type VncwebsocketResponse struct {
	Port string `url:"port",json:"port"`
}

// Vncwebsocket Opens a weksocket for VNC traffic.
func (c *Client) Vncwebsocket(ctx context.Context, req *VncwebsocketRequest) (*VncwebsocketResponse, error) {
	var resp *VncwebsocketResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/vncwebsocket", "GET", &resp, req)
	return resp, err
}

type SpiceproxyRequest struct {
	Node  string  `url:"node",json:"node"`
	Proxy *string `url:"proxy,omitempty",json:"proxy,omitempty"`
	Vmid  int     `url:"vmid",json:"vmid"`
}

type SpiceproxyResponse struct {
	Host     string `url:"host",json:"host"`
	Password string `url:"password",json:"password"`
	Proxy    string `url:"proxy",json:"proxy"`
	TlsPort  int    `url:"tls-port",json:"tls-port"`
	Type     string `url:"type",json:"type"`
}

// Spiceproxy Returns a SPICE configuration to connect to the VM.
func (c *Client) Spiceproxy(ctx context.Context, req *SpiceproxyRequest) (*SpiceproxyResponse, error) {
	var resp *SpiceproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/spiceproxy", "POST", &resp, req)
	return resp, err
}

type VmSendkeyRequest struct {
	Key      string `url:"key",json:"key"`
	Node     string `url:"node",json:"node"`
	Skiplock *bool  `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Vmid     int    `url:"vmid",json:"vmid"`
}

type VmSendkeyResponse map[string]interface{}

// VmSendkey Send key event to virtual machine.
func (c *Client) VmSendkey(ctx context.Context, req *VmSendkeyRequest) (*VmSendkeyResponse, error) {
	var resp *VmSendkeyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/sendkey", "PUT", &resp, req)
	return resp, err
}

type VmFeatureRequest struct {
	Feature  string  `url:"feature",json:"feature"`
	Node     string  `url:"node",json:"node"`
	Snapname *string `url:"snapname,omitempty",json:"snapname,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
}

type VmFeatureResponse struct {
	Hasfeature bool     `url:"hasFeature",json:"hasFeature"`
	Nodes      []string `url:"nodes",json:"nodes"`
}

// VmFeature Check if feature for virtual machine is available.
func (c *Client) VmFeature(ctx context.Context, req *VmFeatureRequest) (*VmFeatureResponse, error) {
	var resp *VmFeatureResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/feature", "GET", &resp, req)
	return resp, err
}

type CloneVmCloneRequest struct {
	Snapname    *string `url:"snapname,omitempty",json:"snapname,omitempty"`
	Storage     *string `url:"storage,omitempty",json:"storage,omitempty"`
	Vmid        int     `url:"vmid",json:"vmid"`
	Format      *string `url:"format,omitempty",json:"format,omitempty"`
	Name        *string `url:"name,omitempty",json:"name,omitempty"`
	Pool        *string `url:"pool,omitempty",json:"pool,omitempty"`
	Newid       int     `url:"newid",json:"newid"`
	Node        string  `url:"node",json:"node"`
	Target      *string `url:"target,omitempty",json:"target,omitempty"`
	Bwlimit     *int    `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Description *string `url:"description,omitempty",json:"description,omitempty"`
	Full        *bool   `url:"full,omitempty",json:"full,omitempty"`
}

type CloneVmCloneResponse string

// CloneVmClone Create a copy of virtual machine/template.
func (c *Client) CloneVmClone(ctx context.Context, req *CloneVmCloneRequest) (*CloneVmCloneResponse, error) {
	var resp *CloneVmCloneResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/clone", "POST", &resp, req)
	return resp, err
}

type MoveVmDiskMoveDiskRequest struct {
	Disk         string  `url:"disk",json:"disk"`
	Format       *string `url:"format,omitempty",json:"format,omitempty"`
	Storage      *string `url:"storage,omitempty",json:"storage,omitempty"`
	Vmid         int     `url:"vmid",json:"vmid"`
	Bwlimit      *int    `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Digest       *string `url:"digest,omitempty",json:"digest,omitempty"`
	TargetDigest *string `url:"target-digest,omitempty",json:"target-digest,omitempty"`
	TargetDisk   *string `url:"target-disk,omitempty",json:"target-disk,omitempty"`
	TargetVmid   *int    `url:"target-vmid,omitempty",json:"target-vmid,omitempty"`
	Delete       *bool   `url:"delete,omitempty",json:"delete,omitempty"`
	Node         string  `url:"node",json:"node"`
}

type MoveVmDiskMoveDiskResponse string

// MoveVmDiskMoveDisk Move volume to different storage or to a different VM.
func (c *Client) MoveVmDiskMoveDisk(ctx context.Context, req *MoveVmDiskMoveDiskRequest) (*MoveVmDiskMoveDiskResponse, error) {
	var resp *MoveVmDiskMoveDiskResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/move_disk", "POST", &resp, req)
	return resp, err
}

type MigrateVmMigrateRequest struct {
	MigrationNetwork *string `url:"migration_network,omitempty",json:"migration_network,omitempty"`
	Node             string  `url:"node",json:"node"`
	Vmid             int     `url:"vmid",json:"vmid"`
	WithLocalDisks   *bool   `url:"with-local-disks,omitempty",json:"with-local-disks,omitempty"`
	Bwlimit          *int    `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	Force            *bool   `url:"force,omitempty",json:"force,omitempty"`
	MigrationType    *string `url:"migration_type,omitempty",json:"migration_type,omitempty"`
	Online           *bool   `url:"online,omitempty",json:"online,omitempty"`
	Target           string  `url:"target",json:"target"`
	Targetstorage    *string `url:"targetstorage,omitempty",json:"targetstorage,omitempty"`
}

type MigrateVmMigrateResponse string

// MigrateVmMigrate Migrate virtual machine. Creates a new migration task.
func (c *Client) MigrateVmMigrate(ctx context.Context, req *MigrateVmMigrateRequest) (*MigrateVmMigrateResponse, error) {
	var resp *MigrateVmMigrateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/migrate", "POST", &resp, req)
	return resp, err
}

type MigrateVmPreconditionMigrateRequest struct {
	Target *string `url:"target,omitempty",json:"target,omitempty"`
	Vmid   int     `url:"vmid",json:"vmid"`
	Node   string  `url:"node",json:"node"`
}

type MigrateVmPreconditionMigrateResponse struct {
	AllowedNodes    []*map[string]interface{} `url:"allowed_nodes,omitempty",json:"allowed_nodes,omitempty"`
	LocalDisks      []*map[string]interface{} `url:"local_disks",json:"local_disks"`
	LocalResources  []*map[string]interface{} `url:"local_resources",json:"local_resources"`
	NotAllowedNodes map[string]interface{}    `url:"not_allowed_nodes,omitempty",json:"not_allowed_nodes,omitempty"`
	Running         bool                      `url:"running",json:"running"`
}

// MigrateVmPreconditionMigrate Get preconditions for migration.
func (c *Client) MigrateVmPreconditionMigrate(ctx context.Context, req *MigrateVmPreconditionMigrateRequest) (*MigrateVmPreconditionMigrateResponse, error) {
	var resp *MigrateVmPreconditionMigrateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/migrate", "GET", &resp, req)
	return resp, err
}

type RemoteMigrateVmRemoteMigrateRequest struct {
	Online         *bool  `url:"online,omitempty",json:"online,omitempty"`
	TargetVmid     *int   `url:"target-vmid,omitempty",json:"target-vmid,omitempty"`
	Vmid           int    `url:"vmid",json:"vmid"`
	Delete         *bool  `url:"delete,omitempty",json:"delete,omitempty"`
	Node           string `url:"node",json:"node"`
	TargetBridge   string `url:"target-bridge",json:"target-bridge"`
	TargetEndpoint string `url:"target-endpoint",json:"target-endpoint"`
	TargetStorage  string `url:"target-storage",json:"target-storage"`
	Bwlimit        *int   `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
}

type RemoteMigrateVmRemoteMigrateResponse string

// RemoteMigrateVmRemoteMigrate Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!
func (c *Client) RemoteMigrateVmRemoteMigrate(ctx context.Context, req *RemoteMigrateVmRemoteMigrateRequest) (*RemoteMigrateVmRemoteMigrateResponse, error) {
	var resp *RemoteMigrateVmRemoteMigrateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/remote_migrate", "POST", &resp, req)
	return resp, err
}

type MonitorRequest struct {
	Vmid    int    `url:"vmid",json:"vmid"`
	Command string `url:"command",json:"command"`
	Node    string `url:"node",json:"node"`
}

type MonitorResponse string

// Monitor Execute Qemu monitor commands.
func (c *Client) Monitor(ctx context.Context, req *MonitorRequest) (*MonitorResponse, error) {
	var resp *MonitorResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/monitor", "POST", &resp, req)
	return resp, err
}

type ResizeVmResizeRequest struct {
	Digest   *string `url:"digest,omitempty",json:"digest,omitempty"`
	Disk     string  `url:"disk",json:"disk"`
	Node     string  `url:"node",json:"node"`
	Size     string  `url:"size",json:"size"`
	Skiplock *bool   `url:"skiplock,omitempty",json:"skiplock,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
}

type ResizeVmResizeResponse map[string]interface{}

// ResizeVmResize Extend volume size.
func (c *Client) ResizeVmResize(ctx context.Context, req *ResizeVmResizeRequest) (*ResizeVmResizeResponse, error) {
	var resp *ResizeVmResizeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/resize", "PUT", &resp, req)
	return resp, err
}

type TemplateRequest struct {
	Disk *string `url:"disk,omitempty",json:"disk,omitempty"`
	Node string  `url:"node",json:"node"`
	Vmid int     `url:"vmid",json:"vmid"`
}

type TemplateResponse string

// Template Create a Template.
func (c *Client) Template(ctx context.Context, req *TemplateRequest) (*TemplateResponse, error) {
	var resp *TemplateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/template", "POST", &resp, req)
	return resp, err
}

type MtunnelRequest struct {
	Bridges  *string `url:"bridges,omitempty",json:"bridges,omitempty"`
	Node     string  `url:"node",json:"node"`
	Storages *string `url:"storages,omitempty",json:"storages,omitempty"`
	Vmid     int     `url:"vmid",json:"vmid"`
}

type MtunnelResponse struct {
	Upid   string `url:"upid",json:"upid"`
	Socket string `url:"socket",json:"socket"`
	Ticket string `url:"ticket",json:"ticket"`
}

// Mtunnel Migration tunnel endpoint - only for internal use by VM migration.
func (c *Client) Mtunnel(ctx context.Context, req *MtunnelRequest) (*MtunnelResponse, error) {
	var resp *MtunnelResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/mtunnel", "POST", &resp, req)
	return resp, err
}

type MtunnelwebsocketRequest struct {
	Ticket string `url:"ticket",json:"ticket"`
	Vmid   int    `url:"vmid",json:"vmid"`
	Node   string `url:"node",json:"node"`
	Socket string `url:"socket",json:"socket"`
}

type MtunnelwebsocketResponse struct {
	Port   *string `url:"port,omitempty",json:"port,omitempty"`
	Socket *string `url:"socket,omitempty",json:"socket,omitempty"`
}

// Mtunnelwebsocket Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
func (c *Client) Mtunnelwebsocket(ctx context.Context, req *MtunnelwebsocketRequest) (*MtunnelwebsocketResponse, error) {
	var resp *MtunnelwebsocketResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/mtunnelwebsocket", "GET", &resp, req)
	return resp, err
}
