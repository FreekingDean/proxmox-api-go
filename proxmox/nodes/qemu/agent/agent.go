// File generated by proxmox json schema, DO NOT EDIT

package agent

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

const (
	Command_FSFREEZE_FREEZE        Command = "fsfreeze-freeze"
	Command_FSFREEZE_STATUS        Command = "fsfreeze-status"
	Command_FSFREEZE_THAW          Command = "fsfreeze-thaw"
	Command_FSTRIM                 Command = "fstrim"
	Command_GET_FSINFO             Command = "get-fsinfo"
	Command_GET_HOST_NAME          Command = "get-host-name"
	Command_GET_MEMORY_BLOCK_INFO  Command = "get-memory-block-info"
	Command_GET_MEMORY_BLOCKS      Command = "get-memory-blocks"
	Command_GET_OSINFO             Command = "get-osinfo"
	Command_GET_TIME               Command = "get-time"
	Command_GET_TIMEZONE           Command = "get-timezone"
	Command_GET_USERS              Command = "get-users"
	Command_GET_VCPUS              Command = "get-vcpus"
	Command_INFO                   Command = "info"
	Command_NETWORK_GET_INTERFACES Command = "network-get-interfaces"
	Command_PING                   Command = "ping"
	Command_SHUTDOWN               Command = "shutdown"
	Command_SUSPEND_DISK           Command = "suspend-disk"
	Command_SUSPEND_HYBRID         Command = "suspend-hybrid"
	Command_SUSPEND_RAM            Command = "suspend-ram"
)

type Command string

func PtrCommand(i Command) *Command {
	return &i
}

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type CreateRequest struct {
	Command Command `url:"command" json:"command"` // The QGA command.
	Node    string  `url:"node" json:"node"`       // The cluster node name.
	Vmid    int     `url:"vmid" json:"vmid"`       // The (unique) ID of the VM.

}

type FsfreezeFreezeRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type FsfreezeStatusRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type FsfreezeThawRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type FstrimRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetFsinfoRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetHostNameRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetMemoryBlockInfoRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetMemoryBlocksRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetOsinfoRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetTimeRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetTimezoneRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetUsersRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type GetVcpusRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type InfoRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type NetworkGetInterfacesRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type PingRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type ShutdownRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type SuspendDiskRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type SuspendHybridRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type SuspendRamRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type SetUserPasswordRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Password string `url:"password" json:"password"` // The new password.
	Username string `url:"username" json:"username"` // The user to set the password for.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

	// The following parameters are optional
	Crypted *util.PVEBool `url:"crypted,omitempty" json:"crypted,omitempty"` // set to 1 if the password has already been passed through crypt()
}

type ExecRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

	// The following parameters are optional
	Command   *string `url:"command,omitempty" json:"command,omitempty"`       // The command as a list of program + arguments
	InputData *string `url:"input-data,omitempty" json:"input-data,omitempty"` // Data to pass as 'input-data' to the guest. Usually treated as STDIN to 'command'.
}

type ExecResponse struct {
	Pid int `url:"pid" json:"pid"` // The PID of the process started by the guest-agent.

}

type ExecStatusRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Pid  int    `url:"pid" json:"pid"`   // The PID to query
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

type ExecStatusResponse struct {
	Exited util.PVEBool `url:"exited" json:"exited"` // Tells if the given command has exited yet.

	// The following parameters are optional
	ErrData      *string       `url:"err-data,omitempty" json:"err-data,omitempty"`           // stderr of the process
	ErrTruncated *util.PVEBool `url:"err-truncated,omitempty" json:"err-truncated,omitempty"` // true if stderr was not fully captured
	Exitcode     *int          `url:"exitcode,omitempty" json:"exitcode,omitempty"`           // process exit code if it was normally terminated.
	OutData      *string       `url:"out-data,omitempty" json:"out-data,omitempty"`           // stdout of the process
	OutTruncated *util.PVEBool `url:"out-truncated,omitempty" json:"out-truncated,omitempty"` // true if stdout was not fully captured
	Signal       *int          `url:"signal,omitempty" json:"signal,omitempty"`               // signal number or exception code if the process was abnormally terminated.
}

type FileReadRequest struct {
	File string `url:"file" json:"file"` // The path to the file
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}

// Returns an object with a `content` property.
type FileReadResponse struct {
	Content string `url:"content" json:"content"` // The content of the file, maximum 16777216

	// The following parameters are optional
	Truncated *util.PVEBool `url:"truncated,omitempty" json:"truncated,omitempty"` // If set to 1, the output is truncated and not complete
}

type FileWriteRequest struct {
	Content string `url:"content" json:"content"` // The content to write into the file.
	File    string `url:"file" json:"file"`       // The path to the file.
	Node    string `url:"node" json:"node"`       // The cluster node name.
	Vmid    int    `url:"vmid" json:"vmid"`       // The (unique) ID of the VM.

	// The following parameters are optional
	Encode *util.PVEBool `url:"encode,omitempty" json:"encode,omitempty"` // If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true.
}

// Index Qemu Agent command index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent", "GET", &resp, req)
	return resp, err
}

// Create Execute Qemu Guest Agent commands.
func (c *Client) Create(ctx context.Context, req CreateRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent", "POST", &resp, req)
	return resp, err
}

// FsfreezeFreeze Execute fsfreeze-freeze.
func (c *Client) FsfreezeFreeze(ctx context.Context, req FsfreezeFreezeRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-freeze", "POST", &resp, req)
	return resp, err
}

// FsfreezeStatus Execute fsfreeze-status.
func (c *Client) FsfreezeStatus(ctx context.Context, req FsfreezeStatusRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-status", "POST", &resp, req)
	return resp, err
}

// FsfreezeThaw Execute fsfreeze-thaw.
func (c *Client) FsfreezeThaw(ctx context.Context, req FsfreezeThawRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-thaw", "POST", &resp, req)
	return resp, err
}

// Fstrim Execute fstrim.
func (c *Client) Fstrim(ctx context.Context, req FstrimRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fstrim", "POST", &resp, req)
	return resp, err
}

// GetFsinfo Execute get-fsinfo.
func (c *Client) GetFsinfo(ctx context.Context, req GetFsinfoRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-fsinfo", "GET", &resp, req)
	return resp, err
}

// GetHostName Execute get-host-name.
func (c *Client) GetHostName(ctx context.Context, req GetHostNameRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-host-name", "GET", &resp, req)
	return resp, err
}

// GetMemoryBlockInfo Execute get-memory-block-info.
func (c *Client) GetMemoryBlockInfo(ctx context.Context, req GetMemoryBlockInfoRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-memory-block-info", "GET", &resp, req)
	return resp, err
}

// GetMemoryBlocks Execute get-memory-blocks.
func (c *Client) GetMemoryBlocks(ctx context.Context, req GetMemoryBlocksRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-memory-blocks", "GET", &resp, req)
	return resp, err
}

// GetOsinfo Execute get-osinfo.
func (c *Client) GetOsinfo(ctx context.Context, req GetOsinfoRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-osinfo", "GET", &resp, req)
	return resp, err
}

// GetTime Execute get-time.
func (c *Client) GetTime(ctx context.Context, req GetTimeRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-time", "GET", &resp, req)
	return resp, err
}

// GetTimezone Execute get-timezone.
func (c *Client) GetTimezone(ctx context.Context, req GetTimezoneRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-timezone", "GET", &resp, req)
	return resp, err
}

// GetUsers Execute get-users.
func (c *Client) GetUsers(ctx context.Context, req GetUsersRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-users", "GET", &resp, req)
	return resp, err
}

// GetVcpus Execute get-vcpus.
func (c *Client) GetVcpus(ctx context.Context, req GetVcpusRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-vcpus", "GET", &resp, req)
	return resp, err
}

// Info Execute info.
func (c *Client) Info(ctx context.Context, req InfoRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/info", "GET", &resp, req)
	return resp, err
}

// NetworkGetInterfaces Execute network-get-interfaces.
func (c *Client) NetworkGetInterfaces(ctx context.Context, req NetworkGetInterfacesRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/network-get-interfaces", "GET", &resp, req)
	return resp, err
}

// Ping Execute ping.
func (c *Client) Ping(ctx context.Context, req PingRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/ping", "POST", &resp, req)
	return resp, err
}

// Shutdown Execute shutdown.
func (c *Client) Shutdown(ctx context.Context, req ShutdownRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/shutdown", "POST", &resp, req)
	return resp, err
}

// SuspendDisk Execute suspend-disk.
func (c *Client) SuspendDisk(ctx context.Context, req SuspendDiskRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/suspend-disk", "POST", &resp, req)
	return resp, err
}

// SuspendHybrid Execute suspend-hybrid.
func (c *Client) SuspendHybrid(ctx context.Context, req SuspendHybridRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/suspend-hybrid", "POST", &resp, req)
	return resp, err
}

// SuspendRam Execute suspend-ram.
func (c *Client) SuspendRam(ctx context.Context, req SuspendRamRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/suspend-ram", "POST", &resp, req)
	return resp, err
}

// SetUserPassword Sets the password for the given user to the given password
func (c *Client) SetUserPassword(ctx context.Context, req SetUserPasswordRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/set-user-password", "POST", &resp, req)
	return resp, err
}

// Exec Executes the given command in the vm via the guest-agent and returns an object with the pid.
func (c *Client) Exec(ctx context.Context, req ExecRequest) (ExecResponse, error) {
	var resp ExecResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/exec", "POST", &resp, req)
	return resp, err
}

// ExecStatus Gets the status of the given pid started by the guest-agent
func (c *Client) ExecStatus(ctx context.Context, req ExecStatusRequest) (ExecStatusResponse, error) {
	var resp ExecStatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/exec-status", "GET", &resp, req)
	return resp, err
}

// FileRead Reads the given file via guest agent. Is limited to 16777216 bytes.
func (c *Client) FileRead(ctx context.Context, req FileReadRequest) (FileReadResponse, error) {
	var resp FileReadResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/file-read", "GET", &resp, req)
	return resp, err
}

// FileWrite Writes the given file via guest agent.
func (c *Client) FileWrite(ctx context.Context, req FileWriteRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/file-write", "POST", nil, req)
	return err
}
