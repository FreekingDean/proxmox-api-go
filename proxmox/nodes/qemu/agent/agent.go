// File generated by proxmox json schema, DO NOT EDIT

package agent

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type IndexResponse []*map[string]interface{}

// Index Qemu Agent command index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Command string `url:"command",json:"command"`
	Node    string `url:"node",json:"node"`
	Vmid    int    `url:"vmid",json:"vmid"`
}

type CreateResponse map[string]interface{}

// Create Execute Qemu Guest Agent commands.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent", "POST", &resp, req)
	return resp, err
}

type FsfreezeFreezeRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FsfreezeFreezeResponse map[string]interface{}

// FsfreezeFreeze Execute fsfreeze-freeze.
func (c *Client) FsfreezeFreeze(ctx context.Context, req *FsfreezeFreezeRequest) (*FsfreezeFreezeResponse, error) {
	var resp *FsfreezeFreezeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-freeze", "POST", &resp, req)
	return resp, err
}

type FsfreezeStatusRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FsfreezeStatusResponse map[string]interface{}

// FsfreezeStatus Execute fsfreeze-status.
func (c *Client) FsfreezeStatus(ctx context.Context, req *FsfreezeStatusRequest) (*FsfreezeStatusResponse, error) {
	var resp *FsfreezeStatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-status", "POST", &resp, req)
	return resp, err
}

type FsfreezeThawRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FsfreezeThawResponse map[string]interface{}

// FsfreezeThaw Execute fsfreeze-thaw.
func (c *Client) FsfreezeThaw(ctx context.Context, req *FsfreezeThawRequest) (*FsfreezeThawResponse, error) {
	var resp *FsfreezeThawResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-thaw", "POST", &resp, req)
	return resp, err
}

type FstrimRequest struct {
	Vmid int    `url:"vmid",json:"vmid"`
	Node string `url:"node",json:"node"`
}

type FstrimResponse map[string]interface{}

// Fstrim Execute fstrim.
func (c *Client) Fstrim(ctx context.Context, req *FstrimRequest) (*FstrimResponse, error) {
	var resp *FstrimResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/fstrim", "POST", &resp, req)
	return resp, err
}

type GetFsinfoRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetFsinfoResponse map[string]interface{}

// GetFsinfo Execute get-fsinfo.
func (c *Client) GetFsinfo(ctx context.Context, req *GetFsinfoRequest) (*GetFsinfoResponse, error) {
	var resp *GetFsinfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-fsinfo", "GET", &resp, req)
	return resp, err
}

type GetHostNameRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetHostNameResponse map[string]interface{}

// GetHostName Execute get-host-name.
func (c *Client) GetHostName(ctx context.Context, req *GetHostNameRequest) (*GetHostNameResponse, error) {
	var resp *GetHostNameResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-host-name", "GET", &resp, req)
	return resp, err
}

type GetMemoryBlockInfoRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetMemoryBlockInfoResponse map[string]interface{}

// GetMemoryBlockInfo Execute get-memory-block-info.
func (c *Client) GetMemoryBlockInfo(ctx context.Context, req *GetMemoryBlockInfoRequest) (*GetMemoryBlockInfoResponse, error) {
	var resp *GetMemoryBlockInfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-memory-block-info", "GET", &resp, req)
	return resp, err
}

type GetMemoryBlocksRequest struct {
	Vmid int    `url:"vmid",json:"vmid"`
	Node string `url:"node",json:"node"`
}

type GetMemoryBlocksResponse map[string]interface{}

// GetMemoryBlocks Execute get-memory-blocks.
func (c *Client) GetMemoryBlocks(ctx context.Context, req *GetMemoryBlocksRequest) (*GetMemoryBlocksResponse, error) {
	var resp *GetMemoryBlocksResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-memory-blocks", "GET", &resp, req)
	return resp, err
}

type GetOsinfoRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetOsinfoResponse map[string]interface{}

// GetOsinfo Execute get-osinfo.
func (c *Client) GetOsinfo(ctx context.Context, req *GetOsinfoRequest) (*GetOsinfoResponse, error) {
	var resp *GetOsinfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-osinfo", "GET", &resp, req)
	return resp, err
}

type GetTimeRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetTimeResponse map[string]interface{}

// GetTime Execute get-time.
func (c *Client) GetTime(ctx context.Context, req *GetTimeRequest) (*GetTimeResponse, error) {
	var resp *GetTimeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-time", "GET", &resp, req)
	return resp, err
}

type GetTimezoneRequest struct {
	Vmid int    `url:"vmid",json:"vmid"`
	Node string `url:"node",json:"node"`
}

type GetTimezoneResponse map[string]interface{}

// GetTimezone Execute get-timezone.
func (c *Client) GetTimezone(ctx context.Context, req *GetTimezoneRequest) (*GetTimezoneResponse, error) {
	var resp *GetTimezoneResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-timezone", "GET", &resp, req)
	return resp, err
}

type GetUsersRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetUsersResponse map[string]interface{}

// GetUsers Execute get-users.
func (c *Client) GetUsers(ctx context.Context, req *GetUsersRequest) (*GetUsersResponse, error) {
	var resp *GetUsersResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-users", "GET", &resp, req)
	return resp, err
}

type GetVcpusRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type GetVcpusResponse map[string]interface{}

// GetVcpus Execute get-vcpus.
func (c *Client) GetVcpus(ctx context.Context, req *GetVcpusRequest) (*GetVcpusResponse, error) {
	var resp *GetVcpusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/get-vcpus", "GET", &resp, req)
	return resp, err
}

type InfoRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type InfoResponse map[string]interface{}

// Info Execute info.
func (c *Client) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	var resp *InfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/info", "GET", &resp, req)
	return resp, err
}

type NetworkGetInterfacesRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type NetworkGetInterfacesResponse map[string]interface{}

// NetworkGetInterfaces Execute network-get-interfaces.
func (c *Client) NetworkGetInterfaces(ctx context.Context, req *NetworkGetInterfacesRequest) (*NetworkGetInterfacesResponse, error) {
	var resp *NetworkGetInterfacesResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/network-get-interfaces", "GET", &resp, req)
	return resp, err
}

type PingRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type PingResponse map[string]interface{}

// Ping Execute ping.
func (c *Client) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	var resp *PingResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/ping", "POST", &resp, req)
	return resp, err
}

type ShutdownRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type ShutdownResponse map[string]interface{}

// Shutdown Execute shutdown.
func (c *Client) Shutdown(ctx context.Context, req *ShutdownRequest) (*ShutdownResponse, error) {
	var resp *ShutdownResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/shutdown", "POST", &resp, req)
	return resp, err
}

type SuspendDiskRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type SuspendDiskResponse map[string]interface{}

// SuspendDisk Execute suspend-disk.
func (c *Client) SuspendDisk(ctx context.Context, req *SuspendDiskRequest) (*SuspendDiskResponse, error) {
	var resp *SuspendDiskResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/suspend-disk", "POST", &resp, req)
	return resp, err
}

type SuspendHybridRequest struct {
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type SuspendHybridResponse map[string]interface{}

// SuspendHybrid Execute suspend-hybrid.
func (c *Client) SuspendHybrid(ctx context.Context, req *SuspendHybridRequest) (*SuspendHybridResponse, error) {
	var resp *SuspendHybridResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/suspend-hybrid", "POST", &resp, req)
	return resp, err
}

type SuspendRamRequest struct {
	Vmid int    `url:"vmid",json:"vmid"`
	Node string `url:"node",json:"node"`
}

type SuspendRamResponse map[string]interface{}

// SuspendRam Execute suspend-ram.
func (c *Client) SuspendRam(ctx context.Context, req *SuspendRamRequest) (*SuspendRamResponse, error) {
	var resp *SuspendRamResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/suspend-ram", "POST", &resp, req)
	return resp, err
}

type SetUserPasswordRequest struct {
	Node     string `url:"node",json:"node"`
	Password string `url:"password",json:"password"`
	Username string `url:"username",json:"username"`
	Vmid     int    `url:"vmid",json:"vmid"`
	Crypted  *bool  `url:"crypted,omitempty",json:"crypted,omitempty"`
}

type SetUserPasswordResponse map[string]interface{}

// SetUserPassword Sets the password for the given user to the given password
func (c *Client) SetUserPassword(ctx context.Context, req *SetUserPasswordRequest) (*SetUserPasswordResponse, error) {
	var resp *SetUserPasswordResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/set-user-password", "POST", &resp, req)
	return resp, err
}

type ExecRequest struct {
	Command   *string `url:"command,omitempty",json:"command,omitempty"`
	InputData *string `url:"input-data,omitempty",json:"input-data,omitempty"`
	Node      string  `url:"node",json:"node"`
	Vmid      int     `url:"vmid",json:"vmid"`
}

type ExecResponse struct {
	Pid int `url:"pid",json:"pid"`
}

// Exec Executes the given command in the vm via the guest-agent and returns an object with the pid.
func (c *Client) Exec(ctx context.Context, req *ExecRequest) (*ExecResponse, error) {
	var resp *ExecResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/exec", "POST", &resp, req)
	return resp, err
}

type ExecStatusRequest struct {
	Node string `url:"node",json:"node"`
	Pid  int    `url:"pid",json:"pid"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type ExecStatusResponse struct {
	OutData      *string `url:"out-data,omitempty",json:"out-data,omitempty"`
	OutTruncated *bool   `url:"out-truncated,omitempty",json:"out-truncated,omitempty"`
	Signal       *int    `url:"signal,omitempty",json:"signal,omitempty"`
	ErrData      *string `url:"err-data,omitempty",json:"err-data,omitempty"`
	ErrTruncated *bool   `url:"err-truncated,omitempty",json:"err-truncated,omitempty"`
	Exitcode     *int    `url:"exitcode,omitempty",json:"exitcode,omitempty"`
	Exited       bool    `url:"exited",json:"exited"`
}

// ExecStatus Gets the status of the given pid started by the guest-agent
func (c *Client) ExecStatus(ctx context.Context, req *ExecStatusRequest) (*ExecStatusResponse, error) {
	var resp *ExecStatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/exec-status", "GET", &resp, req)
	return resp, err
}

type FileReadRequest struct {
	File string `url:"file",json:"file"`
	Node string `url:"node",json:"node"`
	Vmid int    `url:"vmid",json:"vmid"`
}

type FileReadResponse struct {
	Content   string `url:"content",json:"content"`
	Truncated *bool  `url:"truncated,omitempty",json:"truncated,omitempty"`
}

// FileRead Reads the given file via guest agent. Is limited to 16777216 bytes.
func (c *Client) FileRead(ctx context.Context, req *FileReadRequest) (*FileReadResponse, error) {
	var resp *FileReadResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/file-read", "GET", &resp, req)
	return resp, err
}

type FileWriteRequest struct {
	File    string `url:"file",json:"file"`
	Node    string `url:"node",json:"node"`
	Vmid    int    `url:"vmid",json:"vmid"`
	Content string `url:"content",json:"content"`
	Encode  *bool  `url:"encode,omitempty",json:"encode,omitempty"`
}

type FileWriteResponse map[string]interface{}

// FileWrite Writes the given file via guest agent.
func (c *Client) FileWrite(ctx context.Context, req *FileWriteRequest) (*FileWriteResponse, error) {
	var resp *FileWriteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/agent/file-write", "POST", &resp, req)
	return resp, err
}
