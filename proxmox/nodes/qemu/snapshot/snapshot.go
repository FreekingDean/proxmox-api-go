// File generated by proxmox json schema, DO NOT EDIT

package snapshot

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.
	Vmid int    `url:"vmid" json:"vmid"` // The (unique) ID of the VM.

}
type _IndexRequest IndexRequest

type IndexResponse struct {
	Description string `url:"description" json:"description"` // Snapshot description.
	Name        string `url:"name" json:"name"`               // Snapshot identifier. Value 'current' identifies the current VM.

	// The following parameters are optional
	Parent   *string       `url:"parent,omitempty" json:"parent,omitempty"`     // Parent snapshot identifier.
	Snaptime *int          `url:"snaptime,omitempty" json:"snaptime,omitempty"` // Snapshot creation time
	Vmstate  *util.PVEBool `url:"vmstate,omitempty" json:"vmstate,omitempty"`   // Snapshot includes RAM.
}
type _IndexResponse IndexResponse

type CreateRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Snapname string `url:"snapname" json:"snapname"` // The name of the snapshot.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

	// The following parameters are optional
	Description *string       `url:"description,omitempty" json:"description,omitempty"` // A textual description or comment.
	Vmstate     *util.PVEBool `url:"vmstate,omitempty" json:"vmstate,omitempty"`         // Save the vmstate
}
type _CreateRequest CreateRequest

type FindRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Snapname string `url:"snapname" json:"snapname"` // The name of the snapshot.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

}
type _FindRequest FindRequest

type DeleteRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Snapname string `url:"snapname" json:"snapname"` // The name of the snapshot.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

	// The following parameters are optional
	Force *util.PVEBool `url:"force,omitempty" json:"force,omitempty"` // For removal from config file, even if removing disk snapshots fails.
}
type _DeleteRequest DeleteRequest

type GetSnapshotConfigRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Snapname string `url:"snapname" json:"snapname"` // The name of the snapshot.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

}
type _GetSnapshotConfigRequest GetSnapshotConfigRequest

type UpdateSnapshotConfigRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Snapname string `url:"snapname" json:"snapname"` // The name of the snapshot.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

	// The following parameters are optional
	Description *string `url:"description,omitempty" json:"description,omitempty"` // A textual description or comment.
}
type _UpdateSnapshotConfigRequest UpdateSnapshotConfigRequest

type RollbackRequest struct {
	Node     string `url:"node" json:"node"`         // The cluster node name.
	Snapname string `url:"snapname" json:"snapname"` // The name of the snapshot.
	Vmid     int    `url:"vmid" json:"vmid"`         // The (unique) ID of the VM.

	// The following parameters are optional
	Start *util.PVEBool `url:"start,omitempty" json:"start,omitempty"` // Whether the VM should get started after rolling back successfully
}
type _RollbackRequest RollbackRequest

// Index List all snapshots.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot", "GET", &resp, req)
	return resp, err
}

// Create Snapshot a VM.
func (c *Client) Create(ctx context.Context, req CreateRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot", "POST", &resp, req)
	return resp, err
}

// Find
func (c *Client) Find(ctx context.Context, req FindRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}", "GET", &resp, req)
	return resp, err
}

// Delete Delete a VM snapshot.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}", "DELETE", &resp, req)
	return resp, err
}

// GetSnapshotConfig Get snapshot configuration
func (c *Client) GetSnapshotConfig(ctx context.Context, req GetSnapshotConfigRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/config", "GET", &resp, req)
	return resp, err
}

// UpdateSnapshotConfig Update snapshot metadata.
func (c *Client) UpdateSnapshotConfig(ctx context.Context, req UpdateSnapshotConfigRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/config", "PUT", nil, req)
	return err
}

// Rollback Rollback VM state to specified snapshot.
func (c *Client) Rollback(ctx context.Context, req RollbackRequest) (string, error) {
	var resp string

	err := c.httpClient.Do(ctx, "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/rollback", "POST", &resp, req)
	return resp, err
}
