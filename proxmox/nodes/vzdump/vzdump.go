// File generated by proxmox json schema, DO NOT EDIT

package vzdump

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type CreateRequest struct {
	Mailnotification *string `url:"mailnotification,omitempty",json:"mailnotification,omitempty"`
	Remove           *bool   `url:"remove,omitempty",json:"remove,omitempty"`
	Storage          *string `url:"storage,omitempty",json:"storage,omitempty"`
	Vmid             *string `url:"vmid,omitempty",json:"vmid,omitempty"`
	Exclude          *string `url:"exclude,omitempty",json:"exclude,omitempty"`
	Script           *string `url:"script,omitempty",json:"script,omitempty"`
	Mailto           *string `url:"mailto,omitempty",json:"mailto,omitempty"`
	PruneBackups     *string `url:"prune-backups,omitempty",json:"prune-backups,omitempty"`
	Stdout           *bool   `url:"stdout,omitempty",json:"stdout,omitempty"`
	All              *bool   `url:"all,omitempty",json:"all,omitempty"`
	Maxfiles         *int    `url:"maxfiles,omitempty",json:"maxfiles,omitempty"`
	Mode             *string `url:"mode,omitempty",json:"mode,omitempty"`
	Node             *string `url:"node,omitempty",json:"node,omitempty"`
	Performance      *string `url:"performance,omitempty",json:"performance,omitempty"`
	Quiet            *bool   `url:"quiet,omitempty",json:"quiet,omitempty"`
	Stop             *bool   `url:"stop,omitempty",json:"stop,omitempty"`
	ExcludePath      *string `url:"exclude-path,omitempty",json:"exclude-path,omitempty"`
	NotesTemplate    *string `url:"notes-template,omitempty",json:"notes-template,omitempty"`
	Pigz             *int    `url:"pigz,omitempty",json:"pigz,omitempty"`
	Dumpdir          *string `url:"dumpdir,omitempty",json:"dumpdir,omitempty"`
	Protected        *bool   `url:"protected,omitempty",json:"protected,omitempty"`
	Tmpdir           *string `url:"tmpdir,omitempty",json:"tmpdir,omitempty"`
	Zstd             *int    `url:"zstd,omitempty",json:"zstd,omitempty"`
	Compress         *string `url:"compress,omitempty",json:"compress,omitempty"`
	Stdexcludes      *bool   `url:"stdexcludes,omitempty",json:"stdexcludes,omitempty"`
	Lockwait         *int    `url:"lockwait,omitempty",json:"lockwait,omitempty"`
	Ionice           *int    `url:"ionice,omitempty",json:"ionice,omitempty"`
	Pool             *string `url:"pool,omitempty",json:"pool,omitempty"`
	Stopwait         *int    `url:"stopwait,omitempty",json:"stopwait,omitempty"`
	Bwlimit          *int    `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
}

type CreateResponse string

// Create Create backup.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/vzdump", "POST", &resp, req)
	return resp, err
}

type DefaultsRequest struct {
	Node    string  `url:"node",json:"node"`
	Storage *string `url:"storage,omitempty",json:"storage,omitempty"`
}

type DefaultsResponse struct {
	Mode             *string `url:"mode,omitempty",json:"mode,omitempty"`
	Pool             *string `url:"pool,omitempty",json:"pool,omitempty"`
	Script           *string `url:"script,omitempty",json:"script,omitempty"`
	Stopwait         *int    `url:"stopwait,omitempty",json:"stopwait,omitempty"`
	Tmpdir           *string `url:"tmpdir,omitempty",json:"tmpdir,omitempty"`
	Exclude          *string `url:"exclude,omitempty",json:"exclude,omitempty"`
	Performance      *string `url:"performance,omitempty",json:"performance,omitempty"`
	PruneBackups     *string `url:"prune-backups,omitempty",json:"prune-backups,omitempty"`
	Lockwait         *int    `url:"lockwait,omitempty",json:"lockwait,omitempty"`
	Mailto           *string `url:"mailto,omitempty",json:"mailto,omitempty"`
	NotesTemplate    *string `url:"notes-template,omitempty",json:"notes-template,omitempty"`
	Pigz             *int    `url:"pigz,omitempty",json:"pigz,omitempty"`
	Protected        *bool   `url:"protected,omitempty",json:"protected,omitempty"`
	Zstd             *int    `url:"zstd,omitempty",json:"zstd,omitempty"`
	All              *bool   `url:"all,omitempty",json:"all,omitempty"`
	Mailnotification *string `url:"mailnotification,omitempty",json:"mailnotification,omitempty"`
	Node             *string `url:"node,omitempty",json:"node,omitempty"`
	Vmid             *string `url:"vmid,omitempty",json:"vmid,omitempty"`
	Dumpdir          *string `url:"dumpdir,omitempty",json:"dumpdir,omitempty"`
	Maxfiles         *int    `url:"maxfiles,omitempty",json:"maxfiles,omitempty"`
	Quiet            *bool   `url:"quiet,omitempty",json:"quiet,omitempty"`
	Bwlimit          *int    `url:"bwlimit,omitempty",json:"bwlimit,omitempty"`
	ExcludePath      *string `url:"exclude-path,omitempty",json:"exclude-path,omitempty"`
	Ionice           *int    `url:"ionice,omitempty",json:"ionice,omitempty"`
	Remove           *bool   `url:"remove,omitempty",json:"remove,omitempty"`
	Stdexcludes      *bool   `url:"stdexcludes,omitempty",json:"stdexcludes,omitempty"`
	Stop             *bool   `url:"stop,omitempty",json:"stop,omitempty"`
	Storage          *string `url:"storage,omitempty",json:"storage,omitempty"`
	Compress         *string `url:"compress,omitempty",json:"compress,omitempty"`
}

// Defaults Get the currently configured vzdump defaults.
func (c *Client) Defaults(ctx context.Context, req *DefaultsRequest) (*DefaultsResponse, error) {
	var resp *DefaultsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/vzdump/defaults", "GET", &resp, req)
	return resp, err
}

type ExtractconfigRequest struct {
	Volume string `url:"volume",json:"volume"`
	Node   string `url:"node",json:"node"`
}

type ExtractconfigResponse string

// Extractconfig Extract configuration from vzdump backup archive.
func (c *Client) Extractconfig(ctx context.Context, req *ExtractconfigRequest) (*ExtractconfigResponse, error) {
	var resp *ExtractconfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/vzdump/extractconfig", "GET", &resp, req)
	return resp, err
}
