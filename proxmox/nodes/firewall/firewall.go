// File generated by proxmox json schema, DO NOT EDIT

package firewall

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type GetOptionsRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

}

type GetOptionsResponse struct {

	// The following parameters are optional
	Enable                           *util.SpecialBool `url:"enable,omitempty" json:"enable,omitempty"`                                                             // Enable host firewall rules.
	LogLevelIn                       *string           `url:"log_level_in,omitempty" json:"log_level_in,omitempty"`                                                 // Log level for incoming traffic.
	LogLevelOut                      *string           `url:"log_level_out,omitempty" json:"log_level_out,omitempty"`                                               // Log level for outgoing traffic.
	LogNfConntrack                   *util.SpecialBool `url:"log_nf_conntrack,omitempty" json:"log_nf_conntrack,omitempty"`                                         // Enable logging of conntrack information.
	Ndp                              *util.SpecialBool `url:"ndp,omitempty" json:"ndp,omitempty"`                                                                   // Enable NDP (Neighbor Discovery Protocol).
	NfConntrackAllowInvalid          *util.SpecialBool `url:"nf_conntrack_allow_invalid,omitempty" json:"nf_conntrack_allow_invalid,omitempty"`                     // Allow invalid packets on connection tracking.
	NfConntrackMax                   *int              `url:"nf_conntrack_max,omitempty" json:"nf_conntrack_max,omitempty"`                                         // Maximum number of tracked connections.
	NfConntrackTcpTimeoutEstablished *int              `url:"nf_conntrack_tcp_timeout_established,omitempty" json:"nf_conntrack_tcp_timeout_established,omitempty"` // Conntrack established timeout.
	NfConntrackTcpTimeoutSynRecv     *int              `url:"nf_conntrack_tcp_timeout_syn_recv,omitempty" json:"nf_conntrack_tcp_timeout_syn_recv,omitempty"`       // Conntrack syn recv timeout.
	Nosmurfs                         *util.SpecialBool `url:"nosmurfs,omitempty" json:"nosmurfs,omitempty"`                                                         // Enable SMURFS filter.
	ProtectionSynflood               *util.SpecialBool `url:"protection_synflood,omitempty" json:"protection_synflood,omitempty"`                                   // Enable synflood protection
	ProtectionSynfloodBurst          *int              `url:"protection_synflood_burst,omitempty" json:"protection_synflood_burst,omitempty"`                       // Synflood protection rate burst by ip src.
	ProtectionSynfloodRate           *int              `url:"protection_synflood_rate,omitempty" json:"protection_synflood_rate,omitempty"`                         // Synflood protection rate syn/sec by ip src.
	SmurfLogLevel                    *string           `url:"smurf_log_level,omitempty" json:"smurf_log_level,omitempty"`                                           // Log level for SMURFS filter.
	TcpFlagsLogLevel                 *string           `url:"tcp_flags_log_level,omitempty" json:"tcp_flags_log_level,omitempty"`                                   // Log level for illegal tcp flags filter.
	Tcpflags                         *util.SpecialBool `url:"tcpflags,omitempty" json:"tcpflags,omitempty"`                                                         // Filter illegal combinations of TCP flags.
}

type SetOptionsRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Delete                           *string           `url:"delete,omitempty" json:"delete,omitempty"`                                                             // A list of settings you want to delete.
	Digest                           *string           `url:"digest,omitempty" json:"digest,omitempty"`                                                             // Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.
	Enable                           *util.SpecialBool `url:"enable,omitempty" json:"enable,omitempty"`                                                             // Enable host firewall rules.
	LogLevelIn                       *string           `url:"log_level_in,omitempty" json:"log_level_in,omitempty"`                                                 // Log level for incoming traffic.
	LogLevelOut                      *string           `url:"log_level_out,omitempty" json:"log_level_out,omitempty"`                                               // Log level for outgoing traffic.
	LogNfConntrack                   *util.SpecialBool `url:"log_nf_conntrack,omitempty" json:"log_nf_conntrack,omitempty"`                                         // Enable logging of conntrack information.
	Ndp                              *util.SpecialBool `url:"ndp,omitempty" json:"ndp,omitempty"`                                                                   // Enable NDP (Neighbor Discovery Protocol).
	NfConntrackAllowInvalid          *util.SpecialBool `url:"nf_conntrack_allow_invalid,omitempty" json:"nf_conntrack_allow_invalid,omitempty"`                     // Allow invalid packets on connection tracking.
	NfConntrackMax                   *int              `url:"nf_conntrack_max,omitempty" json:"nf_conntrack_max,omitempty"`                                         // Maximum number of tracked connections.
	NfConntrackTcpTimeoutEstablished *int              `url:"nf_conntrack_tcp_timeout_established,omitempty" json:"nf_conntrack_tcp_timeout_established,omitempty"` // Conntrack established timeout.
	NfConntrackTcpTimeoutSynRecv     *int              `url:"nf_conntrack_tcp_timeout_syn_recv,omitempty" json:"nf_conntrack_tcp_timeout_syn_recv,omitempty"`       // Conntrack syn recv timeout.
	Nosmurfs                         *util.SpecialBool `url:"nosmurfs,omitempty" json:"nosmurfs,omitempty"`                                                         // Enable SMURFS filter.
	ProtectionSynflood               *util.SpecialBool `url:"protection_synflood,omitempty" json:"protection_synflood,omitempty"`                                   // Enable synflood protection
	ProtectionSynfloodBurst          *int              `url:"protection_synflood_burst,omitempty" json:"protection_synflood_burst,omitempty"`                       // Synflood protection rate burst by ip src.
	ProtectionSynfloodRate           *int              `url:"protection_synflood_rate,omitempty" json:"protection_synflood_rate,omitempty"`                         // Synflood protection rate syn/sec by ip src.
	SmurfLogLevel                    *string           `url:"smurf_log_level,omitempty" json:"smurf_log_level,omitempty"`                                           // Log level for SMURFS filter.
	TcpFlagsLogLevel                 *string           `url:"tcp_flags_log_level,omitempty" json:"tcp_flags_log_level,omitempty"`                                   // Log level for illegal tcp flags filter.
	Tcpflags                         *util.SpecialBool `url:"tcpflags,omitempty" json:"tcpflags,omitempty"`                                                         // Filter illegal combinations of TCP flags.
}

type LogRequest struct {
	Node string `url:"node" json:"node"` // The cluster node name.

	// The following parameters are optional
	Limit *int `url:"limit,omitempty" json:"limit,omitempty"`
	Start *int `url:"start,omitempty" json:"start,omitempty"`
}

type LogResponse struct {
	N int    `url:"n" json:"n"` // Line number
	T string `url:"t" json:"t"` // Line text

}

// Index Directory index.
func (c *Client) Index(ctx context.Context, req IndexRequest) ([]map[string]interface{}, error) {
	var resp []map[string]interface{}

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall", "GET", &resp, req)
	return resp, err
}

// GetOptions Get host firewall options.
func (c *Client) GetOptions(ctx context.Context, req GetOptionsRequest) (GetOptionsResponse, error) {
	var resp GetOptionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall/options", "GET", &resp, req)
	return resp, err
}

// SetOptions Set Firewall options.
func (c *Client) SetOptions(ctx context.Context, req SetOptionsRequest) error {

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall/options", "PUT", nil, req)
	return err
}

// Log Read firewall log
func (c *Client) Log(ctx context.Context, req LogRequest) ([]LogResponse, error) {
	var resp []LogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall/log", "GET", &resp, req)
	return resp, err
}
