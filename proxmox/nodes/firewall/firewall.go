// File generated by proxmox json schema, DO NOT EDIT

package firewall

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Node string `url:"node",json:"node"`
}

type IndexResponse []*map[string]interface{}

// Index Directory index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall", "GET", &resp, req)
	return resp, err
}

type GetOptionsRequest struct {
	Node string `url:"node",json:"node"`
}

type GetOptionsResponse struct {
	NfConntrackTcpTimeoutSynRecv     *int    `url:"nf_conntrack_tcp_timeout_syn_recv,omitempty",json:"nf_conntrack_tcp_timeout_syn_recv,omitempty"`
	SmurfLogLevel                    *string `url:"smurf_log_level,omitempty",json:"smurf_log_level,omitempty"`
	Enable                           *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	LogLevelIn                       *string `url:"log_level_in,omitempty",json:"log_level_in,omitempty"`
	NfConntrackAllowInvalid          *bool   `url:"nf_conntrack_allow_invalid,omitempty",json:"nf_conntrack_allow_invalid,omitempty"`
	NfConntrackMax                   *int    `url:"nf_conntrack_max,omitempty",json:"nf_conntrack_max,omitempty"`
	LogLevelOut                      *string `url:"log_level_out,omitempty",json:"log_level_out,omitempty"`
	Ndp                              *bool   `url:"ndp,omitempty",json:"ndp,omitempty"`
	ProtectionSynfloodBurst          *int    `url:"protection_synflood_burst,omitempty",json:"protection_synflood_burst,omitempty"`
	ProtectionSynfloodRate           *int    `url:"protection_synflood_rate,omitempty",json:"protection_synflood_rate,omitempty"`
	TcpFlagsLogLevel                 *string `url:"tcp_flags_log_level,omitempty",json:"tcp_flags_log_level,omitempty"`
	Tcpflags                         *bool   `url:"tcpflags,omitempty",json:"tcpflags,omitempty"`
	LogNfConntrack                   *bool   `url:"log_nf_conntrack,omitempty",json:"log_nf_conntrack,omitempty"`
	NfConntrackTcpTimeoutEstablished *int    `url:"nf_conntrack_tcp_timeout_established,omitempty",json:"nf_conntrack_tcp_timeout_established,omitempty"`
	Nosmurfs                         *bool   `url:"nosmurfs,omitempty",json:"nosmurfs,omitempty"`
	ProtectionSynflood               *bool   `url:"protection_synflood,omitempty",json:"protection_synflood,omitempty"`
}

// GetOptions Get host firewall options.
func (c *Client) GetOptions(ctx context.Context, req *GetOptionsRequest) (*GetOptionsResponse, error) {
	var resp *GetOptionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall/options", "GET", &resp, req)
	return resp, err
}

type SetOptionsRequest struct {
	NfConntrackAllowInvalid          *bool   `url:"nf_conntrack_allow_invalid,omitempty",json:"nf_conntrack_allow_invalid,omitempty"`
	ProtectionSynflood               *bool   `url:"protection_synflood,omitempty",json:"protection_synflood,omitempty"`
	SmurfLogLevel                    *string `url:"smurf_log_level,omitempty",json:"smurf_log_level,omitempty"`
	Enable                           *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	Digest                           *string `url:"digest,omitempty",json:"digest,omitempty"`
	LogNfConntrack                   *bool   `url:"log_nf_conntrack,omitempty",json:"log_nf_conntrack,omitempty"`
	Node                             string  `url:"node",json:"node"`
	Delete                           *string `url:"delete,omitempty",json:"delete,omitempty"`
	Ndp                              *bool   `url:"ndp,omitempty",json:"ndp,omitempty"`
	NfConntrackTcpTimeoutEstablished *int    `url:"nf_conntrack_tcp_timeout_established,omitempty",json:"nf_conntrack_tcp_timeout_established,omitempty"`
	NfConntrackTcpTimeoutSynRecv     *int    `url:"nf_conntrack_tcp_timeout_syn_recv,omitempty",json:"nf_conntrack_tcp_timeout_syn_recv,omitempty"`
	Nosmurfs                         *bool   `url:"nosmurfs,omitempty",json:"nosmurfs,omitempty"`
	ProtectionSynfloodRate           *int    `url:"protection_synflood_rate,omitempty",json:"protection_synflood_rate,omitempty"`
	Tcpflags                         *bool   `url:"tcpflags,omitempty",json:"tcpflags,omitempty"`
	LogLevelOut                      *string `url:"log_level_out,omitempty",json:"log_level_out,omitempty"`
	NfConntrackMax                   *int    `url:"nf_conntrack_max,omitempty",json:"nf_conntrack_max,omitempty"`
	ProtectionSynfloodBurst          *int    `url:"protection_synflood_burst,omitempty",json:"protection_synflood_burst,omitempty"`
	TcpFlagsLogLevel                 *string `url:"tcp_flags_log_level,omitempty",json:"tcp_flags_log_level,omitempty"`
	LogLevelIn                       *string `url:"log_level_in,omitempty",json:"log_level_in,omitempty"`
}

type SetOptionsResponse map[string]interface{}

// SetOptions Set Firewall options.
func (c *Client) SetOptions(ctx context.Context, req *SetOptionsRequest) (*SetOptionsResponse, error) {
	var resp *SetOptionsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall/options", "PUT", &resp, req)
	return resp, err
}

type LogRequest struct {
	Limit *int   `url:"limit,omitempty",json:"limit,omitempty"`
	Node  string `url:"node",json:"node"`
	Start *int   `url:"start,omitempty",json:"start,omitempty"`
}

type LogResponse []*struct {
	N int    `url:"n",json:"n"`
	T string `url:"t",json:"t"`
}

// Log Read firewall log
func (c *Client) Log(ctx context.Context, req *LogRequest) (*LogResponse, error) {
	var resp *LogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/firewall/log", "GET", &resp, req)
	return resp, err
}
