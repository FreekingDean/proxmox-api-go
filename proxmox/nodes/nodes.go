// File generated by proxmox json schema, DO NOT EDIT

package nodes

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Uptime         *int     `url:"uptime,omitempty",json:"uptime,omitempty"`
	Maxmem         *int     `url:"maxmem,omitempty",json:"maxmem,omitempty"`
	Mem            *int     `url:"mem,omitempty",json:"mem,omitempty"`
	Maxcpu         *int     `url:"maxcpu,omitempty",json:"maxcpu,omitempty"`
	Node           string   `url:"node",json:"node"`
	SslFingerprint *string  `url:"ssl_fingerprint,omitempty",json:"ssl_fingerprint,omitempty"`
	Status         string   `url:"status",json:"status"`
	Cpu            *float64 `url:"cpu,omitempty",json:"cpu,omitempty"`
	Level          *string  `url:"level,omitempty",json:"level,omitempty"`
}

// Index Cluster node index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/nodes", "GET", &resp, nil)
	return resp, err
}

type FindRequest struct {
	Node string `url:"node",json:"node"`
}

type FindResponse []*map[string]interface{}

// Find Node index.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}", "GET", &resp, req)
	return resp, err
}

type DeleteSubscriptionRequest struct {
	Node string `url:"node",json:"node"`
}

type DeleteSubscriptionResponse map[string]interface{}

// DeleteSubscription Delete subscription key of this node.
func (c *Client) DeleteSubscription(ctx context.Context, req *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	var resp *DeleteSubscriptionResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/subscription", "DELETE", &resp, req)
	return resp, err
}

type GetSubscriptionRequest struct {
	Node string `url:"node",json:"node"`
}

type GetSubscriptionResponse map[string]interface{}

// GetSubscription Read subscription info.
func (c *Client) GetSubscription(ctx context.Context, req *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	var resp *GetSubscriptionResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/subscription", "GET", &resp, req)
	return resp, err
}

type UpdateSubscriptionRequest struct {
	Force *bool  `url:"force,omitempty",json:"force,omitempty"`
	Node  string `url:"node",json:"node"`
}

type UpdateSubscriptionResponse map[string]interface{}

// UpdateSubscription Update subscription info.
func (c *Client) UpdateSubscription(ctx context.Context, req *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	var resp *UpdateSubscriptionResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/subscription", "POST", &resp, req)
	return resp, err
}

type SetSubscriptionRequest struct {
	Node string `url:"node",json:"node"`
	Key  string `url:"key",json:"key"`
}

type SetSubscriptionResponse map[string]interface{}

// SetSubscription Set subscription key.
func (c *Client) SetSubscription(ctx context.Context, req *SetSubscriptionRequest) (*SetSubscriptionResponse, error) {
	var resp *SetSubscriptionResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/subscription", "PUT", &resp, req)
	return resp, err
}

type GetConfigRequest struct {
	Node     string  `url:"node",json:"node"`
	Property *string `url:"property,omitempty",json:"property,omitempty"`
}

type GetConfigResponse struct {
	StartallOnbootDelay *int    `url:"startall-onboot-delay,omitempty",json:"startall-onboot-delay,omitempty"`
	Wakeonlan           *string `url:"wakeonlan,omitempty",json:"wakeonlan,omitempty"`
	Acme                *string `url:"acme,omitempty",json:"acme,omitempty"`
	Acmedomainn         *string `url:"acmedomain[n],omitempty",json:"acmedomain[n],omitempty"`
	Description         *string `url:"description,omitempty",json:"description,omitempty"`
	Digest              *string `url:"digest,omitempty",json:"digest,omitempty"`
}

// GetConfig Get node configuration options.
func (c *Client) GetConfig(ctx context.Context, req *GetConfigRequest) (*GetConfigResponse, error) {
	var resp *GetConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/config", "GET", &resp, req)
	return resp, err
}

type SetOptionsConfigRequest struct {
	Acme                *string `url:"acme,omitempty",json:"acme,omitempty"`
	Acmedomainn         *string `url:"acmedomain[n],omitempty",json:"acmedomain[n],omitempty"`
	Delete              *string `url:"delete,omitempty",json:"delete,omitempty"`
	Description         *string `url:"description,omitempty",json:"description,omitempty"`
	Digest              *string `url:"digest,omitempty",json:"digest,omitempty"`
	Node                string  `url:"node",json:"node"`
	StartallOnbootDelay *int    `url:"startall-onboot-delay,omitempty",json:"startall-onboot-delay,omitempty"`
	Wakeonlan           *string `url:"wakeonlan,omitempty",json:"wakeonlan,omitempty"`
}

type SetOptionsConfigResponse map[string]interface{}

// SetOptionsConfig Set node configuration options.
func (c *Client) SetOptionsConfig(ctx context.Context, req *SetOptionsConfigRequest) (*SetOptionsConfigResponse, error) {
	var resp *SetOptionsConfigResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/config", "PUT", &resp, req)
	return resp, err
}

type VersionRequest struct {
	Node string `url:"node",json:"node"`
}

type VersionResponse struct {
	Release string `url:"release",json:"release"`
	Repoid  string `url:"repoid",json:"repoid"`
	Version string `url:"version",json:"version"`
}

// Version API version details
func (c *Client) Version(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	var resp *VersionResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/version", "GET", &resp, req)
	return resp, err
}

type StatusRequest struct {
	Node string `url:"node",json:"node"`
}

type StatusResponse map[string]interface{}

// Status Read node status
func (c *Client) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	var resp *StatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/status", "GET", &resp, req)
	return resp, err
}

type NodeCmdStatusRequest struct {
	Command string `url:"command",json:"command"`
	Node    string `url:"node",json:"node"`
}

type NodeCmdStatusResponse map[string]interface{}

// NodeCmdStatus Reboot or shutdown a node.
func (c *Client) NodeCmdStatus(ctx context.Context, req *NodeCmdStatusRequest) (*NodeCmdStatusResponse, error) {
	var resp *NodeCmdStatusResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/status", "POST", &resp, req)
	return resp, err
}

type NetstatRequest struct {
	Node string `url:"node",json:"node"`
}

type NetstatResponse []*map[string]interface{}

// Netstat Read tap/vm network device interface counters
func (c *Client) Netstat(ctx context.Context, req *NetstatRequest) (*NetstatResponse, error) {
	var resp *NetstatResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/netstat", "GET", &resp, req)
	return resp, err
}

type ExecuteRequest struct {
	Commands string `url:"commands",json:"commands"`
	Node     string `url:"node",json:"node"`
}

type ExecuteResponse []*map[string]interface{}

// Execute Execute multiple commands in order.
func (c *Client) Execute(ctx context.Context, req *ExecuteRequest) (*ExecuteResponse, error) {
	var resp *ExecuteResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/execute", "POST", &resp, req)
	return resp, err
}

type WakeonlanRequest struct {
	Node string `url:"node",json:"node"`
}

type WakeonlanResponse string

// Wakeonlan Try to wake a node via 'wake on LAN' network packet.
func (c *Client) Wakeonlan(ctx context.Context, req *WakeonlanRequest) (*WakeonlanResponse, error) {
	var resp *WakeonlanResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/wakeonlan", "POST", &resp, req)
	return resp, err
}

type RrdRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Ds        string  `url:"ds",json:"ds"`
	Node      string  `url:"node",json:"node"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
}

type RrdResponse struct {
	Filename string `url:"filename",json:"filename"`
}

// Rrd Read node RRD statistics (returns PNG)
func (c *Client) Rrd(ctx context.Context, req *RrdRequest) (*RrdResponse, error) {
	var resp *RrdResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/rrd", "GET", &resp, req)
	return resp, err
}

type RrddataRequest struct {
	Cf        *string `url:"cf,omitempty",json:"cf,omitempty"`
	Node      string  `url:"node",json:"node"`
	Timeframe string  `url:"timeframe",json:"timeframe"`
}

type RrddataResponse []*map[string]interface{}

// Rrddata Read node RRD statistics
func (c *Client) Rrddata(ctx context.Context, req *RrddataRequest) (*RrddataResponse, error) {
	var resp *RrddataResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/rrddata", "GET", &resp, req)
	return resp, err
}

type SyslogRequest struct {
	Service *string `url:"service,omitempty",json:"service,omitempty"`
	Since   *string `url:"since,omitempty",json:"since,omitempty"`
	Start   *int    `url:"start,omitempty",json:"start,omitempty"`
	Until   *string `url:"until,omitempty",json:"until,omitempty"`
	Limit   *int    `url:"limit,omitempty",json:"limit,omitempty"`
	Node    string  `url:"node",json:"node"`
}

type SyslogResponse []*struct {
	N int    `url:"n",json:"n"`
	T string `url:"t",json:"t"`
}

// Syslog Read system log
func (c *Client) Syslog(ctx context.Context, req *SyslogRequest) (*SyslogResponse, error) {
	var resp *SyslogResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/syslog", "GET", &resp, req)
	return resp, err
}

type JournalRequest struct {
	Until       *int    `url:"until,omitempty",json:"until,omitempty"`
	Endcursor   *string `url:"endcursor,omitempty",json:"endcursor,omitempty"`
	Lastentries *int    `url:"lastentries,omitempty",json:"lastentries,omitempty"`
	Node        string  `url:"node",json:"node"`
	Since       *int    `url:"since,omitempty",json:"since,omitempty"`
	Startcursor *string `url:"startcursor,omitempty",json:"startcursor,omitempty"`
}

type JournalResponse []string

// Journal Read Journal
func (c *Client) Journal(ctx context.Context, req *JournalRequest) (*JournalResponse, error) {
	var resp *JournalResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/journal", "GET", &resp, req)
	return resp, err
}

type VncshellRequest struct {
	Websocket *bool   `url:"websocket,omitempty",json:"websocket,omitempty"`
	Width     *int    `url:"width,omitempty",json:"width,omitempty"`
	Cmd       *string `url:"cmd,omitempty",json:"cmd,omitempty"`
	CmdOpts   *string `url:"cmd-opts,omitempty",json:"cmd-opts,omitempty"`
	Height    *int    `url:"height,omitempty",json:"height,omitempty"`
	Node      string  `url:"node",json:"node"`
}

type VncshellResponse struct {
	User   string `url:"user",json:"user"`
	Cert   string `url:"cert",json:"cert"`
	Port   int    `url:"port",json:"port"`
	Ticket string `url:"ticket",json:"ticket"`
	Upid   string `url:"upid",json:"upid"`
}

// Vncshell Creates a VNC Shell proxy.
func (c *Client) Vncshell(ctx context.Context, req *VncshellRequest) (*VncshellResponse, error) {
	var resp *VncshellResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/vncshell", "POST", &resp, req)
	return resp, err
}

type TermproxyRequest struct {
	Cmd     *string `url:"cmd,omitempty",json:"cmd,omitempty"`
	CmdOpts *string `url:"cmd-opts,omitempty",json:"cmd-opts,omitempty"`
	Node    string  `url:"node",json:"node"`
}

type TermproxyResponse struct {
	Port   int    `url:"port",json:"port"`
	Ticket string `url:"ticket",json:"ticket"`
	Upid   string `url:"upid",json:"upid"`
	User   string `url:"user",json:"user"`
}

// Termproxy Creates a VNC Shell proxy.
func (c *Client) Termproxy(ctx context.Context, req *TermproxyRequest) (*TermproxyResponse, error) {
	var resp *TermproxyResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/termproxy", "POST", &resp, req)
	return resp, err
}

type VncwebsocketRequest struct {
	Node      string `url:"node",json:"node"`
	Port      int    `url:"port",json:"port"`
	Vncticket string `url:"vncticket",json:"vncticket"`
}

type VncwebsocketResponse struct {
	Port string `url:"port",json:"port"`
}

// Vncwebsocket Opens a websocket for VNC traffic.
func (c *Client) Vncwebsocket(ctx context.Context, req *VncwebsocketRequest) (*VncwebsocketResponse, error) {
	var resp *VncwebsocketResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/vncwebsocket", "GET", &resp, req)
	return resp, err
}

type SpiceshellRequest struct {
	Cmd     *string `url:"cmd,omitempty",json:"cmd,omitempty"`
	CmdOpts *string `url:"cmd-opts,omitempty",json:"cmd-opts,omitempty"`
	Node    string  `url:"node",json:"node"`
	Proxy   *string `url:"proxy,omitempty",json:"proxy,omitempty"`
}

type SpiceshellResponse struct {
	Password string `url:"password",json:"password"`
	Proxy    string `url:"proxy",json:"proxy"`
	TlsPort  int    `url:"tls-port",json:"tls-port"`
	Type     string `url:"type",json:"type"`
	Host     string `url:"host",json:"host"`
}

// Spiceshell Creates a SPICE shell.
func (c *Client) Spiceshell(ctx context.Context, req *SpiceshellRequest) (*SpiceshellResponse, error) {
	var resp *SpiceshellResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/spiceshell", "POST", &resp, req)
	return resp, err
}

type DnsRequest struct {
	Node string `url:"node",json:"node"`
}

type DnsResponse struct {
	Dns1   *string `url:"dns1,omitempty",json:"dns1,omitempty"`
	Dns2   *string `url:"dns2,omitempty",json:"dns2,omitempty"`
	Dns3   *string `url:"dns3,omitempty",json:"dns3,omitempty"`
	Search *string `url:"search,omitempty",json:"search,omitempty"`
}

// Dns Read DNS settings.
func (c *Client) Dns(ctx context.Context, req *DnsRequest) (*DnsResponse, error) {
	var resp *DnsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/dns", "GET", &resp, req)
	return resp, err
}

type UpdateDnsRequest struct {
	Node   string  `url:"node",json:"node"`
	Search string  `url:"search",json:"search"`
	Dns1   *string `url:"dns1,omitempty",json:"dns1,omitempty"`
	Dns2   *string `url:"dns2,omitempty",json:"dns2,omitempty"`
	Dns3   *string `url:"dns3,omitempty",json:"dns3,omitempty"`
}

type UpdateDnsResponse map[string]interface{}

// UpdateDns Write DNS settings.
func (c *Client) UpdateDns(ctx context.Context, req *UpdateDnsRequest) (*UpdateDnsResponse, error) {
	var resp *UpdateDnsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/dns", "PUT", &resp, req)
	return resp, err
}

type TimeRequest struct {
	Node string `url:"node",json:"node"`
}

type TimeResponse struct {
	Localtime int    `url:"localtime",json:"localtime"`
	Time      int    `url:"time",json:"time"`
	Timezone  string `url:"timezone",json:"timezone"`
}

// Time Read server time and time zone settings.
func (c *Client) Time(ctx context.Context, req *TimeRequest) (*TimeResponse, error) {
	var resp *TimeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/time", "GET", &resp, req)
	return resp, err
}

type SetTimezoneTimeRequest struct {
	Node     string `url:"node",json:"node"`
	Timezone string `url:"timezone",json:"timezone"`
}

type SetTimezoneTimeResponse map[string]interface{}

// SetTimezoneTime Set time zone.
func (c *Client) SetTimezoneTime(ctx context.Context, req *SetTimezoneTimeRequest) (*SetTimezoneTimeResponse, error) {
	var resp *SetTimezoneTimeResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/time", "PUT", &resp, req)
	return resp, err
}

type AplDownloadAplinfoRequest struct {
	Node     string `url:"node",json:"node"`
	Storage  string `url:"storage",json:"storage"`
	Template string `url:"template",json:"template"`
}

type AplDownloadAplinfoResponse string

// AplDownloadAplinfo Download appliance templates.
func (c *Client) AplDownloadAplinfo(ctx context.Context, req *AplDownloadAplinfoRequest) (*AplDownloadAplinfoResponse, error) {
	var resp *AplDownloadAplinfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/aplinfo", "POST", &resp, req)
	return resp, err
}

type AplinfoRequest struct {
	Node string `url:"node",json:"node"`
}

type AplinfoResponse []*map[string]interface{}

// Aplinfo Get list of appliances.
func (c *Client) Aplinfo(ctx context.Context, req *AplinfoRequest) (*AplinfoResponse, error) {
	var resp *AplinfoResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/aplinfo", "GET", &resp, req)
	return resp, err
}

type QueryUrlMetadataRequest struct {
	Node               string `url:"node",json:"node"`
	Url                string `url:"url",json:"url"`
	VerifyCertificates *bool  `url:"verify-certificates,omitempty",json:"verify-certificates,omitempty"`
}

type QueryUrlMetadataResponse struct {
	Filename *string `url:"filename,omitempty",json:"filename,omitempty"`
	Mimetype *string `url:"mimetype,omitempty",json:"mimetype,omitempty"`
	Size     *int    `url:"size,omitempty",json:"size,omitempty"`
}

// QueryUrlMetadata Query metadata of an URL: file size, file name and mime type.
func (c *Client) QueryUrlMetadata(ctx context.Context, req *QueryUrlMetadataRequest) (*QueryUrlMetadataResponse, error) {
	var resp *QueryUrlMetadataResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/query-url-metadata", "GET", &resp, req)
	return resp, err
}

type ReportRequest struct {
	Node string `url:"node",json:"node"`
}

type ReportResponse string

// Report Gather various systems information about a node
func (c *Client) Report(ctx context.Context, req *ReportRequest) (*ReportResponse, error) {
	var resp *ReportResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/report", "GET", &resp, req)
	return resp, err
}

type StartallRequest struct {
	Force *bool   `url:"force,omitempty",json:"force,omitempty"`
	Node  string  `url:"node",json:"node"`
	Vms   *string `url:"vms,omitempty",json:"vms,omitempty"`
}

type StartallResponse string

// Startall Start all VMs and containers located on this node (by default only those with onboot=1).
func (c *Client) Startall(ctx context.Context, req *StartallRequest) (*StartallResponse, error) {
	var resp *StartallResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/startall", "POST", &resp, req)
	return resp, err
}

type StopallRequest struct {
	Node string  `url:"node",json:"node"`
	Vms  *string `url:"vms,omitempty",json:"vms,omitempty"`
}

type StopallResponse string

// Stopall Stop all VMs and Containers.
func (c *Client) Stopall(ctx context.Context, req *StopallRequest) (*StopallResponse, error) {
	var resp *StopallResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/stopall", "POST", &resp, req)
	return resp, err
}

type MigrateallRequest struct {
	Maxworkers     *int    `url:"maxworkers,omitempty",json:"maxworkers,omitempty"`
	Node           string  `url:"node",json:"node"`
	Target         string  `url:"target",json:"target"`
	Vms            *string `url:"vms,omitempty",json:"vms,omitempty"`
	WithLocalDisks *bool   `url:"with-local-disks,omitempty",json:"with-local-disks,omitempty"`
}

type MigrateallResponse string

// Migrateall Migrate all VMs and Containers.
func (c *Client) Migrateall(ctx context.Context, req *MigrateallRequest) (*MigrateallResponse, error) {
	var resp *MigrateallResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/migrateall", "POST", &resp, req)
	return resp, err
}

type WriteEtcHostsRequest struct {
	Data   string  `url:"data",json:"data"`
	Digest *string `url:"digest,omitempty",json:"digest,omitempty"`
	Node   string  `url:"node",json:"node"`
}

type WriteEtcHostsResponse map[string]interface{}

// WriteEtcHosts Write /etc/hosts.
func (c *Client) WriteEtcHosts(ctx context.Context, req *WriteEtcHostsRequest) (*WriteEtcHostsResponse, error) {
	var resp *WriteEtcHostsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/hosts", "POST", &resp, req)
	return resp, err
}

type GetEtcHostsRequest struct {
	Node string `url:"node",json:"node"`
}

type GetEtcHostsResponse struct {
	Data   string  `url:"data",json:"data"`
	Digest *string `url:"digest,omitempty",json:"digest,omitempty"`
}

// GetEtcHosts Get the content of /etc/hosts.
func (c *Client) GetEtcHosts(ctx context.Context, req *GetEtcHostsRequest) (*GetEtcHostsResponse, error) {
	var resp *GetEtcHostsResponse

	err := c.httpClient.Do(ctx, "/nodes/{node}/hosts", "GET", &resp, req)
	return resp, err
}
