// File generated by proxmox json schema, DO NOT EDIT

package pools

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Poolid string `url:"poolid",json:"poolid"`
}

// Index Pool index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/pools", "GET", &resp, nil)
	return resp, err
}

type CreateRequest struct {
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Poolid  string  `url:"poolid",json:"poolid"`
}

type CreateResponse map[string]interface{}

// Create Create new pool.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/pools", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Poolid string  `url:"poolid",json:"poolid"`
	Type   *string `url:"type,omitempty",json:"type,omitempty"`
}

type FindResponse struct {
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Members []*struct {
		Id      string  `url:"id",json:"id"`
		Node    string  `url:"node",json:"node"`
		Storage *string `url:"storage,omitempty",json:"storage,omitempty"`
		Type    string  `url:"type",json:"type"`
		Vmid    *int    `url:"vmid,omitempty",json:"vmid,omitempty"`
	} `url:"members",json:"members"`
}

// Find Get pool configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/pools/{poolid}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Storage *string `url:"storage,omitempty",json:"storage,omitempty"`
	Vms     *string `url:"vms,omitempty",json:"vms,omitempty"`
	Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
	Delete  *bool   `url:"delete,omitempty",json:"delete,omitempty"`
	Poolid  string  `url:"poolid",json:"poolid"`
}

type UpdateResponse map[string]interface{}

// Update Update pool data.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/pools/{poolid}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Poolid string `url:"poolid",json:"poolid"`
}

type DeleteResponse map[string]interface{}

// Delete Delete pool.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/pools/{poolid}", "DELETE", &resp, req)
	return resp, err
}
