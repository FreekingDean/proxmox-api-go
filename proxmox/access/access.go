// File generated by proxmox json schema, DO NOT EDIT

package access

import (
	"context"
	"github.com/FreekingDean/proxmox-api-go/internal/util"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse struct {
	Subdir string `url:"subdir" json:"subdir"`
}

type ReadAclResponse struct {
	Path   string `url:"path" json:"path"` // Access control path
	Roleid string `url:"roleid" json:"roleid"`
	Type   string `url:"type" json:"type"`
	Ugid   string `url:"ugid" json:"ugid"`

	// The following parameters are optional
	Propagate *util.PVEBool `url:"propagate,omitempty" json:"propagate,omitempty"` // Allow to propagate (inherit) permissions.
}

type UpdateAclRequest struct {
	Path  string `url:"path" json:"path"`   // Access control path
	Roles string `url:"roles" json:"roles"` // List of roles.

	// The following parameters are optional
	Delete    *util.PVEBool `url:"delete,omitempty" json:"delete,omitempty"`       // Remove permissions (instead of adding it).
	Groups    *string       `url:"groups,omitempty" json:"groups,omitempty"`       // List of groups.
	Propagate *util.PVEBool `url:"propagate,omitempty" json:"propagate,omitempty"` // Allow to propagate (inherit) permissions.
	Tokens    *string       `url:"tokens,omitempty" json:"tokens,omitempty"`       // List of API tokens.
	Users     *string       `url:"users,omitempty" json:"users,omitempty"`         // List of users.
}

type CreateTicketRequest struct {
	Password string `url:"password" json:"password"` // The secret password. This can also be a valid ticket.
	Username string `url:"username" json:"username"` // User name

	// The following parameters are optional
	NewFormat    *util.PVEBool `url:"new-format,omitempty" json:"new-format,omitempty"`       // With webauthn the format of half-authenticated tickts changed. New clients should pass 1 here and not worry about the old format. The old format is deprecated and will be retired with PVE-8.0
	Otp          *string       `url:"otp,omitempty" json:"otp,omitempty"`                     // One-time password for Two-factor authentication.
	Path         *string       `url:"path,omitempty" json:"path,omitempty"`                   // Verify ticket, and check if user have access 'privs' on 'path'
	Privs        *string       `url:"privs,omitempty" json:"privs,omitempty"`                 // Verify ticket, and check if user have access 'privs' on 'path'
	Realm        *string       `url:"realm,omitempty" json:"realm,omitempty"`                 // You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<relam>.
	TfaChallenge *string       `url:"tfa-challenge,omitempty" json:"tfa-challenge,omitempty"` // The signed TFA challenge string the user wants to respond to.
}

type CreateTicketResponse struct {
	Username string `url:"username" json:"username"`

	// The following parameters are optional
	Clustername         *string `url:"clustername,omitempty" json:"clustername,omitempty"`
	Csrfpreventiontoken *string `url:"CSRFPreventionToken,omitempty" json:"CSRFPreventionToken,omitempty"`
	Ticket              *string `url:"ticket,omitempty" json:"ticket,omitempty"`
}

type ChangePasswordRequest struct {
	Password string `url:"password" json:"password"` // The new password.
	Userid   string `url:"userid" json:"userid"`     // User ID

}

type PermissionsRequest struct {

	// The following parameters are optional
	Path   *string `url:"path,omitempty" json:"path,omitempty"`     // Only dump this specific path, not the whole tree.
	Userid *string `url:"userid,omitempty" json:"userid,omitempty"` // User ID or full API token ID
}

// Index Directory index.
func (c *Client) Index(ctx context.Context) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/access", "GET", &resp, nil)
	return resp, err
}

// ReadAcl Get Access Control List (ACLs).
func (c *Client) ReadAcl(ctx context.Context) ([]ReadAclResponse, error) {
	var resp []ReadAclResponse

	err := c.httpClient.Do(ctx, "/access/acl", "GET", &resp, nil)
	return resp, err
}

// UpdateAcl Update Access Control List (add or remove permissions).
func (c *Client) UpdateAcl(ctx context.Context, req UpdateAclRequest) error {

	err := c.httpClient.Do(ctx, "/access/acl", "PUT", nil, req)
	return err
}

// GetTicket Dummy. Useful for formatters which want to provide a login page.
func (c *Client) GetTicket(ctx context.Context) error {

	err := c.httpClient.Do(ctx, "/access/ticket", "GET", nil, nil)
	return err
}

// CreateTicket Create or verify authentication ticket.
func (c *Client) CreateTicket(ctx context.Context, req CreateTicketRequest) (CreateTicketResponse, error) {
	var resp CreateTicketResponse

	err := c.httpClient.Do(ctx, "/access/ticket", "POST", &resp, req)
	return resp, err
}

// ChangePassword Change user password.
func (c *Client) ChangePassword(ctx context.Context, req ChangePasswordRequest) error {

	err := c.httpClient.Do(ctx, "/access/password", "PUT", nil, req)
	return err
}

// Permissions Retrieve effective permissions of given user/token.
func (c *Client) Permissions(ctx context.Context, req PermissionsRequest) (map[string]interface{}, error) {
	var resp map[string]interface{}

	err := c.httpClient.Do(ctx, "/access/permissions", "GET", &resp, req)
	return resp, err
}
