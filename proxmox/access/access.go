// File generated by proxmox json schema, DO NOT EDIT

package access

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Index Directory index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/access", "GET", &resp, nil)
	return resp, err
}

type ReadAclResponse []*struct {
	Ugid      string `url:"ugid",json:"ugid"`
	Path      string `url:"path",json:"path"`
	Propagate *bool  `url:"propagate,omitempty",json:"propagate,omitempty"`
	Roleid    string `url:"roleid",json:"roleid"`
	Type      string `url:"type",json:"type"`
}

// ReadAcl Get Access Control List (ACLs).
func (c *Client) ReadAcl(ctx context.Context) (*ReadAclResponse, error) {
	var resp *ReadAclResponse

	err := c.httpClient.Do(ctx, "/access/acl", "GET", &resp, nil)
	return resp, err
}

type UpdateAclRequest struct {
	Users     *string `url:"users,omitempty",json:"users,omitempty"`
	Delete    *bool   `url:"delete,omitempty",json:"delete,omitempty"`
	Groups    *string `url:"groups,omitempty",json:"groups,omitempty"`
	Path      string  `url:"path",json:"path"`
	Propagate *bool   `url:"propagate,omitempty",json:"propagate,omitempty"`
	Roles     string  `url:"roles",json:"roles"`
	Tokens    *string `url:"tokens,omitempty",json:"tokens,omitempty"`
}

type UpdateAclResponse map[string]interface{}

// UpdateAcl Update Access Control List (add or remove permissions).
func (c *Client) UpdateAcl(ctx context.Context, req *UpdateAclRequest) (*UpdateAclResponse, error) {
	var resp *UpdateAclResponse

	err := c.httpClient.Do(ctx, "/access/acl", "PUT", &resp, req)
	return resp, err
}

type GetTicketResponse map[string]interface{}

// GetTicket Dummy. Useful for formatters which want to provide a login page.
func (c *Client) GetTicket(ctx context.Context) (*GetTicketResponse, error) {
	var resp *GetTicketResponse

	err := c.httpClient.Do(ctx, "/access/ticket", "GET", &resp, nil)
	return resp, err
}

type CreateTicketRequest struct {
	TfaChallenge *string `url:"tfa-challenge,omitempty",json:"tfa-challenge,omitempty"`
	Username     string  `url:"username",json:"username"`
	NewFormat    *bool   `url:"new-format,omitempty",json:"new-format,omitempty"`
	Otp          *string `url:"otp,omitempty",json:"otp,omitempty"`
	Password     string  `url:"password",json:"password"`
	Path         *string `url:"path,omitempty",json:"path,omitempty"`
	Privs        *string `url:"privs,omitempty",json:"privs,omitempty"`
	Realm        *string `url:"realm,omitempty",json:"realm,omitempty"`
}

type CreateTicketResponse struct {
	Csrfpreventiontoken *string `url:"CSRFPreventionToken,omitempty",json:"CSRFPreventionToken,omitempty"`
	Clustername         *string `url:"clustername,omitempty",json:"clustername,omitempty"`
	Ticket              *string `url:"ticket,omitempty",json:"ticket,omitempty"`
	Username            string  `url:"username",json:"username"`
}

// CreateTicket Create or verify authentication ticket.
func (c *Client) CreateTicket(ctx context.Context, req *CreateTicketRequest) (*CreateTicketResponse, error) {
	var resp *CreateTicketResponse

	err := c.httpClient.Do(ctx, "/access/ticket", "POST", &resp, req)
	return resp, err
}

type ChangePasswordRequest struct {
	Password string `url:"password",json:"password"`
	Userid   string `url:"userid",json:"userid"`
}

type ChangePasswordResponse map[string]interface{}

// ChangePassword Change user password.
func (c *Client) ChangePassword(ctx context.Context, req *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	var resp *ChangePasswordResponse

	err := c.httpClient.Do(ctx, "/access/password", "PUT", &resp, req)
	return resp, err
}

type PermissionsRequest struct {
	Userid *string `url:"userid,omitempty",json:"userid,omitempty"`
	Path   *string `url:"path,omitempty",json:"path,omitempty"`
}

type PermissionsResponse map[string]interface{}

// Permissions Retrieve effective permissions of given user/token.
func (c *Client) Permissions(ctx context.Context, req *PermissionsRequest) (*PermissionsResponse, error) {
	var resp *PermissionsResponse

	err := c.httpClient.Do(ctx, "/access/permissions", "GET", &resp, req)
	return resp, err
}
