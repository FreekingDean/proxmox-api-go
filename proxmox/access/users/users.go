// File generated by proxmox json schema, DO NOT EDIT

package users

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexRequest struct {
	Full    *bool `url:"full,omitempty",json:"full,omitempty"`
	Enabled *bool `url:"enabled,omitempty",json:"enabled,omitempty"`
}

type IndexResponse []*struct {
	Lastname  *string `url:"lastname,omitempty",json:"lastname,omitempty"`
	RealmType *string `url:"realm-type,omitempty",json:"realm-type,omitempty"`
	Comment   *string `url:"comment,omitempty",json:"comment,omitempty"`
	Email     *string `url:"email,omitempty",json:"email,omitempty"`
	Enable    *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	Expire    *int    `url:"expire,omitempty",json:"expire,omitempty"`
	Firstname *string `url:"firstname,omitempty",json:"firstname,omitempty"`
	Groups    *string `url:"groups,omitempty",json:"groups,omitempty"`
	Userid    string  `url:"userid",json:"userid"`
	Keys      *string `url:"keys,omitempty",json:"keys,omitempty"`
	Tokens    []*struct {
		Comment *string `url:"comment,omitempty",json:"comment,omitempty"`
		Expire  *int    `url:"expire,omitempty",json:"expire,omitempty"`
		Privsep *bool   `url:"privsep,omitempty",json:"privsep,omitempty"`
		Tokenid string  `url:"tokenid",json:"tokenid"`
	} `url:"tokens,omitempty",json:"tokens,omitempty"`
}

// Index User index.
func (c *Client) Index(ctx context.Context, req *IndexRequest) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/access/users", "GET", &resp, req)
	return resp, err
}

type CreateRequest struct {
	Lastname  *string `url:"lastname,omitempty",json:"lastname,omitempty"`
	Password  *string `url:"password,omitempty",json:"password,omitempty"`
	Firstname *string `url:"firstname,omitempty",json:"firstname,omitempty"`
	Groups    *string `url:"groups,omitempty",json:"groups,omitempty"`
	Keys      *string `url:"keys,omitempty",json:"keys,omitempty"`
	Expire    *int    `url:"expire,omitempty",json:"expire,omitempty"`
	Userid    string  `url:"userid",json:"userid"`
	Comment   *string `url:"comment,omitempty",json:"comment,omitempty"`
	Email     *string `url:"email,omitempty",json:"email,omitempty"`
	Enable    *bool   `url:"enable,omitempty",json:"enable,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create new user.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/access/users", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Userid string `url:"userid",json:"userid"`
}

type FindResponse struct {
	Comment   *string                `url:"comment,omitempty",json:"comment,omitempty"`
	Email     *string                `url:"email,omitempty",json:"email,omitempty"`
	Expire    *int                   `url:"expire,omitempty",json:"expire,omitempty"`
	Firstname *string                `url:"firstname,omitempty",json:"firstname,omitempty"`
	Groups    []string               `url:"groups,omitempty",json:"groups,omitempty"`
	Lastname  *string                `url:"lastname,omitempty",json:"lastname,omitempty"`
	Tokens    map[string]interface{} `url:"tokens,omitempty",json:"tokens,omitempty"`
	Enable    *bool                  `url:"enable,omitempty",json:"enable,omitempty"`
	Keys      *string                `url:"keys,omitempty",json:"keys,omitempty"`
}

// Find Get user configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/access/users/{userid}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Enable    *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	Firstname *string `url:"firstname,omitempty",json:"firstname,omitempty"`
	Groups    *string `url:"groups,omitempty",json:"groups,omitempty"`
	Lastname  *string `url:"lastname,omitempty",json:"lastname,omitempty"`
	Append    *bool   `url:"append,omitempty",json:"append,omitempty"`
	Comment   *string `url:"comment,omitempty",json:"comment,omitempty"`
	Email     *string `url:"email,omitempty",json:"email,omitempty"`
	Expire    *int    `url:"expire,omitempty",json:"expire,omitempty"`
	Keys      *string `url:"keys,omitempty",json:"keys,omitempty"`
	Userid    string  `url:"userid",json:"userid"`
}

type UpdateResponse map[string]interface{}

// Update Update user configuration.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/access/users/{userid}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Userid string `url:"userid",json:"userid"`
}

type DeleteResponse map[string]interface{}

// Delete Delete user.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/access/users/{userid}", "DELETE", &resp, req)
	return resp, err
}

type ReadUserTfaTypeTfaRequest struct {
	Multiple *bool  `url:"multiple,omitempty",json:"multiple,omitempty"`
	Userid   string `url:"userid",json:"userid"`
}

type ReadUserTfaTypeTfaResponse struct {
	User  *string  `url:"user,omitempty",json:"user,omitempty"`
	Realm *string  `url:"realm,omitempty",json:"realm,omitempty"`
	Types []string `url:"types,omitempty",json:"types,omitempty"`
}

// ReadUserTfaTypeTfa Get user TFA types (Personal and Realm).
func (c *Client) ReadUserTfaTypeTfa(ctx context.Context, req *ReadUserTfaTypeTfaRequest) (*ReadUserTfaTypeTfaResponse, error) {
	var resp *ReadUserTfaTypeTfaResponse

	err := c.httpClient.Do(ctx, "/access/users/{userid}/tfa", "GET", &resp, req)
	return resp, err
}
