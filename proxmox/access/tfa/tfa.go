// File generated by proxmox json schema, DO NOT EDIT

package tfa

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Entries []*struct {
		Created     int    `url:"created",json:"created"`
		Description string `url:"description",json:"description"`
		Enable      *bool  `url:"enable,omitempty",json:"enable,omitempty"`
		Id          string `url:"id",json:"id"`
		Type        string `url:"type",json:"type"`
	} `url:"entries",json:"entries"`
	Userid string `url:"userid",json:"userid"`
}

// Index List TFA configurations of users.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/access/tfa", "GET", &resp, nil)
	return resp, err
}

type CreateRequest struct {
	Response string `url:"response",json:"response"`
}

type CreateResponse struct {
	Ticket string `url:"ticket",json:"ticket"`
}

// Create Finish a u2f challenge.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/access/tfa", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Userid string `url:"userid",json:"userid"`
}

type FindResponse []*struct {
	Type        string `url:"type",json:"type"`
	Created     int    `url:"created",json:"created"`
	Description string `url:"description",json:"description"`
	Enable      *bool  `url:"enable,omitempty",json:"enable,omitempty"`
	Id          string `url:"id",json:"id"`
}

// Find List TFA configurations of users.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/access/tfa/{userid}", "GET", &resp, req)
	return resp, err
}

type ChildCreateRequest struct {
	Challenge   *string `url:"challenge,omitempty",json:"challenge,omitempty"`
	Description *string `url:"description,omitempty",json:"description,omitempty"`
	Password    *string `url:"password,omitempty",json:"password,omitempty"`
	Totp        *string `url:"totp,omitempty",json:"totp,omitempty"`
	Type        string  `url:"type",json:"type"`
	Userid      string  `url:"userid",json:"userid"`
	Value       *string `url:"value,omitempty",json:"value,omitempty"`
}

type ChildCreateResponse struct {
	Challenge *string  `url:"challenge,omitempty",json:"challenge,omitempty"`
	Id        string   `url:"id",json:"id"`
	Recovery  []string `url:"recovery,omitempty",json:"recovery,omitempty"`
}

// ChildCreate Add a TFA entry for a user.
func (c *Client) ChildCreate(ctx context.Context, req *ChildCreateRequest) (*ChildCreateResponse, error) {
	var resp *ChildCreateResponse

	err := c.httpClient.Do(ctx, "/access/tfa/{userid}", "POST", &resp, req)
	return resp, err
}

type DeleteTfaIdRequest struct {
	Id       string  `url:"id",json:"id"`
	Password *string `url:"password,omitempty",json:"password,omitempty"`
	Userid   string  `url:"userid",json:"userid"`
}

type DeleteTfaIdResponse map[string]interface{}

// DeleteTfaId Delete a TFA entry by ID.
func (c *Client) DeleteTfaId(ctx context.Context, req *DeleteTfaIdRequest) (*DeleteTfaIdResponse, error) {
	var resp *DeleteTfaIdResponse

	err := c.httpClient.Do(ctx, "/access/tfa/{userid}/{id}", "DELETE", &resp, req)
	return resp, err
}

type GetTfaEntryIdRequest struct {
	Id     string `url:"id",json:"id"`
	Userid string `url:"userid",json:"userid"`
}

type GetTfaEntryIdResponse struct {
	Created     int    `url:"created",json:"created"`
	Description string `url:"description",json:"description"`
	Enable      *bool  `url:"enable,omitempty",json:"enable,omitempty"`
	Id          string `url:"id",json:"id"`
	Type        string `url:"type",json:"type"`
}

// GetTfaEntryId Fetch a requested TFA entry if present.
func (c *Client) GetTfaEntryId(ctx context.Context, req *GetTfaEntryIdRequest) (*GetTfaEntryIdResponse, error) {
	var resp *GetTfaEntryIdResponse

	err := c.httpClient.Do(ctx, "/access/tfa/{userid}/{id}", "GET", &resp, req)
	return resp, err
}

type UpdateTfaEntryIdRequest struct {
	Description *string `url:"description,omitempty",json:"description,omitempty"`
	Enable      *bool   `url:"enable,omitempty",json:"enable,omitempty"`
	Id          string  `url:"id",json:"id"`
	Password    *string `url:"password,omitempty",json:"password,omitempty"`
	Userid      string  `url:"userid",json:"userid"`
}

type UpdateTfaEntryIdResponse map[string]interface{}

// UpdateTfaEntryId Add a TFA entry for a user.
func (c *Client) UpdateTfaEntryId(ctx context.Context, req *UpdateTfaEntryIdRequest) (*UpdateTfaEntryIdResponse, error) {
	var resp *UpdateTfaEntryIdResponse

	err := c.httpClient.Do(ctx, "/access/tfa/{userid}/{id}", "PUT", &resp, req)
	return resp, err
}
