// File generated by proxmox json schema, DO NOT EDIT

package groups

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse struct {
	Groupid string `url:"groupid" json:"groupid"`

	// The following parameters are optional
	Comment *string `url:"comment,omitempty" json:"comment,omitempty"`
	Users   *string `url:"users,omitempty" json:"users,omitempty"` // list of users which form this group
}

type CreateRequest struct {
	Groupid string `url:"groupid" json:"groupid"`

	// The following parameters are optional
	Comment *string `url:"comment,omitempty" json:"comment,omitempty"`
}

type FindRequest struct {
	Groupid string `url:"groupid" json:"groupid"`
}

type FindResponse struct {
	Members []string `url:"members" json:"members"`

	// The following parameters are optional
	Comment *string `url:"comment,omitempty" json:"comment,omitempty"`
}

type UpdateRequest struct {
	Groupid string `url:"groupid" json:"groupid"`

	// The following parameters are optional
	Comment *string `url:"comment,omitempty" json:"comment,omitempty"`
}

type DeleteRequest struct {
	Groupid string `url:"groupid" json:"groupid"`
}

// Index Group index.
func (c *Client) Index(ctx context.Context) ([]IndexResponse, error) {
	var resp []IndexResponse

	err := c.httpClient.Do(ctx, "/access/groups", "GET", &resp, nil)
	return resp, err
}

// Create Create new group.
func (c *Client) Create(ctx context.Context, req CreateRequest) error {

	err := c.httpClient.Do(ctx, "/access/groups", "POST", nil, req)
	return err
}

// Find Get group configuration.
func (c *Client) Find(ctx context.Context, req FindRequest) (FindResponse, error) {
	var resp FindResponse

	err := c.httpClient.Do(ctx, "/access/groups/{groupid}", "GET", &resp, req)
	return resp, err
}

// Update Update group data.
func (c *Client) Update(ctx context.Context, req UpdateRequest) error {

	err := c.httpClient.Do(ctx, "/access/groups/{groupid}", "PUT", nil, req)
	return err
}

// Delete Delete group.
func (c *Client) Delete(ctx context.Context, req DeleteRequest) error {

	err := c.httpClient.Do(ctx, "/access/groups/{groupid}", "DELETE", nil, req)
	return err
}
