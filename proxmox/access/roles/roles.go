// File generated by proxmox json schema, DO NOT EDIT

package roles

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Roleid string `url:"roleid",json:"roleid"`

	// The following parameters are optional
	Privs   *string `url:"privs,omitempty",json:"privs,omitempty"`
	Special *bool   `url:"special,omitempty",json:"special,omitempty"`
}

// Index Role index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/access/roles", "GET", &resp, nil)
	return resp, err
}

type CreateRequest struct {
	Roleid string `url:"roleid",json:"roleid"`

	// The following parameters are optional
	Privs *string `url:"privs,omitempty",json:"privs,omitempty"`
}

type CreateResponse map[string]interface{}

// Create Create new role.
func (c *Client) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp *CreateResponse

	err := c.httpClient.Do(ctx, "/access/roles", "POST", &resp, req)
	return resp, err
}

type FindRequest struct {
	Roleid string `url:"roleid",json:"roleid"`
}

type FindResponse map[string]interface{}

// Find Get role configuration.
func (c *Client) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	var resp *FindResponse

	err := c.httpClient.Do(ctx, "/access/roles/{roleid}", "GET", &resp, req)
	return resp, err
}

type UpdateRequest struct {
	Roleid string `url:"roleid",json:"roleid"`

	// The following parameters are optional
	Append *bool   `url:"append,omitempty",json:"append,omitempty"`
	Privs  *string `url:"privs,omitempty",json:"privs,omitempty"`
}

type UpdateResponse map[string]interface{}

// Update Update an existing role.
func (c *Client) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	var resp *UpdateResponse

	err := c.httpClient.Do(ctx, "/access/roles/{roleid}", "PUT", &resp, req)
	return resp, err
}

type DeleteRequest struct {
	Roleid string `url:"roleid",json:"roleid"`
}

type DeleteResponse map[string]interface{}

// Delete Delete role.
func (c *Client) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp *DeleteResponse

	err := c.httpClient.Do(ctx, "/access/roles/{roleid}", "DELETE", &resp, req)
	return resp, err
}
