// File generated by proxmox json schema, DO NOT EDIT

package openid

import (
	"context"
)

type HTTPClient interface {
	Do(context.Context, string, string, interface{}, interface{}) error
}

type Client struct {
	httpClient HTTPClient
}

func New(c HTTPClient) *Client {
	return &Client{
		httpClient: c,
	}
}

type IndexResponse []*struct {
	Subdir string `url:"subdir",json:"subdir"`
}

// Index Directory index.
func (c *Client) Index(ctx context.Context) (*IndexResponse, error) {
	var resp *IndexResponse

	err := c.httpClient.Do(ctx, "/access/openid", "GET", &resp, nil)
	return resp, err
}

type AuthUrlRequest struct {
	Realm       string `url:"realm",json:"realm"`
	RedirectUrl string `url:"redirect-url",json:"redirect-url"`
}

type AuthUrlResponse string

// AuthUrl Get the OpenId Authorization Url for the specified realm.
func (c *Client) AuthUrl(ctx context.Context, req *AuthUrlRequest) (*AuthUrlResponse, error) {
	var resp *AuthUrlResponse

	err := c.httpClient.Do(ctx, "/access/openid/auth-url", "POST", &resp, req)
	return resp, err
}

type LoginRequest struct {
	Code        string `url:"code",json:"code"`
	RedirectUrl string `url:"redirect-url",json:"redirect-url"`
	State       string `url:"state",json:"state"`
}

type LoginResponse struct {
	Csrfpreventiontoken string                 `url:"CSRFPreventionToken",json:"CSRFPreventionToken"`
	Cap                 map[string]interface{} `url:"cap",json:"cap"`
	Clustername         *string                `url:"clustername,omitempty",json:"clustername,omitempty"`
	Ticket              string                 `url:"ticket",json:"ticket"`
	Username            string                 `url:"username",json:"username"`
}

// Login  Verify OpenID authorization code and create a ticket.
func (c *Client) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	var resp *LoginResponse

	err := c.httpClient.Do(ctx, "/access/openid/login", "POST", &resp, req)
	return resp, err
}
